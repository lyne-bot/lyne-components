name: Continuous Integration Secure
# Secure execution of continuous integration jobs
# which are performed upon completion of the
# "Continuous Integration" workflow
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
on:
  workflow_run:
    workflows: ['Continuous Integration']
    types: [completed]

jobs:
  preview-image:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.conclusion == 'success' && (
        github.event.workflow_run.event == 'pull_request' || (
          github.event.workflow_run.event == 'push' &&
          github.event.workflow_run.head_branch == 'main'
        )
      )
    env:
      IMAGE_REPO: ghcr.io/lyne-design-system/lyne-components/storybook-preview
      IMAGE_TAG: rev-${{ github.event.workflow_run.head_sha }}
      ALLOWED_EXTENSIONS: css, gitignore, gitkeep, html, ico, jpg, js, json, png, scss, stackblitzrc, svg, ts
    steps:
      - name: Login to GitHub Docker Repository
        uses: azure/docker-login@v1
        with:
          login-server: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: ./.github/actions/download-artifacts-from-workflow
        with:
          artifacts: 'storybook'
      - run: mkdir storybook-static
      - run: unzip storybook.zip -d storybook-static
      - name: Remove files with forbidden extensions
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const allowedExtensions = process.env.ALLOWED_EXTENSIONS.split(/[, ]+/g).map(e => `.${e}`);
            function clean(dir) {
              fs.readdirSync(dir, { withFileTypes: true }).forEach((d) => {
                if (d.isDirectory()) {
                  clean(path.join(dir, d.name));
                } else if (d.isFile() && allowedExtensions.includes(path.extname(d.name))) {
                  fs.unlinkSync(path.join(dir, d.name));
                }
              })
            }
            clean(path.resolve('storybook-static'));

      - name: 'Docker: Build image'
        run: docker build -t $IMAGE_REPO:$IMAGE_TAG .
      - name: 'Docker: Publish image'
        run: docker push $IMAGE_REPO:$IMAGE_TAG

  codecov:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: ./.github/actions/download-artifacts-from-workflow
        with:
          artifacts: 'pr, coverage'
      - run: unzip pr.zip
      - run: mkdir coverage
      - run: unzip coverage.zip -d coverage
      - name: Read PR number
        id: pr-number
        run: echo "pr=$(<NR)" >> $GITHUB_OUTPUT
        shell: bash
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage
          override_branch: ${{ github.event.workflow_run.head_branch }}
          override_commit: ${{ github.event.workflow_run.head_commit.id }}
          override_pr: ${{ steps.yarn-cache-dir-path.outputs.pr }}
          fail_ci_if_error: true
          verbose: true

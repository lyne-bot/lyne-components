/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InterfaceAccordionItemAttributes } from "./components/sbb-accordion-item/sbb-accordion-item.custom";
import { InterfaceSbbActionGroupAttributes } from "./components/sbb-action-group/sbb-action-group.custom";
import { InterfaceButtonAttributes } from "./components/sbb-button/sbb-button.custom";
import { InterfaceLinkAttributes } from "./components/sbb-link/sbb-link.custom";
import { InterfaceAlertAttributes } from "./components/sbb-alert/sbb-alert.custom";
import { InterfaceTitleAttributes } from "./components/sbb-title/sbb-title.custom";
import { ButtonType, LinkTargetType, ValidationChangeEvent } from "./global/interfaces";
import { InterfaceSbbAlertGroupAttributes } from "./components/sbb-alert-group/sbb-alert-group.custom";
import { InterfaceSbbCardAttributes } from "./components/sbb-card/sbb-card.custom";
import { InterfaceSbbCardBadgeAttributes } from "./components/sbb-card-badge/sbb-card-badge.custom";
import { CheckboxStateChange, InterfaceSbbCheckboxAttributes } from "./components/sbb-checkbox/sbb-checkbox.custom";
import { InterfaceSbbCheckboxGroupAttributes } from "./components/sbb-checkbox-group/sbb-checkbox-group.custom";
import { InterfaceSbbChipAttributes } from "./components/sbb-chip/sbb-chip.custom";
import { InputUpdateEvent } from "./components/sbb-datepicker/sbb-datepicker.helper";
import { InterfaceSbbDividerAttributes } from "./components/sbb-divider/sbb-divider.custom";
import { InterfaceFooterAttributes } from "./components/sbb-footer/sbb-footer.custom";
import { InterfaceSbbFormFieldAttributes } from "./components/sbb-form-field/sbb-form-field.custom";
import { InterfaceSbbHeaderActionAttributes } from "./components/sbb-header-action/sbb-header-action.custom";
import { InterfaceImageAttributes } from "./components/sbb-image/sbb-image.custom";
import { InterfaceJourneyHeaderAttributes } from "./components/sbb-journey-header/sbb-journey-header.custom";
import { InterfaceSbbJourneySummaryAttributes } from "./components/sbb-journey-summary/sbb-journey-summary.custom";
import { InterfaceLinkListAttributes } from "./components/sbb-link-list/sbb-link-list.custom";
import { InterfaceSbbLoadingIndicatorAttributes } from "./components/sbb-loading-indicator/sbb-loading-indicator.custom";
import { InterfaceLogoAttributes } from "./components/sbb-logo/sbb-logo.custom";
import { InterfaceNotificationAttributes } from "./components/sbb-notification/sbb-notification.custom";
import { ITripItem, Leg } from "./global/timetable";
import { PearlChainVerticalItemAttributes } from "./components/sbb-pearl-chain-vertical-item/sbb-pearl-chain-vertical-item.custom";
import { InterfaceSbbRadioButtonAttributes, RadioButtonStateChange } from "./components/sbb-radio-button/sbb-radio-button.custom";
import { InterfaceSbbRadioButtonGroupAttributes } from "./components/sbb-radio-button-group/sbb-radio-button-group.custom";
import { SelectChange } from "./components/sbb-select/sbb-select.custom";
import { InterfaceSignetAttributes } from "./components/sbb-signet/sbb-signet.custom";
import { InterfaceTabTitleAttributes } from "./components/sbb-tab-title/sbb-tab-title.custom";
import { TagStateChange } from "./components/sbb-tag/sbb-tag.custom";
import { InterfaceTimetableParkAndRailAttributes } from "./components/sbb-timetable-park-and-rail/sbb-timetable-park-and-rail.custom";
import { Boarding, Price } from "./components/sbb-timetable-row/sbb-timetable-row.custom";
import { InterfaceTimetableTransportationNumberAttributes } from "./components/sbb-timetable-transportation-number/sbb-timetable-transportation-number.custom";
import { InterfaceTimetableTransportationTimeAttributes } from "./components/sbb-timetable-transportation-time/sbb-timetable-transportation-time.custom";
import { InterfaceTimetableTravelHintsAttributes } from "./components/sbb-timetable-travel-hints/sbb-timetable-travel-hints.custom";
import { SbbToastAriaPoliteness, SbbToastPosition } from "./components/sbb-toast/sbb-toast.custom";
import { InterfaceSbbToggleAttributes } from "./components/sbb-toggle/sbb-toggle.custom";
import { InterfaceToggleCheckAttributes } from "./components/sbb-toggle-check/sbb-toggle-check.custom";
import { ToggleOptionStateChange } from "./components/sbb-toggle-option/sbb-toggle-option.custom";
import { SbbOverlayState } from "./components";
import { InterfaceSbbTrainAttributes } from "./components/sbb-train/sbb-train.custom";
import { InterfaceSbbTrainWagonAttributes } from "./components/sbb-train-wagon/sbb-train-wagon.custom";
export { InterfaceAccordionItemAttributes } from "./components/sbb-accordion-item/sbb-accordion-item.custom";
export { InterfaceSbbActionGroupAttributes } from "./components/sbb-action-group/sbb-action-group.custom";
export { InterfaceButtonAttributes } from "./components/sbb-button/sbb-button.custom";
export { InterfaceLinkAttributes } from "./components/sbb-link/sbb-link.custom";
export { InterfaceAlertAttributes } from "./components/sbb-alert/sbb-alert.custom";
export { InterfaceTitleAttributes } from "./components/sbb-title/sbb-title.custom";
export { ButtonType, LinkTargetType, ValidationChangeEvent } from "./global/interfaces";
export { InterfaceSbbAlertGroupAttributes } from "./components/sbb-alert-group/sbb-alert-group.custom";
export { InterfaceSbbCardAttributes } from "./components/sbb-card/sbb-card.custom";
export { InterfaceSbbCardBadgeAttributes } from "./components/sbb-card-badge/sbb-card-badge.custom";
export { CheckboxStateChange, InterfaceSbbCheckboxAttributes } from "./components/sbb-checkbox/sbb-checkbox.custom";
export { InterfaceSbbCheckboxGroupAttributes } from "./components/sbb-checkbox-group/sbb-checkbox-group.custom";
export { InterfaceSbbChipAttributes } from "./components/sbb-chip/sbb-chip.custom";
export { InputUpdateEvent } from "./components/sbb-datepicker/sbb-datepicker.helper";
export { InterfaceSbbDividerAttributes } from "./components/sbb-divider/sbb-divider.custom";
export { InterfaceFooterAttributes } from "./components/sbb-footer/sbb-footer.custom";
export { InterfaceSbbFormFieldAttributes } from "./components/sbb-form-field/sbb-form-field.custom";
export { InterfaceSbbHeaderActionAttributes } from "./components/sbb-header-action/sbb-header-action.custom";
export { InterfaceImageAttributes } from "./components/sbb-image/sbb-image.custom";
export { InterfaceJourneyHeaderAttributes } from "./components/sbb-journey-header/sbb-journey-header.custom";
export { InterfaceSbbJourneySummaryAttributes } from "./components/sbb-journey-summary/sbb-journey-summary.custom";
export { InterfaceLinkListAttributes } from "./components/sbb-link-list/sbb-link-list.custom";
export { InterfaceSbbLoadingIndicatorAttributes } from "./components/sbb-loading-indicator/sbb-loading-indicator.custom";
export { InterfaceLogoAttributes } from "./components/sbb-logo/sbb-logo.custom";
export { InterfaceNotificationAttributes } from "./components/sbb-notification/sbb-notification.custom";
export { ITripItem, Leg } from "./global/timetable";
export { PearlChainVerticalItemAttributes } from "./components/sbb-pearl-chain-vertical-item/sbb-pearl-chain-vertical-item.custom";
export { InterfaceSbbRadioButtonAttributes, RadioButtonStateChange } from "./components/sbb-radio-button/sbb-radio-button.custom";
export { InterfaceSbbRadioButtonGroupAttributes } from "./components/sbb-radio-button-group/sbb-radio-button-group.custom";
export { SelectChange } from "./components/sbb-select/sbb-select.custom";
export { InterfaceSignetAttributes } from "./components/sbb-signet/sbb-signet.custom";
export { InterfaceTabTitleAttributes } from "./components/sbb-tab-title/sbb-tab-title.custom";
export { TagStateChange } from "./components/sbb-tag/sbb-tag.custom";
export { InterfaceTimetableParkAndRailAttributes } from "./components/sbb-timetable-park-and-rail/sbb-timetable-park-and-rail.custom";
export { Boarding, Price } from "./components/sbb-timetable-row/sbb-timetable-row.custom";
export { InterfaceTimetableTransportationNumberAttributes } from "./components/sbb-timetable-transportation-number/sbb-timetable-transportation-number.custom";
export { InterfaceTimetableTransportationTimeAttributes } from "./components/sbb-timetable-transportation-time/sbb-timetable-transportation-time.custom";
export { InterfaceTimetableTravelHintsAttributes } from "./components/sbb-timetable-travel-hints/sbb-timetable-travel-hints.custom";
export { SbbToastAriaPoliteness, SbbToastPosition } from "./components/sbb-toast/sbb-toast.custom";
export { InterfaceSbbToggleAttributes } from "./components/sbb-toggle/sbb-toggle.custom";
export { InterfaceToggleCheckAttributes } from "./components/sbb-toggle-check/sbb-toggle-check.custom";
export { ToggleOptionStateChange } from "./components/sbb-toggle-option/sbb-toggle-option.custom";
export { SbbOverlayState } from "./components";
export { InterfaceSbbTrainAttributes } from "./components/sbb-train/sbb-train.custom";
export { InterfaceSbbTrainWagonAttributes } from "./components/sbb-train-wagon/sbb-train-wagon.custom";
export namespace Components {
    interface SbbAccordion {
        /**
          * Set this if you want to use the accordion on a non-white background.
         */
        "nonWhiteBackground"?: boolean;
        /**
          * Set this if you want the accordion to always have open only one item.
         */
        "onlyOneOpen"?: boolean;
    }
    interface SbbAccordionItem {
        /**
          * If set, an accordion can not be toggled
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the event after opening/closing accordion
         */
        "eventId"?: string;
        /**
          * Text to show as title for the accordion.
         */
        "heading": string;
        /**
          * Heading level.
         */
        "headingLevel"?: InterfaceAccordionItemAttributes['level'];
        /**
          * Set to true to open the accordion item. Set to false to close it.
         */
        "open"?: boolean;
    }
    interface SbbActionGroup {
        /**
          * Set the slotted `<sbb-action-group>` children's alignment.
         */
        "alignGroup": InterfaceSbbActionGroupAttributes['alignGroup'];
        /**
          * Size of the nested sbb-button instances. This will overwrite the size attribute of nested sbb-button instances.
         */
        "buttonSize"?: InterfaceButtonAttributes['size'];
        /**
          * Overrides the behaviour of `orientation` property.
         */
        "horizontalFrom"?: InterfaceSbbActionGroupAttributes['horizontalFrom'];
        /**
          * Size of the nested sbb-link instances. This will overwrite the size attribute of nested sbb-link instances.
         */
        "linkSize"?: InterfaceLinkAttributes['size'];
        /**
          * Indicates the orientation of the components inside the `<sbb-action-group>`.
         */
        "orientation": InterfaceSbbActionGroupAttributes['orientation'];
    }
    interface SbbAlert {
        /**
          * This will be forwarded as aria-label to the relevant nested element.
         */
        "accessibilityLabel": string | undefined;
        /**
          * Whether the fade in animation should be disabled.
         */
        "disableAnimation": boolean;
        /**
          * The href value you want to link to.
         */
        "href": string | undefined;
        /**
          * Name of the icon which will be forward to the nested `sbb-icon`. Choose the icons from https://icons.app.sbb.ch. Styling is optimized for icons of type HIM-CUS.
         */
        "iconName"?: string;
        /**
          * Content of the link.
         */
        "linkContent"?: string;
        /**
          * Whether the alert is readonly. In readonly mode, there is no dismiss button offered to the user.
         */
        "readonly": boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel": string | undefined;
        /**
          * Requests dismissal of the alert.
         */
        "requestDismissal": () => Promise<void>;
        /**
          * You can choose between `m` or `l` size.
         */
        "size": InterfaceAlertAttributes['size'];
        /**
          * Where to display the linked URL.
         */
        "target": LinkTargetType | string | undefined;
        /**
          * Content of title.
         */
        "titleContent"?: string;
        /**
          * Level of title, will be rendered as heading tag (e.g. h3). Defaults to level 3.
         */
        "titleLevel": InterfaceTitleAttributes['level'];
    }
    interface SbbAlertGroup {
        /**
          * Title for this alert group which is only visible for screen reader users.
         */
        "accessibilityTitle": string;
        /**
          * Level of the accessibility title, will be rendered as heading tag (e.g. h2). Defaults to level 2.
         */
        "accessibilityTitleLevel": InterfaceTitleAttributes['level'];
        /**
          * The role attribute defines how to announce alerts to the user.  'status': sets aria-live to polite and aria-atomic to true. 'alert': sets aria-live to assertive and aria-atomic to true.
         */
        "role": InterfaceSbbAlertGroupAttributes['role'];
    }
    interface SbbAutocomplete {
        /**
          * Closes the autocomplete.
         */
        "close": () => Promise<void>;
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation": boolean;
        /**
          * Opens the autocomplete.
         */
        "open": () => Promise<void>;
        /**
          * The element where the autocomplete will attach; accepts both an element's id or an HTMLElement. If not set, will search for the first 'sbb-form-field' ancestor.
         */
        "origin": string | HTMLElement;
        /**
          * Whether the icon space is preserved when no icon is set.
         */
        "preserveIconSpace": boolean;
        /**
          * The input element that will trigger the autocomplete opening; accepts both an element's id or an HTMLElement. By default, the autocomplete will open on focus, click, input or `ArrowDown` keypress of the 'trigger' element. If not set, will search for the first 'input' child of a 'sbb-form-field' ancestor.
         */
        "trigger": string | HTMLInputElement;
    }
    interface SbbBreadcrumb {
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to.
         */
        "href": string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
    }
    interface SbbBreadcrumbGroup {
    }
    interface SbbButton {
        /**
          * Whether the button is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is present, button becomes a link).
         */
        "href": string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Set this property to true if you want only a visual representation of a button, but no interaction (a span instead of a link/button will be rendered).
         */
        "isStatic": boolean;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
        /**
          * Negative coloring variant flag.
         */
        "negative": boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Size variant, either l or m.
         */
        "size"?: InterfaceButtonAttributes['size'];
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type": ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
        /**
          * Variant of the button, like primary, secondary etc.
         */
        "variant": InterfaceButtonAttributes['variant'];
    }
    interface SbbCalendar {
        /**
          * A function used to filter out dates.
         */
        "dateFilter": (date: Date | null) => boolean;
        /**
          * The maximum valid date. Takes Date Object, ISOString, and Unix Timestamp (number of seconds since Jan 1 1970).
         */
        "max": Date | string | number;
        /**
          * The minimum valid date. Takes Date Object, ISOString, and Unix Timestamp (number of seconds since Jan 1 1970).
         */
        "min": Date | string | number;
        /**
          * Resets the active month according to the new state of the calendar.
         */
        "resetPosition": () => Promise<void>;
        /**
          * The selected date. Takes Date Object, ISOString, and Unix Timestamp (number of seconds since Jan 1 1970).
         */
        "selectedDate": Date | string | number;
        /**
          * If set to true, two months are displayed
         */
        "wide": boolean;
    }
    interface SbbCard {
        /**
          * Option to set the component's background color.
         */
        "color": InterfaceSbbCardAttributes['color'];
        /**
          * Size variant, either xs, s, m, l, xl, xxl or xxxl.
         */
        "size"?: InterfaceSbbCardAttributes['size'];
    }
    interface SbbCardAction {
        /**
          * Whether the card is active.
         */
        "active": boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean | undefined;
        /**
          * The <form> element to associate the button to it.
         */
        "form"?: string | undefined;
        /**
          * The href value you want to link to.
         */
        "href": string | undefined;
        /**
          * The name of the button.
         */
        "name": string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Default behaviour of the button.
         */
        "type": ButtonType | undefined;
        /**
          * The value associated with button `name` when it's submitted with the form data.
         */
        "value"?: string | undefined;
    }
    interface SbbCardBadge {
        /**
          * Color of the card badge.
         */
        "color": InterfaceSbbCardBadgeAttributes['color'];
    }
    interface SbbCheckbox {
        /**
          * Whether the checkbox is checked.
         */
        "checked": boolean;
        /**
          * Whether the checkbox is disabled.
         */
        "disabled": boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from https://icons.app.sbb.ch (optional).
         */
        "iconName"?: string;
        /**
          * The label position relative to the labelIcon. Defaults to end
         */
        "iconPlacement": InterfaceSbbCheckboxAttributes['iconPlacement'];
        /**
          * Whether the checkbox is indeterminate.
         */
        "indeterminate": boolean;
        /**
          * Whether the checkbox is required.
         */
        "required": boolean;
        /**
          * Label size variant, either m or s.
         */
        "size": InterfaceSbbCheckboxAttributes['size'];
        /**
          * Value of checkbox.
         */
        "value"?: string;
    }
    interface SbbCheckboxGroup {
        /**
          * Whether the checkbox group is disabled.
         */
        "disabled": boolean;
        /**
          * Overrides the behaviour of `orientation` property.
         */
        "horizontalFrom"?: InterfaceSbbCheckboxGroupAttributes['horizontalFrom'];
        /**
          * Indicates the orientation of the checkboxes inside the `<sbb-checkbox-group>`.
         */
        "orientation": InterfaceSbbCheckboxGroupAttributes['orientation'];
        /**
          * Whether the checkbox group is required.
         */
        "required": boolean;
        /**
          * Size variant, either m or s.
         */
        "size": InterfaceSbbCheckboxGroupAttributes['size'];
    }
    interface SbbChip {
        /**
          * Color of the chip.
         */
        "color": InterfaceSbbChipAttributes['color'];
        /**
          * Size of the chip.
         */
        "size": InterfaceSbbChipAttributes['size'];
    }
    interface SbbClock {
    }
    interface SbbDatepicker {
        /**
          * A function used to filter out dates.
         */
        "dateFilter": (date: Date | null) => boolean;
        /**
          * A function used to parse string value into dates.
         */
        "dateParser"?: (value: string) => Date | undefined;
        /**
          * A function used to format dates into the preferred string format.
         */
        "format"?: (date: Date) => string;
        /**
          * Gets the input value with the correct date format.
         */
        "getValueAsDate": () => Promise<Date>;
        /**
          * Reference of the native input connected to the datepicker.
         */
        "input"?: string | HTMLElement;
        /**
          * Set the input value to the correctly formatted value.
         */
        "setValueAsDate": (date: Date | number | string) => Promise<void>;
        /**
          * If set to true, two months are displayed
         */
        "wide": boolean;
    }
    interface SbbDatepickerNextDay {
        /**
          * Datepicker reference.
         */
        "datePicker"?: string | HTMLElement;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
    }
    interface SbbDatepickerPreviousDay {
        /**
          * Datepicker reference.
         */
        "datePicker"?: string | HTMLElement;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
    }
    interface SbbDatepickerToggle {
        /**
          * Datepicker reference.
         */
        "datePicker"?: string | HTMLElement;
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation": boolean;
        /**
          * Opens the calendar.
         */
        "open": () => Promise<void>;
    }
    interface SbbDialog {
        /**
          * This will be forwarded as aria-label to the back button element.
         */
        "accessibilityBackLabel": string | undefined;
        /**
          * This will be forwarded as aria-label to the close button element.
         */
        "accessibilityCloseLabel": string | undefined;
        /**
          * This will be forwarded as aria-label to the relevant nested element.
         */
        "accessibilityLabel": string | undefined;
        /**
          * Closes the dialog element.
         */
        "close": (result?: any, target?: HTMLElement) => Promise<any>;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Negative coloring variant flag.
         */
        "negative": boolean;
        /**
          * Opens the dialog element.
         */
        "open": () => Promise<void>;
        /**
          * Whether a back button is displayed next to the title.
         */
        "titleBackButton": boolean;
        /**
          * Dialog title.
         */
        "titleContent": string;
        /**
          * Level of title, will be rendered as heading tag (e.g. h1). Defaults to level 1.
         */
        "titleLevel": InterfaceTitleAttributes['level'];
    }
    interface SbbDivider {
        /**
          * Negative coloring variant flag
         */
        "negative"?: boolean;
        /**
          * Orientation property with possible values 'horizontal' | 'vertical'. Defaults to horizontal.
         */
        "orientation"?: InterfaceSbbDividerAttributes['orientation'];
    }
    interface SbbFooter {
        /**
          * Footer title text, visually hidden, necessary for screen readers.
         */
        "accessibilityTitle"?: string;
        /**
          * Level of the accessibility title, will be rendered as heading tag (e.g. h1). Defaults to level 1.
         */
        "accessibilityTitleLevel": InterfaceTitleAttributes['level'];
        /**
          * Whether to allow the footer content to stretch to full width. By default, the content has the appropriate page size.
         */
        "expanded": boolean;
        /**
          * Negative coloring variant flag.
         */
        "negative": boolean;
        /**
          * Variants to display the footer. The default, displays the content in regular block element approach. The clock-columns, used a css-grid for displaying the content over different breakpoints.
         */
        "variant": InterfaceFooterAttributes['variant'];
    }
    interface SbbFormError {
    }
    interface SbbFormField {
        /**
          * Whether to display the form field without a border.
         */
        "borderless": boolean;
        /**
          * Whether to reserve space for an error message. `none` does not reserve any space. `reserve` does reserve one row for an error message.
         */
        "errorSpace"?: InterfaceSbbFormFieldAttributes['errorSpace'];
        /**
          * Whether the label should float. If activated, the placeholder of the input is hidden.
         */
        "floatingLabel": boolean;
        /**
          * Label text for the input which is internally rendered as `<label>`.
         */
        "label": string;
        /**
          * Indicates whether the input is optional.
         */
        "optional"?: boolean;
        /**
          * Manually reset the form field. Currently, this only resets the floating label.
         */
        "reset": () => Promise<void>;
        /**
          * Size variant, either l or m.
         */
        "size"?: InterfaceSbbFormFieldAttributes['size'];
        /**
          * Defines the width of the component: - `default`: the component has defined width and min-width; - `collapse`: the component adapts itself to its inner input content.
         */
        "width": 'default' | 'collapse';
    }
    interface SbbHeader {
        /**
          * Whether to allow the header content to stretch to full width. By default, the content has the appropriate page size.
         */
        "expanded": boolean;
        /**
          * Whether the header should hide and show on scroll.
         */
        "hideOnScroll": boolean;
        /**
          * The element's id or the element on which the scroll listener is attached.
         */
        "scrollOrigin": string | HTMLElement | Document;
    }
    interface SbbHeaderAction {
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * Used to set the minimum breakpoint from which the text is displayed. E.g. if set to 'large', the text will be visible for breakpoints large, wide, ultra, and hidden for all the others.
         */
        "expandFrom": InterfaceSbbHeaderActionAttributes['expandFrom'];
        /**
          * Form attribute if component is displayed as a button.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is not present sbb-header-action becomes a button).
         */
        "href": string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Name attribute if component is displayed as a button.
         */
        "name": string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Type attribute if component is displayed as a button.
         */
        "type": ButtonType | undefined;
        /**
          * The value associated with button `name` when it's submitted with the form data.
         */
        "value"?: string;
    }
    interface SbbIcon {
        /**
          * The aria-hidden property is set to "true" by default, since an icon alone does not convey any useful information for a screen-reader user.
         */
        "ariaHidden": string;
        /**
          * Only set the aria-label if aria-hidden is set to "false".
         */
        "ariaLabel": string;
        /**
          * The provided name consisting of the namespace and the name of the icon. If the namespace is missing, the default namespace "sbb" will be used. E.g. `name` (will use "sbb" as namespace) or `namespace:name`.
         */
        "name": string;
        /**
          * When set to `false`, SVG content that is HTTP fetched will not be checked if the response SVG content has any `<script>` elements, or any attributes that start with `on`, such as `onclick`.
          * @default true
         */
        "sanitize": boolean;
    }
    interface SbbImage {
        /**
          * An alt text is not always necessary (e.g. in teaser cards when additional link text is provided). In this case we can leave the value of the alt attribute blank, but the attribute itself still needs to be present. That way we can signal assistive technology, that they can skip the image.
         */
        "alt"?: string;
        /**
          * Set an aspect ratio default is '16-9' (16/9) other values: 'free', '1-1', '1-2', '2-1', '2-3', '3-2', '3-4', '4-3', '4-5', '5-4', '9-16'
         */
        "aspectRatio": InterfaceImageAttributes['aspectRatio'];
        /**
          * border-radius: if set to false, there will be no border-radius on the image
         */
        "borderRadius": boolean;
        /**
          * A caption can provide additional context to the image (e.g. descriptions and the like). Links will automatically receive tabindex=-1 if hideFromScreenreader is set to true. That way they will no longer become focusable.
         */
        "caption"?: string;
        /**
          * If a copyright text is provided, we will add it to the caption and create a structured data json-ld block with the copyright information.
         */
        "copyright"?: string;
        /**
          * Copyright holder can either be an Organization or a Person
         */
        "copyrightHolder": InterfaceImageAttributes['copyrightHolder'];
        /**
          * Set this to true, if you want to pass a custom focal point for the image. See full documentation here: https://docs.imgix.com/apis/rendering/focalpoint-crop
         */
        "customFocalPoint": boolean;
        /**
          * If the lazy property is set to true, the module will automatically change the decoding to async, otherwise the decoding is set to auto which leaves the handling up to the browser. Read more about the decoding attribute here: https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding
         */
        "decoding": InterfaceImageAttributes['decoding'];
        /**
          * Whether the fade animation from blurred to real image should be disabled.
         */
        "disableAnimation": boolean;
        /**
          * Set this to true, to receive visual guidance where the custom focal point is currently set.
         */
        "focalPointDebug": boolean;
        /**
          * Pass in a floating number between 0 (left) and 1 (right).
         */
        "focalPointX": number;
        /**
          * Pass in a floating number between 0 (top) and 1 (bottom).
         */
        "focalPointY": number;
        /**
          * Right now the module is heavily coupled with the image delivery service imgix and depends on the original files being stored inside AEM. You can pass in any https://cdn.img.sbb.ch img src address you find on sbb.ch to play around with it. Just strip the url parameters and paste in the plain file address. If you want to know how to best work with this module with images coming from a different source, please contact the LYNE Core Team.
         */
        "imageSrc"?: string;
        /**
          * The importance attribute is fairly new attribute which should help the browser decide which resources it should prioritise during page load. We will set the attribute value based on the value, we receive in the loading attribute. 'eager', which we use for the largest image within the initial viewport, will set the attribute value to 'high'. 'lazy', which we use for images below the fold, will set the attribute value to 'low'.
         */
        "importance": InterfaceImageAttributes['importance'];
        /**
          * With the support of native image lazy loading, we can now decide whether we want to load the image immediately or only once it is close to the visible viewport. The value eager is best used for images within the initial viewport. We want to load these images as fast as possible to improve the Core Web Vitals values. lazy on the other hand works best for images which are further down the page or invisible during the loading of the initial viewport.
         */
        "loading": InterfaceImageAttributes['loading'];
        /**
          * If set to true, we show a blurred version of the image as placeholder before the actual image shows up. This will help to improve the perceived loading performance. Read more about the idea of lqip here: https://medium.com/@imgix/lqip-your-images-for-fast-loading-2523d9ee4a62
         */
        "lqip": boolean;
        /**
          * With performance.mark you can log a timestamp associated with the name you define in performanceMark when a certain event is happening. In our case we will log the performance.mark into the PerformanceEntry API once the image is fully loaded. Performance monitoring tools like SpeedCurve or Lighthouse are then able to grab these entries from the PerformanceEntry API and give us additional information and insights about our page loading behaviour. We are then also able to monitor these values over a long period to see if our performance increases or decreases over time. Best to use lowercase strings here, separate words with underscores or dashes.
         */
        "performanceMark"?: string;
        /**
          * With the pictureSizesConfig object, you can pass in information into image about what kind of source elements should get rendered. mediaQueries accepts multiple Media Query entries which can get combined by defining a conditionOperator. Type is: stringified InterfaceImageAttributesSizesConfig-Object An example could look like this: {    "breakpoints": [      {        "image": {          "height": "675",          "width": "1200"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "sbb-breakpoint-large-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "549",          "width": "976"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "sbb-breakpoint-small-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "180",          "width": "320"        },        "mediaQueries": [          {            "conditionFeature": "max-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "sbb-breakpoint-micro-max"            },            "conditionOperator": "and"          },          {            "conditionFeature": "orientation",            "conditionFeatureValue": {              "lyneDesignToken": false,              "value": "landscape"            },            "conditionOperator": false          }        ]      }    ]  }
         */
        "pictureSizesConfig"?: string;
    }
    interface SbbJourneyHeader {
        /**
          * Destination location for the journey header.
         */
        "destination": string;
        /**
          * Heading level of the journey header element (e.g. h1-h6).
         */
        "level"?: InterfaceTitleAttributes['level'];
        /**
          * Negative coloring variant flag.
         */
        "negative": boolean;
        /**
          * Origin location for the journey header.
         */
        "origin": string;
        /**
          * Whether the journey is a round trip. If so, the icon changes to a round-trip one.
         */
        "roundTrip"?: boolean;
        /**
          * Journey header size.
         */
        "size"?: InterfaceJourneyHeaderAttributes['size'];
    }
    interface SbbJourneySummary {
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * Heading level of the journey header element (e.g. h1-h6).
         */
        "headerLevel"?: InterfaceSbbJourneySummaryAttributes['headerLevel'];
        /**
          * The RoundTrip prop. This prop controls if one or two arrows are displayed in the header.
         */
        "roundTrip"?: boolean;
        /**
          * The trip prop
         */
        "trip": InterfaceSbbJourneySummaryAttributes;
        /**
          * The tripBack prop
         */
        "tripBack"?: InterfaceSbbJourneySummaryAttributes;
    }
    interface SbbLink {
        /**
          * Whether the button is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is not present link becomes a button).
         */
        "href": string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch. Inline variant doesn't support icons.
         */
        "iconName"?: string;
        /**
          * Moves the icon to the end of the component if set to true.
         */
        "iconPlacement"?: InterfaceLinkAttributes['iconPlacement'];
        /**
          * Set this property to true if you want only a visual representation of a link, but no interaction (a span instead of a link/button will be rendered).
         */
        "isStatic": boolean;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
        /**
          * Negative coloring variant flag.
         */
        "negative": boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Text size, the link should get in the non-button variation. With inline variant, the text size adapts to where it is used.
         */
        "size": InterfaceLinkAttributes['size'];
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type": ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
        /**
          * Variant of the link (block or inline).
         */
        "variant": InterfaceLinkAttributes['variant'];
    }
    interface SbbLinkList {
        /**
          * Selected breakpoint from which the list is rendered horizontally.
         */
        "horizontalFrom"?: InterfaceLinkListAttributes['horizontalFromBreakpoint'];
        /**
          * Whether to render the link list and nested sbb-link instances as negative. This will overwrite the negative attribute of nested sbb-link instances.
         */
        "negative": boolean;
        /**
          * The orientation in which the list will be shown vertical or horizontal.
         */
        "orientation": InterfaceLinkListAttributes['orientation'];
        /**
          * Text size of the nested sbb-link instances. This will overwrite the size attribute of nested sbb-link instances.
         */
        "size": InterfaceLinkAttributes['size'];
        /**
          * The title text we want to show before the list.
         */
        "titleContent"?: string;
        /**
          * The semantic level of the title, e.g. 2 = h2.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbLoadingIndicator {
        /**
          * Size variant, either s or m.
         */
        "size": InterfaceSbbLoadingIndicatorAttributes['size'];
        /**
          * Variant of the loading indicator; `circle` is meant to be used inline, while `window` as overlay.
         */
        "variant"?: InterfaceSbbLoadingIndicatorAttributes['variant'];
    }
    interface SbbLogo {
        /**
          * Accessibility label which will be forwarded to the SVG logo.
         */
        "accessibilityLabel": string;
        /**
          * Variants of the logo.
         */
        "negative": boolean;
        /**
          * Visual protective room around logo.
         */
        "protectiveRoom"?: InterfaceLogoAttributes['protectiveRoom'];
    }
    interface SbbMapContainer {
        /**
          * Flag to show/hide the scroll up button inside the sidebar on mobile.
         */
        "hideScrollUpButton": boolean;
    }
    interface SbbMenu {
        /**
          * Closes the menu.
         */
        "close": () => Promise<void>;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * This will be forwarded as aria-label to the inner list. Used only if the menu automatically renders the actions inside as a list.
         */
        "listAccessibilityLabel"?: string;
        /**
          * Opens the menu on trigger click.
         */
        "open": () => Promise<void>;
        /**
          * The element that will trigger the menu dialog. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger": string | HTMLElement;
    }
    interface SbbMenuAction {
        /**
          * Value shown as badge at component end.
         */
        "amount"?: string | undefined;
        /**
          * Whether the button is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is not present menu action becomes a button).
         */
        "href": string | undefined;
        /**
          * The name of the icon, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string | undefined;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type": ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
    }
    interface SbbNavigation {
        /**
          * This will be forwarded as aria-label to the close button element.
         */
        "accessibilityCloseLabel": string | undefined;
        /**
          * This will be forwarded as aria-label to the dialog and is read as a title of the navigation.
         */
        "accessibilityLabel": string | undefined;
        /**
          * Closes the navigation.
         */
        "close": () => Promise<void>;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Opens the navigation.
         */
        "open": () => Promise<void>;
        /**
          * The element that will trigger the navigation. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger": string | HTMLElement;
    }
    interface SbbNavigationAction {
        /**
          * Whether the action is active.
         */
        "active": boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to (if it is not present, navigation action becomes a button).
         */
        "href": string | undefined;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Action size variant.
         */
        "size"?: 'l' | 'm' | 's';
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type": ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
    }
    interface SbbNavigationList {
        "label"?: string;
    }
    interface SbbNavigationMarker {
        "reset": () => Promise<void>;
        "select": (action: HTMLSbbNavigationActionElement) => Promise<void>;
        /**
          * Marker size variant.
         */
        "size"?: 'l' | 's';
    }
    interface SbbNavigationSection {
        /**
          * This will be forwarded as aria-label to the back button element.
         */
        "accessibilityBackLabel": string | undefined;
        /**
          * This will be forwarded as aria-label to the dialog and is read as a title of the navigation-section.
         */
        "accessibilityLabel": string | undefined;
        /**
          * Closes the navigation section.
         */
        "close": () => Promise<void>;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Opens the navigation section on trigger click.
         */
        "open": () => Promise<void>;
        "titleContent"?: string;
        /**
          * The element that will trigger the navigation section. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger": string | HTMLElement;
    }
    interface SbbNotification {
        "close": () => Promise<void>;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Whether the notification is readonly. In readonly mode, there is no dismiss button offered to the user.
         */
        "readonly": boolean;
        /**
          * Content of title.
         */
        "titleContent"?: string;
        /**
          * Level of title, will be rendered as heading tag (e.g. h3). Defaults to level 3.
         */
        "titleLevel": InterfaceTitleAttributes['level'];
        /**
          * The type of the notification.
         */
        "type"?: InterfaceNotificationAttributes['type'];
    }
    interface SbbOptgroup {
        /**
          * Whether the group is disabled.
         */
        "disabled": boolean;
        /**
          * Option group label.
         */
        "label": string;
    }
    interface SbbOption {
        /**
          * Whether the option is currently active.
         */
        "active"?: boolean;
        /**
          * Whether the option is disabled. TBI: missing disabled style, will be implemented with the select component.
         */
        "disabled"?: boolean;
        /**
          * Highlight the label of the option
          * @param value the highlighted portion of the label
         */
        "highlight": (value: string) => Promise<void>;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Whether the option is selected.
         */
        "selected": boolean;
        /**
          * Set the option group label (used for a11y)
          * @param value the label of the option group
         */
        "setGroupLabel": (value: string) => Promise<void>;
        "setSelectedViaUserInteraction": (selected: boolean) => Promise<void>;
        /**
          * Value of the option.
         */
        "value"?: string;
    }
    interface SbbPearlChain {
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * define the legs of the pearl-chain. Format: `{"legs": [{"duration": 25}, ...]}` `duration` in minutes. Duration of the leg is relative to the total travel time. Example: departure 16:30, change at 16:40, arrival at 17:00. So the change should have a duration of 33.33%.
         */
        "legs": Leg[];
    }
    interface SbbPearlChainTime {
        /**
          * Prop to render the arrival time - will be formatted as "H:mm"
         */
        "arrivalTime"?: string;
        /**
          * Optional prop to render the walk time (in minutes) after arrival
         */
        "arrivalWalk"?: number;
        /**
          * Prop to render the departure time - will be formatted as "H:mm"
         */
        "departureTime"?: string;
        /**
          * Optional prop to render the walk time (in minutes) before departure
         */
        "departureWalk"?: number;
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * define the legs of the pearl-chain. Format: `{"legs": [{"duration": 25}, ...]}` `duration` in minutes. Duration of the leg is relative to the total travel time. Example: departure 16:30, change at 16:40, arrival at 17:00. So the change should have a duration of 33.33%.
         */
        "legs": Leg[];
    }
    interface SbbPearlChainVertical {
    }
    interface SbbPearlChainVerticalItem {
        /**
          * If true the position won't be animated.
         */
        "disableAnimation"?: boolean;
        /**
          * The pearlChainVerticalItemAttributes Prop for styling the bullets and line.
         */
        "pearlChainVerticalItemAttributes": PearlChainVerticalItemAttributes;
    }
    interface SbbRadioButton {
        /**
          * Whether the radio can be deselected.
         */
        "allowEmptySelection": boolean;
        /**
          * Whether the radio button is checked.
         */
        "checked": boolean;
        /**
          * Whether the radio button is disabled.
         */
        "disabled": boolean;
        /**
          * Whether the radio button is required.
         */
        "required": boolean;
        "select": () => Promise<void>;
        /**
          * Label size variant, either m or s.
         */
        "size": InterfaceSbbRadioButtonAttributes['size'];
        /**
          * Value of radio button.
         */
        "value": string;
    }
    interface SbbRadioButtonGroup {
        /**
          * Whether the radios can be deselected.
         */
        "allowEmptySelection": boolean;
        /**
          * Whether the radio group is disabled.
         */
        "disabled": boolean;
        /**
          * Overrides the behaviour of `orientation` property.
         */
        "horizontalFrom"?: InterfaceSbbRadioButtonGroupAttributes['horizontalFrom'];
        /**
          * Radio group's orientation, either horizontal or vertical.
         */
        "orientation": InterfaceSbbRadioButtonGroupAttributes['orientation'];
        /**
          * Whether the radio group is required.
         */
        "required": boolean;
        /**
          * Size variant, either m or s.
         */
        "size": InterfaceSbbRadioButtonGroupAttributes['size'];
        /**
          * The value of the radio group.
         */
        "value"?: any | null;
    }
    interface SbbSelect {
        /**
          * Closes the selection panel.
         */
        "close": () => Promise<void>;
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation": boolean;
        /**
          * Whether the select is disabled.
         */
        "disabled": boolean;
        /**
          * Gets the current displayed value.
         */
        "getDisplayValue": () => Promise<string>;
        /**
          * Whether the select allows for multiple selection.
         */
        "multiple": boolean;
        /**
          * Opens the selection panel.
         */
        "open": () => Promise<void>;
        /**
          * The placeholder used if no value has been selected.
         */
        "placeholder": string;
        /**
          * Whether the select is readonly.
         */
        "readonly": boolean;
        /**
          * Whether the select is required.
         */
        "required": boolean;
        /**
          * The value of the select component. If `multiple` is true, it's an array.
         */
        "value": string | string[];
    }
    interface SbbSelectionPanel {
        /**
          * Whether the unselected panel has a border.
         */
        "borderless": boolean;
        /**
          * The background color of the panel.
         */
        "color": 'white' | 'milk';
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Whether the content section is always visible.
         */
        "forceOpen": boolean;
    }
    interface SbbSignet {
        /**
          * Accessibility label which will be forwarded to the inner SVG signet.
         */
        "accessibilityLabel": string;
        /**
          * Visual protective room around signet.
         */
        "protectiveRoom"?: InterfaceSignetAttributes['protectiveRoom'];
    }
    interface SbbSkiplinkList {
        /**
          * The title text we want to place before the list.
         */
        "titleContent"?: string;
        /**
          * The semantic level of the title, e.g. 2 = h2.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbSlider {
        /**
          * Disabled state for the inner HTMLInputElement.
         */
        "disabled"?: boolean;
        /**
          * Name of the icon at component's end, which will be forward to the nested `sbb-icon`.
         */
        "endIcon"?: string;
        /**
          * The <form> element to associate the inner HTMLInputElement with.
         */
        "form"?: string;
        /**
          * Maximum acceptable value for the inner HTMLInputElement.
         */
        "max"?: string;
        /**
          * Minimum acceptable value for the inner HTMLInputElement.
         */
        "min"?: string;
        /**
          * Name of the inner HTMLInputElement.
         */
        "name"?: string;
        /**
          * Readonly state for the inner HTMLInputElement. Since the input range does not allow this attribute, it will be merged with the `disabled` one.
         */
        "readonly"?: boolean;
        /**
          * Name of the icon at component's start, which will be forward to the nested `sbb-icon`.
         */
        "startIcon"?: string;
        /**
          * Value for the inner HTMLInputElement.
         */
        "value"?: string;
        /**
          * Numeric value for the inner HTMLInputElement.
         */
        "valueAsNumber"?: number;
    }
    interface SbbTabGroup {
        /**
          * Activates a tab by index.
          * @param tabIndex The index of the tab you want to activate.
         */
        "activateTab": (tabIndex: number) => Promise<void>;
        /**
          * Disables a tab by index.
          * @param tabIndex The index of the tab you want to disable.
         */
        "disableTab": (tabIndex: number) => Promise<void>;
        /**
          * Enables a tab by index.
          * @param tabIndex The index of the tab you want to enable.
         */
        "enableTab": (tabIndex: number) => Promise<void>;
        /**
          * Sets the initial tab. If it matches a disabled tab or exceeds the length of the tab group, the first enabled tab will be selected.
         */
        "initialSelectedIndex": number;
    }
    interface SbbTabTitle {
        /**
          * Active tab state
         */
        "active"?: boolean;
        /**
          * Amount displayed inside the tab.
         */
        "amount"?: string;
        /**
          * Disabled tab state
         */
        "disabled"?: boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * The level will correspond to the heading tag generated in the title. Use this property to generate the appropriate header tag, taking SEO into consideration.
         */
        "level"?: InterfaceTabTitleAttributes['level'];
    }
    interface SbbTag {
        /**
          * Amount displayed inside the tag.
         */
        "amount"?: string;
        /**
          * Whether the toggle is checked.
         */
        "checked": boolean;
        /**
          * Whether the tag is disabled.
         */
        "disabled": boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from https://icons.app.sbb.ch (optional).
         */
        "iconName"?: string;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
        /**
          * Value of the tag.
         */
        "value"?: string;
    }
    interface SbbTagGroup {
        /**
          * This will be forwarded as aria-label to the inner list.
         */
        "listAccessibilityLabel"?: string;
        /**
          * If set multiple to false, the selection is exclusive and the value is a string (or null). If set multiple to true, the selection can have multiple values and therefore value is an array.  Changing multiple during run time is not supported.
         */
        "multiple": boolean;
        /**
          * Value of the sbb-tag-group. If set multiple to false, the value is a string (or null). If set multiple to true, the value is an array.
         */
        "value": string | string[] | null;
    }
    /**
     * Generalized Teaser - for displaying an image, title and paragraph
     */
    interface SbbTeaser {
        /**
          * The href value you want to link to.
         */
        "href": string | undefined;
        /**
          * Teaser variant - when this is true the text-content will be under the image otherwise it will be displayed next to the image.
         */
        "isStacked": boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Heading level of the sbb-title element (e.g. h1-h6).
         */
        "titleLevel": InterfaceTitleAttributes['level'];
    }
    interface SbbTeaserHero {
        /**
          * The href value you want to link to.
         */
        "href": string | undefined;
        /**
          * Image alt text will be passed to `sbb-image`.
         */
        "imageAlt"?: string;
        /**
          * Image src will be passed to `sbb-image`.
         */
        "imageSrc"?: string;
        /**
          * Panel link text.
         */
        "linkContent"?: string;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
    }
    interface SbbTimeInput {
        /**
          * Gets the input value with the correct date format.
         */
        "getValueAsDate": () => Promise<Date | null>;
        /**
          * Reference of the native input connected to the datepicker.
         */
        "input"?: string | HTMLElement;
        /**
          * Set the input value to the correctly formatted value.
         */
        "setValueAsDate": (date: Date | number | string) => Promise<void>;
    }
    interface SbbTimetableBarrierFree {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableDuration {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableOccupancy {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableParkAndRail {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableParkAndRailAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableRow {
        /**
          * This will be forwarded to the sbb-card component as aria-expanded.
         */
        "accessibilityExpanded"?: boolean;
        /**
          * When this prop is true the sbb-card will be in the active state.
         */
        "active"?: boolean;
        /**
          * This will be forwarded to the notices section
         */
        "boarding"?: Boarding;
        /**
          * Hidden label for the card action. It overrides the automatically generated accessibility text for the component. Use this prop to provide custom accessibility information for the component.
         */
        "cardActionLabel"?: string;
        /**
          * This will be forwarded to the sbb-pearl-chain component - if true the position won't be animated.
         */
        "disableAnimation"?: boolean;
        /**
          * The loading state - when this is true it will be render skeleton with an idling animation
         */
        "loadingPrice"?: boolean;
        /**
          * The loading state - when this is true it will be render skeleton with an idling animation
         */
        "loadingTrip"?: boolean;
        /**
          * The price Prop, which consists of the data for the badge.
         */
        "price"?: Price;
        /**
          * The trip Prop.
         */
        "trip": ITripItem;
    }
    interface SbbTimetableRowColumnHeaders {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableRowDayChange {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableRowHeader {
        "config": string;
    }
    interface SbbTimetableTransportationNumber {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableTransportationNumberAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableTransportationTime {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableTransportationTimeAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableTravelHints {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableTravelHintsAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTitle {
        /**
          * Title level
         */
        "level"?: InterfaceTitleAttributes['level'];
        /**
          * Choose negative variant
         */
        "negative"?: boolean;
        /**
          * Visual level for the title. Optional, if not set, the value of level will be used.
         */
        "visualLevel"?: InterfaceTitleAttributes['visualLevel'];
        /**
          * Sometimes we need a title in the markup to present a proper hierarchy to the screen readers while we do not want to let that title appear visually. In this case we set visuallyHidden to true
         */
        "visuallyHidden"?: false;
    }
    interface SbbToast {
        /**
          * Close the toast.
         */
        "close": () => Promise<void>;
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation": boolean;
        /**
          * Whether the toast has a close button.
         */
        "dismissible": boolean;
        /**
          * The name of the icon, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Open the toast. If there are other opened toasts in the page, close them first.
         */
        "open": () => Promise<void>;
        /**
          * The ARIA politeness level. Check https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#live_regions for further info
         */
        "politeness": SbbToastAriaPoliteness;
        /**
          * The position where to place the toast.
         */
        "position": SbbToastPosition;
        /**
          * The length of time in milliseconds to wait before automatically dismissing the toast. If 0, it stays open indefinitely.
         */
        "timeout": number;
    }
    interface SbbToggle {
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Whether the toggle is disabled.
         */
        "disabled": boolean;
        /**
          * If true set the width of the component fixed; if false the width is dynamic based on the label of the sbb-toggle-option.
         */
        "even": boolean;
        /**
          * Size variant, either m or s.
         */
        "size"?: InterfaceSbbToggleAttributes['size'];
        /**
          * The value of the toggle. It needs to be mutable since it is updated whenever a new option is selected (see the `onToggleOptionSelect()` method).
         */
        "value": any | null;
    }
    interface SbbToggleCheck {
        /**
          * Whether the toggle-check is checked.
         */
        "checked": boolean;
        /**
          * The disabled prop for the disabled state.
         */
        "disabled": boolean;
        /**
          * The svg name for the true state - default -> 'tick-small'
         */
        "iconName": string;
        /**
          * The label position relative to the toggle. Defaults to 'after'
         */
        "labelPosition"?: InterfaceToggleCheckAttributes['labelPosition'];
        /**
          * Name of the toggle-check.
         */
        "name"?: string;
        /**
          * The required prop for the required state.
         */
        "required": boolean;
        /**
          * Size variant, either m or s.
         */
        "size": InterfaceToggleCheckAttributes['size'];
        /**
          * Value of toggle-check.
         */
        "value"?: string;
    }
    interface SbbToggleOption {
        /**
          * Whether the toggle-option is checked.
         */
        "checked": boolean;
        /**
          * Whether the toggle option is disabled.
         */
        "disabled": boolean;
        /**
          * Name of the icon for `<sbb-icon>`.
         */
        "iconName"?: string;
        /**
          * Value of toggle-option.
         */
        "value"?: string;
    }
    interface SbbTooltip {
        /**
          * This will be forwarded as aria-label to the close button element.
         */
        "accessibilityCloseLabel": string | undefined;
        /**
          * Closes the tooltip.
         */
        "close": (target?: HTMLElement) => Promise<void>;
        /**
          * Close the tooltip after a certain delay.
         */
        "closeDelay"?: number;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation": boolean;
        /**
          * Whether the close button should be hidden.
         */
        "hideCloseButton"?: boolean;
        /**
          * Whether the tooltip should be triggered on hover.
         */
        "hoverTrigger"?: boolean;
        /**
          * Opens the tooltip on trigger click.
         */
        "open": () => Promise<void>;
        /**
          * Open the tooltip after a certain delay.
         */
        "openDelay"?: number;
        /**
          * The element that will trigger the tooltip dialog. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger": string | HTMLElement;
    }
    interface SbbTooltipTrigger {
        /**
          * Whether the tooltip-trigger is disabled.
         */
        "disabled": boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName": string;
        /**
          * The name attribute to use for the button.
         */
        "name": string | undefined;
    }
    interface SbbTrain {
        /**
          * Accessibility label for additional information regarding the leaving direction of the train.
         */
        "accessibilityLabel"?: string;
        /**
          * Controls the direction indicator to show the arrow left or right. Default is left.
         */
        "direction": InterfaceSbbTrainAttributes['direction'];
        /**
          * General label for "driving direction".
         */
        "directionLabel": string;
        /**
          * Heading level of the direction label, used for screen readers.
         */
        "directionLabelLevel": InterfaceTitleAttributes['level'];
        /**
          * Label for the destination station of the train.
         */
        "station"?: string;
    }
    interface SbbTrainBlockedPassage {
    }
    interface SbbTrainFormation {
        /**
          * Option to hide all wagon labels.
         */
        "hideWagonLabel": boolean;
    }
    interface SbbTrainWagon {
        /**
          * Additional accessibility text which will be appended to the end.
         */
        "additionalAccessibilityText"?: string;
        /**
          * Accessibility text for blocked passages of the wagon.
         */
        "blockedPassage": InterfaceSbbTrainWagonAttributes['blockedPassage'];
        /**
          * Visible label for the wagon number. Not used by type locomotive or closed.
         */
        "label"?: string;
        /**
          * Occupancy of a wagon.
         */
        "occupancy"?: InterfaceSbbTrainWagonAttributes['occupancy'];
        /**
          * Sector in which to wagon stops.
         */
        "sector": string;
        /**
          * Wagon type.
         */
        "type": InterfaceSbbTrainWagonAttributes['type'];
        /**
          * Visible class label of a wagon.
         */
        "wagonClass"?: '1' | '2';
    }
    interface SbbVisualCheckbox {
        /**
          * Checked state.
         */
        "checked": boolean;
        /**
          * Disabled state.
         */
        "disabled": boolean;
        /**
          * Indeterminate state.
         */
        "indeterminate": boolean;
    }
}
export interface SbbAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbAlertElement;
}
export interface SbbAlertGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbAlertGroupElement;
}
export interface SbbAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbAutocompleteElement;
}
export interface SbbCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbCalendarElement;
}
export interface SbbCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbCheckboxElement;
}
export interface SbbDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbDatepickerElement;
}
export interface SbbDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbDialogElement;
}
export interface SbbMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbMenuElement;
}
export interface SbbNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbNavigationElement;
}
export interface SbbNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbNotificationElement;
}
export interface SbbOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbOptionElement;
}
export interface SbbRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbRadioButtonElement;
}
export interface SbbRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbRadioButtonGroupElement;
}
export interface SbbSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbSelectElement;
}
export interface SbbSelectionPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbSelectionPanelElement;
}
export interface SbbSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbSliderElement;
}
export interface SbbTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbTabGroupElement;
}
export interface SbbTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbTagElement;
}
export interface SbbTimeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbTimeInputElement;
}
export interface SbbToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbToastElement;
}
export interface SbbToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbToggleElement;
}
export interface SbbToggleCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbToggleCheckElement;
}
export interface SbbToggleOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbToggleOptionElement;
}
export interface SbbTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbTooltipElement;
}
export interface SbbTrainCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbTrainElement;
}
export interface SbbTrainWagonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSbbTrainWagonElement;
}
declare global {
    interface HTMLSbbAccordionElement extends Components.SbbAccordion, HTMLStencilElement {
    }
    var HTMLSbbAccordionElement: {
        prototype: HTMLSbbAccordionElement;
        new (): HTMLSbbAccordionElement;
    };
    interface HTMLSbbAccordionItemElement extends Components.SbbAccordionItem, HTMLStencilElement {
    }
    var HTMLSbbAccordionItemElement: {
        prototype: HTMLSbbAccordionItemElement;
        new (): HTMLSbbAccordionItemElement;
    };
    interface HTMLSbbActionGroupElement extends Components.SbbActionGroup, HTMLStencilElement {
    }
    var HTMLSbbActionGroupElement: {
        prototype: HTMLSbbActionGroupElement;
        new (): HTMLSbbActionGroupElement;
    };
    interface HTMLSbbAlertElement extends Components.SbbAlert, HTMLStencilElement {
    }
    var HTMLSbbAlertElement: {
        prototype: HTMLSbbAlertElement;
        new (): HTMLSbbAlertElement;
    };
    interface HTMLSbbAlertGroupElement extends Components.SbbAlertGroup, HTMLStencilElement {
    }
    var HTMLSbbAlertGroupElement: {
        prototype: HTMLSbbAlertGroupElement;
        new (): HTMLSbbAlertGroupElement;
    };
    interface HTMLSbbAutocompleteElement extends Components.SbbAutocomplete, HTMLStencilElement {
    }
    var HTMLSbbAutocompleteElement: {
        prototype: HTMLSbbAutocompleteElement;
        new (): HTMLSbbAutocompleteElement;
    };
    interface HTMLSbbBreadcrumbElement extends Components.SbbBreadcrumb, HTMLStencilElement {
    }
    var HTMLSbbBreadcrumbElement: {
        prototype: HTMLSbbBreadcrumbElement;
        new (): HTMLSbbBreadcrumbElement;
    };
    interface HTMLSbbBreadcrumbGroupElement extends Components.SbbBreadcrumbGroup, HTMLStencilElement {
    }
    var HTMLSbbBreadcrumbGroupElement: {
        prototype: HTMLSbbBreadcrumbGroupElement;
        new (): HTMLSbbBreadcrumbGroupElement;
    };
    interface HTMLSbbButtonElement extends Components.SbbButton, HTMLStencilElement {
    }
    var HTMLSbbButtonElement: {
        prototype: HTMLSbbButtonElement;
        new (): HTMLSbbButtonElement;
    };
    interface HTMLSbbCalendarElement extends Components.SbbCalendar, HTMLStencilElement {
    }
    var HTMLSbbCalendarElement: {
        prototype: HTMLSbbCalendarElement;
        new (): HTMLSbbCalendarElement;
    };
    interface HTMLSbbCardElement extends Components.SbbCard, HTMLStencilElement {
    }
    var HTMLSbbCardElement: {
        prototype: HTMLSbbCardElement;
        new (): HTMLSbbCardElement;
    };
    interface HTMLSbbCardActionElement extends Components.SbbCardAction, HTMLStencilElement {
    }
    var HTMLSbbCardActionElement: {
        prototype: HTMLSbbCardActionElement;
        new (): HTMLSbbCardActionElement;
    };
    interface HTMLSbbCardBadgeElement extends Components.SbbCardBadge, HTMLStencilElement {
    }
    var HTMLSbbCardBadgeElement: {
        prototype: HTMLSbbCardBadgeElement;
        new (): HTMLSbbCardBadgeElement;
    };
    interface HTMLSbbCheckboxElement extends Components.SbbCheckbox, HTMLStencilElement {
    }
    var HTMLSbbCheckboxElement: {
        prototype: HTMLSbbCheckboxElement;
        new (): HTMLSbbCheckboxElement;
    };
    interface HTMLSbbCheckboxGroupElement extends Components.SbbCheckboxGroup, HTMLStencilElement {
    }
    var HTMLSbbCheckboxGroupElement: {
        prototype: HTMLSbbCheckboxGroupElement;
        new (): HTMLSbbCheckboxGroupElement;
    };
    interface HTMLSbbChipElement extends Components.SbbChip, HTMLStencilElement {
    }
    var HTMLSbbChipElement: {
        prototype: HTMLSbbChipElement;
        new (): HTMLSbbChipElement;
    };
    interface HTMLSbbClockElement extends Components.SbbClock, HTMLStencilElement {
    }
    var HTMLSbbClockElement: {
        prototype: HTMLSbbClockElement;
        new (): HTMLSbbClockElement;
    };
    interface HTMLSbbDatepickerElement extends Components.SbbDatepicker, HTMLStencilElement {
    }
    var HTMLSbbDatepickerElement: {
        prototype: HTMLSbbDatepickerElement;
        new (): HTMLSbbDatepickerElement;
    };
    interface HTMLSbbDatepickerNextDayElement extends Components.SbbDatepickerNextDay, HTMLStencilElement {
    }
    var HTMLSbbDatepickerNextDayElement: {
        prototype: HTMLSbbDatepickerNextDayElement;
        new (): HTMLSbbDatepickerNextDayElement;
    };
    interface HTMLSbbDatepickerPreviousDayElement extends Components.SbbDatepickerPreviousDay, HTMLStencilElement {
    }
    var HTMLSbbDatepickerPreviousDayElement: {
        prototype: HTMLSbbDatepickerPreviousDayElement;
        new (): HTMLSbbDatepickerPreviousDayElement;
    };
    interface HTMLSbbDatepickerToggleElement extends Components.SbbDatepickerToggle, HTMLStencilElement {
    }
    var HTMLSbbDatepickerToggleElement: {
        prototype: HTMLSbbDatepickerToggleElement;
        new (): HTMLSbbDatepickerToggleElement;
    };
    interface HTMLSbbDialogElement extends Components.SbbDialog, HTMLStencilElement {
    }
    var HTMLSbbDialogElement: {
        prototype: HTMLSbbDialogElement;
        new (): HTMLSbbDialogElement;
    };
    interface HTMLSbbDividerElement extends Components.SbbDivider, HTMLStencilElement {
    }
    var HTMLSbbDividerElement: {
        prototype: HTMLSbbDividerElement;
        new (): HTMLSbbDividerElement;
    };
    interface HTMLSbbFooterElement extends Components.SbbFooter, HTMLStencilElement {
    }
    var HTMLSbbFooterElement: {
        prototype: HTMLSbbFooterElement;
        new (): HTMLSbbFooterElement;
    };
    interface HTMLSbbFormErrorElement extends Components.SbbFormError, HTMLStencilElement {
    }
    var HTMLSbbFormErrorElement: {
        prototype: HTMLSbbFormErrorElement;
        new (): HTMLSbbFormErrorElement;
    };
    interface HTMLSbbFormFieldElement extends Components.SbbFormField, HTMLStencilElement {
    }
    var HTMLSbbFormFieldElement: {
        prototype: HTMLSbbFormFieldElement;
        new (): HTMLSbbFormFieldElement;
    };
    interface HTMLSbbHeaderElement extends Components.SbbHeader, HTMLStencilElement {
    }
    var HTMLSbbHeaderElement: {
        prototype: HTMLSbbHeaderElement;
        new (): HTMLSbbHeaderElement;
    };
    interface HTMLSbbHeaderActionElement extends Components.SbbHeaderAction, HTMLStencilElement {
    }
    var HTMLSbbHeaderActionElement: {
        prototype: HTMLSbbHeaderActionElement;
        new (): HTMLSbbHeaderActionElement;
    };
    interface HTMLSbbIconElement extends Components.SbbIcon, HTMLStencilElement {
    }
    var HTMLSbbIconElement: {
        prototype: HTMLSbbIconElement;
        new (): HTMLSbbIconElement;
    };
    interface HTMLSbbImageElement extends Components.SbbImage, HTMLStencilElement {
    }
    var HTMLSbbImageElement: {
        prototype: HTMLSbbImageElement;
        new (): HTMLSbbImageElement;
    };
    interface HTMLSbbJourneyHeaderElement extends Components.SbbJourneyHeader, HTMLStencilElement {
    }
    var HTMLSbbJourneyHeaderElement: {
        prototype: HTMLSbbJourneyHeaderElement;
        new (): HTMLSbbJourneyHeaderElement;
    };
    interface HTMLSbbJourneySummaryElement extends Components.SbbJourneySummary, HTMLStencilElement {
    }
    var HTMLSbbJourneySummaryElement: {
        prototype: HTMLSbbJourneySummaryElement;
        new (): HTMLSbbJourneySummaryElement;
    };
    interface HTMLSbbLinkElement extends Components.SbbLink, HTMLStencilElement {
    }
    var HTMLSbbLinkElement: {
        prototype: HTMLSbbLinkElement;
        new (): HTMLSbbLinkElement;
    };
    interface HTMLSbbLinkListElement extends Components.SbbLinkList, HTMLStencilElement {
    }
    var HTMLSbbLinkListElement: {
        prototype: HTMLSbbLinkListElement;
        new (): HTMLSbbLinkListElement;
    };
    interface HTMLSbbLoadingIndicatorElement extends Components.SbbLoadingIndicator, HTMLStencilElement {
    }
    var HTMLSbbLoadingIndicatorElement: {
        prototype: HTMLSbbLoadingIndicatorElement;
        new (): HTMLSbbLoadingIndicatorElement;
    };
    interface HTMLSbbLogoElement extends Components.SbbLogo, HTMLStencilElement {
    }
    var HTMLSbbLogoElement: {
        prototype: HTMLSbbLogoElement;
        new (): HTMLSbbLogoElement;
    };
    interface HTMLSbbMapContainerElement extends Components.SbbMapContainer, HTMLStencilElement {
    }
    var HTMLSbbMapContainerElement: {
        prototype: HTMLSbbMapContainerElement;
        new (): HTMLSbbMapContainerElement;
    };
    interface HTMLSbbMenuElement extends Components.SbbMenu, HTMLStencilElement {
    }
    var HTMLSbbMenuElement: {
        prototype: HTMLSbbMenuElement;
        new (): HTMLSbbMenuElement;
    };
    interface HTMLSbbMenuActionElement extends Components.SbbMenuAction, HTMLStencilElement {
    }
    var HTMLSbbMenuActionElement: {
        prototype: HTMLSbbMenuActionElement;
        new (): HTMLSbbMenuActionElement;
    };
    interface HTMLSbbNavigationElement extends Components.SbbNavigation, HTMLStencilElement {
    }
    var HTMLSbbNavigationElement: {
        prototype: HTMLSbbNavigationElement;
        new (): HTMLSbbNavigationElement;
    };
    interface HTMLSbbNavigationActionElement extends Components.SbbNavigationAction, HTMLStencilElement {
    }
    var HTMLSbbNavigationActionElement: {
        prototype: HTMLSbbNavigationActionElement;
        new (): HTMLSbbNavigationActionElement;
    };
    interface HTMLSbbNavigationListElement extends Components.SbbNavigationList, HTMLStencilElement {
    }
    var HTMLSbbNavigationListElement: {
        prototype: HTMLSbbNavigationListElement;
        new (): HTMLSbbNavigationListElement;
    };
    interface HTMLSbbNavigationMarkerElement extends Components.SbbNavigationMarker, HTMLStencilElement {
    }
    var HTMLSbbNavigationMarkerElement: {
        prototype: HTMLSbbNavigationMarkerElement;
        new (): HTMLSbbNavigationMarkerElement;
    };
    interface HTMLSbbNavigationSectionElement extends Components.SbbNavigationSection, HTMLStencilElement {
    }
    var HTMLSbbNavigationSectionElement: {
        prototype: HTMLSbbNavigationSectionElement;
        new (): HTMLSbbNavigationSectionElement;
    };
    interface HTMLSbbNotificationElement extends Components.SbbNotification, HTMLStencilElement {
    }
    var HTMLSbbNotificationElement: {
        prototype: HTMLSbbNotificationElement;
        new (): HTMLSbbNotificationElement;
    };
    interface HTMLSbbOptgroupElement extends Components.SbbOptgroup, HTMLStencilElement {
    }
    var HTMLSbbOptgroupElement: {
        prototype: HTMLSbbOptgroupElement;
        new (): HTMLSbbOptgroupElement;
    };
    interface HTMLSbbOptionElement extends Components.SbbOption, HTMLStencilElement {
    }
    var HTMLSbbOptionElement: {
        prototype: HTMLSbbOptionElement;
        new (): HTMLSbbOptionElement;
    };
    interface HTMLSbbPearlChainElement extends Components.SbbPearlChain, HTMLStencilElement {
    }
    var HTMLSbbPearlChainElement: {
        prototype: HTMLSbbPearlChainElement;
        new (): HTMLSbbPearlChainElement;
    };
    interface HTMLSbbPearlChainTimeElement extends Components.SbbPearlChainTime, HTMLStencilElement {
    }
    var HTMLSbbPearlChainTimeElement: {
        prototype: HTMLSbbPearlChainTimeElement;
        new (): HTMLSbbPearlChainTimeElement;
    };
    interface HTMLSbbPearlChainVerticalElement extends Components.SbbPearlChainVertical, HTMLStencilElement {
    }
    var HTMLSbbPearlChainVerticalElement: {
        prototype: HTMLSbbPearlChainVerticalElement;
        new (): HTMLSbbPearlChainVerticalElement;
    };
    interface HTMLSbbPearlChainVerticalItemElement extends Components.SbbPearlChainVerticalItem, HTMLStencilElement {
    }
    var HTMLSbbPearlChainVerticalItemElement: {
        prototype: HTMLSbbPearlChainVerticalItemElement;
        new (): HTMLSbbPearlChainVerticalItemElement;
    };
    interface HTMLSbbRadioButtonElement extends Components.SbbRadioButton, HTMLStencilElement {
    }
    var HTMLSbbRadioButtonElement: {
        prototype: HTMLSbbRadioButtonElement;
        new (): HTMLSbbRadioButtonElement;
    };
    interface HTMLSbbRadioButtonGroupElement extends Components.SbbRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLSbbRadioButtonGroupElement: {
        prototype: HTMLSbbRadioButtonGroupElement;
        new (): HTMLSbbRadioButtonGroupElement;
    };
    interface HTMLSbbSelectElement extends Components.SbbSelect, HTMLStencilElement {
    }
    var HTMLSbbSelectElement: {
        prototype: HTMLSbbSelectElement;
        new (): HTMLSbbSelectElement;
    };
    interface HTMLSbbSelectionPanelElement extends Components.SbbSelectionPanel, HTMLStencilElement {
    }
    var HTMLSbbSelectionPanelElement: {
        prototype: HTMLSbbSelectionPanelElement;
        new (): HTMLSbbSelectionPanelElement;
    };
    interface HTMLSbbSignetElement extends Components.SbbSignet, HTMLStencilElement {
    }
    var HTMLSbbSignetElement: {
        prototype: HTMLSbbSignetElement;
        new (): HTMLSbbSignetElement;
    };
    interface HTMLSbbSkiplinkListElement extends Components.SbbSkiplinkList, HTMLStencilElement {
    }
    var HTMLSbbSkiplinkListElement: {
        prototype: HTMLSbbSkiplinkListElement;
        new (): HTMLSbbSkiplinkListElement;
    };
    interface HTMLSbbSliderElement extends Components.SbbSlider, HTMLStencilElement {
    }
    var HTMLSbbSliderElement: {
        prototype: HTMLSbbSliderElement;
        new (): HTMLSbbSliderElement;
    };
    interface HTMLSbbTabGroupElement extends Components.SbbTabGroup, HTMLStencilElement {
    }
    var HTMLSbbTabGroupElement: {
        prototype: HTMLSbbTabGroupElement;
        new (): HTMLSbbTabGroupElement;
    };
    interface HTMLSbbTabTitleElement extends Components.SbbTabTitle, HTMLStencilElement {
    }
    var HTMLSbbTabTitleElement: {
        prototype: HTMLSbbTabTitleElement;
        new (): HTMLSbbTabTitleElement;
    };
    interface HTMLSbbTagElement extends Components.SbbTag, HTMLStencilElement {
    }
    var HTMLSbbTagElement: {
        prototype: HTMLSbbTagElement;
        new (): HTMLSbbTagElement;
    };
    interface HTMLSbbTagGroupElement extends Components.SbbTagGroup, HTMLStencilElement {
    }
    var HTMLSbbTagGroupElement: {
        prototype: HTMLSbbTagGroupElement;
        new (): HTMLSbbTagGroupElement;
    };
    /**
     * Generalized Teaser - for displaying an image, title and paragraph
     */
    interface HTMLSbbTeaserElement extends Components.SbbTeaser, HTMLStencilElement {
    }
    var HTMLSbbTeaserElement: {
        prototype: HTMLSbbTeaserElement;
        new (): HTMLSbbTeaserElement;
    };
    interface HTMLSbbTeaserHeroElement extends Components.SbbTeaserHero, HTMLStencilElement {
    }
    var HTMLSbbTeaserHeroElement: {
        prototype: HTMLSbbTeaserHeroElement;
        new (): HTMLSbbTeaserHeroElement;
    };
    interface HTMLSbbTimeInputElement extends Components.SbbTimeInput, HTMLStencilElement {
    }
    var HTMLSbbTimeInputElement: {
        prototype: HTMLSbbTimeInputElement;
        new (): HTMLSbbTimeInputElement;
    };
    interface HTMLSbbTimetableBarrierFreeElement extends Components.SbbTimetableBarrierFree, HTMLStencilElement {
    }
    var HTMLSbbTimetableBarrierFreeElement: {
        prototype: HTMLSbbTimetableBarrierFreeElement;
        new (): HTMLSbbTimetableBarrierFreeElement;
    };
    interface HTMLSbbTimetableDurationElement extends Components.SbbTimetableDuration, HTMLStencilElement {
    }
    var HTMLSbbTimetableDurationElement: {
        prototype: HTMLSbbTimetableDurationElement;
        new (): HTMLSbbTimetableDurationElement;
    };
    interface HTMLSbbTimetableOccupancyElement extends Components.SbbTimetableOccupancy, HTMLStencilElement {
    }
    var HTMLSbbTimetableOccupancyElement: {
        prototype: HTMLSbbTimetableOccupancyElement;
        new (): HTMLSbbTimetableOccupancyElement;
    };
    interface HTMLSbbTimetableParkAndRailElement extends Components.SbbTimetableParkAndRail, HTMLStencilElement {
    }
    var HTMLSbbTimetableParkAndRailElement: {
        prototype: HTMLSbbTimetableParkAndRailElement;
        new (): HTMLSbbTimetableParkAndRailElement;
    };
    interface HTMLSbbTimetableRowElement extends Components.SbbTimetableRow, HTMLStencilElement {
    }
    var HTMLSbbTimetableRowElement: {
        prototype: HTMLSbbTimetableRowElement;
        new (): HTMLSbbTimetableRowElement;
    };
    interface HTMLSbbTimetableRowColumnHeadersElement extends Components.SbbTimetableRowColumnHeaders, HTMLStencilElement {
    }
    var HTMLSbbTimetableRowColumnHeadersElement: {
        prototype: HTMLSbbTimetableRowColumnHeadersElement;
        new (): HTMLSbbTimetableRowColumnHeadersElement;
    };
    interface HTMLSbbTimetableRowDayChangeElement extends Components.SbbTimetableRowDayChange, HTMLStencilElement {
    }
    var HTMLSbbTimetableRowDayChangeElement: {
        prototype: HTMLSbbTimetableRowDayChangeElement;
        new (): HTMLSbbTimetableRowDayChangeElement;
    };
    interface HTMLSbbTimetableRowHeaderElement extends Components.SbbTimetableRowHeader, HTMLStencilElement {
    }
    var HTMLSbbTimetableRowHeaderElement: {
        prototype: HTMLSbbTimetableRowHeaderElement;
        new (): HTMLSbbTimetableRowHeaderElement;
    };
    interface HTMLSbbTimetableTransportationNumberElement extends Components.SbbTimetableTransportationNumber, HTMLStencilElement {
    }
    var HTMLSbbTimetableTransportationNumberElement: {
        prototype: HTMLSbbTimetableTransportationNumberElement;
        new (): HTMLSbbTimetableTransportationNumberElement;
    };
    interface HTMLSbbTimetableTransportationTimeElement extends Components.SbbTimetableTransportationTime, HTMLStencilElement {
    }
    var HTMLSbbTimetableTransportationTimeElement: {
        prototype: HTMLSbbTimetableTransportationTimeElement;
        new (): HTMLSbbTimetableTransportationTimeElement;
    };
    interface HTMLSbbTimetableTravelHintsElement extends Components.SbbTimetableTravelHints, HTMLStencilElement {
    }
    var HTMLSbbTimetableTravelHintsElement: {
        prototype: HTMLSbbTimetableTravelHintsElement;
        new (): HTMLSbbTimetableTravelHintsElement;
    };
    interface HTMLSbbTitleElement extends Components.SbbTitle, HTMLStencilElement {
    }
    var HTMLSbbTitleElement: {
        prototype: HTMLSbbTitleElement;
        new (): HTMLSbbTitleElement;
    };
    interface HTMLSbbToastElement extends Components.SbbToast, HTMLStencilElement {
    }
    var HTMLSbbToastElement: {
        prototype: HTMLSbbToastElement;
        new (): HTMLSbbToastElement;
    };
    interface HTMLSbbToggleElement extends Components.SbbToggle, HTMLStencilElement {
    }
    var HTMLSbbToggleElement: {
        prototype: HTMLSbbToggleElement;
        new (): HTMLSbbToggleElement;
    };
    interface HTMLSbbToggleCheckElement extends Components.SbbToggleCheck, HTMLStencilElement {
    }
    var HTMLSbbToggleCheckElement: {
        prototype: HTMLSbbToggleCheckElement;
        new (): HTMLSbbToggleCheckElement;
    };
    interface HTMLSbbToggleOptionElement extends Components.SbbToggleOption, HTMLStencilElement {
    }
    var HTMLSbbToggleOptionElement: {
        prototype: HTMLSbbToggleOptionElement;
        new (): HTMLSbbToggleOptionElement;
    };
    interface HTMLSbbTooltipElement extends Components.SbbTooltip, HTMLStencilElement {
    }
    var HTMLSbbTooltipElement: {
        prototype: HTMLSbbTooltipElement;
        new (): HTMLSbbTooltipElement;
    };
    interface HTMLSbbTooltipTriggerElement extends Components.SbbTooltipTrigger, HTMLStencilElement {
    }
    var HTMLSbbTooltipTriggerElement: {
        prototype: HTMLSbbTooltipTriggerElement;
        new (): HTMLSbbTooltipTriggerElement;
    };
    interface HTMLSbbTrainElement extends Components.SbbTrain, HTMLStencilElement {
    }
    var HTMLSbbTrainElement: {
        prototype: HTMLSbbTrainElement;
        new (): HTMLSbbTrainElement;
    };
    interface HTMLSbbTrainBlockedPassageElement extends Components.SbbTrainBlockedPassage, HTMLStencilElement {
    }
    var HTMLSbbTrainBlockedPassageElement: {
        prototype: HTMLSbbTrainBlockedPassageElement;
        new (): HTMLSbbTrainBlockedPassageElement;
    };
    interface HTMLSbbTrainFormationElement extends Components.SbbTrainFormation, HTMLStencilElement {
    }
    var HTMLSbbTrainFormationElement: {
        prototype: HTMLSbbTrainFormationElement;
        new (): HTMLSbbTrainFormationElement;
    };
    interface HTMLSbbTrainWagonElement extends Components.SbbTrainWagon, HTMLStencilElement {
    }
    var HTMLSbbTrainWagonElement: {
        prototype: HTMLSbbTrainWagonElement;
        new (): HTMLSbbTrainWagonElement;
    };
    interface HTMLSbbVisualCheckboxElement extends Components.SbbVisualCheckbox, HTMLStencilElement {
    }
    var HTMLSbbVisualCheckboxElement: {
        prototype: HTMLSbbVisualCheckboxElement;
        new (): HTMLSbbVisualCheckboxElement;
    };
    interface HTMLElementTagNameMap {
        "sbb-accordion": HTMLSbbAccordionElement;
        "sbb-accordion-item": HTMLSbbAccordionItemElement;
        "sbb-action-group": HTMLSbbActionGroupElement;
        "sbb-alert": HTMLSbbAlertElement;
        "sbb-alert-group": HTMLSbbAlertGroupElement;
        "sbb-autocomplete": HTMLSbbAutocompleteElement;
        "sbb-breadcrumb": HTMLSbbBreadcrumbElement;
        "sbb-breadcrumb-group": HTMLSbbBreadcrumbGroupElement;
        "sbb-button": HTMLSbbButtonElement;
        "sbb-calendar": HTMLSbbCalendarElement;
        "sbb-card": HTMLSbbCardElement;
        "sbb-card-action": HTMLSbbCardActionElement;
        "sbb-card-badge": HTMLSbbCardBadgeElement;
        "sbb-checkbox": HTMLSbbCheckboxElement;
        "sbb-checkbox-group": HTMLSbbCheckboxGroupElement;
        "sbb-chip": HTMLSbbChipElement;
        "sbb-clock": HTMLSbbClockElement;
        "sbb-datepicker": HTMLSbbDatepickerElement;
        "sbb-datepicker-next-day": HTMLSbbDatepickerNextDayElement;
        "sbb-datepicker-previous-day": HTMLSbbDatepickerPreviousDayElement;
        "sbb-datepicker-toggle": HTMLSbbDatepickerToggleElement;
        "sbb-dialog": HTMLSbbDialogElement;
        "sbb-divider": HTMLSbbDividerElement;
        "sbb-footer": HTMLSbbFooterElement;
        "sbb-form-error": HTMLSbbFormErrorElement;
        "sbb-form-field": HTMLSbbFormFieldElement;
        "sbb-header": HTMLSbbHeaderElement;
        "sbb-header-action": HTMLSbbHeaderActionElement;
        "sbb-icon": HTMLSbbIconElement;
        "sbb-image": HTMLSbbImageElement;
        "sbb-journey-header": HTMLSbbJourneyHeaderElement;
        "sbb-journey-summary": HTMLSbbJourneySummaryElement;
        "sbb-link": HTMLSbbLinkElement;
        "sbb-link-list": HTMLSbbLinkListElement;
        "sbb-loading-indicator": HTMLSbbLoadingIndicatorElement;
        "sbb-logo": HTMLSbbLogoElement;
        "sbb-map-container": HTMLSbbMapContainerElement;
        "sbb-menu": HTMLSbbMenuElement;
        "sbb-menu-action": HTMLSbbMenuActionElement;
        "sbb-navigation": HTMLSbbNavigationElement;
        "sbb-navigation-action": HTMLSbbNavigationActionElement;
        "sbb-navigation-list": HTMLSbbNavigationListElement;
        "sbb-navigation-marker": HTMLSbbNavigationMarkerElement;
        "sbb-navigation-section": HTMLSbbNavigationSectionElement;
        "sbb-notification": HTMLSbbNotificationElement;
        "sbb-optgroup": HTMLSbbOptgroupElement;
        "sbb-option": HTMLSbbOptionElement;
        "sbb-pearl-chain": HTMLSbbPearlChainElement;
        "sbb-pearl-chain-time": HTMLSbbPearlChainTimeElement;
        "sbb-pearl-chain-vertical": HTMLSbbPearlChainVerticalElement;
        "sbb-pearl-chain-vertical-item": HTMLSbbPearlChainVerticalItemElement;
        "sbb-radio-button": HTMLSbbRadioButtonElement;
        "sbb-radio-button-group": HTMLSbbRadioButtonGroupElement;
        "sbb-select": HTMLSbbSelectElement;
        "sbb-selection-panel": HTMLSbbSelectionPanelElement;
        "sbb-signet": HTMLSbbSignetElement;
        "sbb-skiplink-list": HTMLSbbSkiplinkListElement;
        "sbb-slider": HTMLSbbSliderElement;
        "sbb-tab-group": HTMLSbbTabGroupElement;
        "sbb-tab-title": HTMLSbbTabTitleElement;
        "sbb-tag": HTMLSbbTagElement;
        "sbb-tag-group": HTMLSbbTagGroupElement;
        "sbb-teaser": HTMLSbbTeaserElement;
        "sbb-teaser-hero": HTMLSbbTeaserHeroElement;
        "sbb-time-input": HTMLSbbTimeInputElement;
        "sbb-timetable-barrier-free": HTMLSbbTimetableBarrierFreeElement;
        "sbb-timetable-duration": HTMLSbbTimetableDurationElement;
        "sbb-timetable-occupancy": HTMLSbbTimetableOccupancyElement;
        "sbb-timetable-park-and-rail": HTMLSbbTimetableParkAndRailElement;
        "sbb-timetable-row": HTMLSbbTimetableRowElement;
        "sbb-timetable-row-column-headers": HTMLSbbTimetableRowColumnHeadersElement;
        "sbb-timetable-row-day-change": HTMLSbbTimetableRowDayChangeElement;
        "sbb-timetable-row-header": HTMLSbbTimetableRowHeaderElement;
        "sbb-timetable-transportation-number": HTMLSbbTimetableTransportationNumberElement;
        "sbb-timetable-transportation-time": HTMLSbbTimetableTransportationTimeElement;
        "sbb-timetable-travel-hints": HTMLSbbTimetableTravelHintsElement;
        "sbb-title": HTMLSbbTitleElement;
        "sbb-toast": HTMLSbbToastElement;
        "sbb-toggle": HTMLSbbToggleElement;
        "sbb-toggle-check": HTMLSbbToggleCheckElement;
        "sbb-toggle-option": HTMLSbbToggleOptionElement;
        "sbb-tooltip": HTMLSbbTooltipElement;
        "sbb-tooltip-trigger": HTMLSbbTooltipTriggerElement;
        "sbb-train": HTMLSbbTrainElement;
        "sbb-train-blocked-passage": HTMLSbbTrainBlockedPassageElement;
        "sbb-train-formation": HTMLSbbTrainFormationElement;
        "sbb-train-wagon": HTMLSbbTrainWagonElement;
        "sbb-visual-checkbox": HTMLSbbVisualCheckboxElement;
    }
}
declare namespace LocalJSX {
    interface SbbAccordion {
        /**
          * Set this if you want to use the accordion on a non-white background.
         */
        "nonWhiteBackground"?: boolean;
        /**
          * Set this if you want the accordion to always have open only one item.
         */
        "onlyOneOpen"?: boolean;
    }
    interface SbbAccordionItem {
        /**
          * If set, an accordion can not be toggled
         */
        "disabled"?: boolean;
        /**
          * Id which is sent in the event after opening/closing accordion
         */
        "eventId"?: string;
        /**
          * Text to show as title for the accordion.
         */
        "heading": string;
        /**
          * Heading level.
         */
        "headingLevel"?: InterfaceAccordionItemAttributes['level'];
        /**
          * Set to true to open the accordion item. Set to false to close it.
         */
        "open"?: boolean;
    }
    interface SbbActionGroup {
        /**
          * Set the slotted `<sbb-action-group>` children's alignment.
         */
        "alignGroup"?: InterfaceSbbActionGroupAttributes['alignGroup'];
        /**
          * Size of the nested sbb-button instances. This will overwrite the size attribute of nested sbb-button instances.
         */
        "buttonSize"?: InterfaceButtonAttributes['size'];
        /**
          * Overrides the behaviour of `orientation` property.
         */
        "horizontalFrom"?: InterfaceSbbActionGroupAttributes['horizontalFrom'];
        /**
          * Size of the nested sbb-link instances. This will overwrite the size attribute of nested sbb-link instances.
         */
        "linkSize"?: InterfaceLinkAttributes['size'];
        /**
          * Indicates the orientation of the components inside the `<sbb-action-group>`.
         */
        "orientation"?: InterfaceSbbActionGroupAttributes['orientation'];
    }
    interface SbbAlert {
        /**
          * This will be forwarded as aria-label to the relevant nested element.
         */
        "accessibilityLabel"?: string | undefined;
        /**
          * Whether the fade in animation should be disabled.
         */
        "disableAnimation"?: boolean;
        /**
          * The href value you want to link to.
         */
        "href"?: string | undefined;
        /**
          * Name of the icon which will be forward to the nested `sbb-icon`. Choose the icons from https://icons.app.sbb.ch. Styling is optimized for icons of type HIM-CUS.
         */
        "iconName"?: string;
        /**
          * Content of the link.
         */
        "linkContent"?: string;
        /**
          * Emits when the fade in animation ends and the button is displayed.
         */
        "onDid-present"?: (event: SbbAlertCustomEvent<void>) => void;
        /**
          * Emits when dismissal of an alert was requested.
         */
        "onDismissal-requested"?: (event: SbbAlertCustomEvent<void>) => void;
        /**
          * Emits when the fade in animation starts.
         */
        "onWill-present"?: (event: SbbAlertCustomEvent<void>) => void;
        /**
          * Whether the alert is readonly. In readonly mode, there is no dismiss button offered to the user.
         */
        "readonly"?: boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * You can choose between `m` or `l` size.
         */
        "size"?: InterfaceAlertAttributes['size'];
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Content of title.
         */
        "titleContent"?: string;
        /**
          * Level of title, will be rendered as heading tag (e.g. h3). Defaults to level 3.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbAlertGroup {
        /**
          * Title for this alert group which is only visible for screen reader users.
         */
        "accessibilityTitle"?: string;
        /**
          * Level of the accessibility title, will be rendered as heading tag (e.g. h2). Defaults to level 2.
         */
        "accessibilityTitleLevel"?: InterfaceTitleAttributes['level'];
        /**
          * Emits when an alert was removed from DOM.
         */
        "onDid-dismiss-alert"?: (event: SbbAlertGroupCustomEvent<HTMLSbbAlertElement>) => void;
        /**
          * Emits when `sbb-alert-group` becomes empty.
         */
        "onEmpty"?: (event: SbbAlertGroupCustomEvent<void>) => void;
        /**
          * The role attribute defines how to announce alerts to the user.  'status': sets aria-live to polite and aria-atomic to true. 'alert': sets aria-live to assertive and aria-atomic to true.
         */
        "role"?: InterfaceSbbAlertGroupAttributes['role'];
    }
    interface SbbAutocomplete {
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Emits whenever the autocomplete is closed.
         */
        "onDid-close"?: (event: SbbAutocompleteCustomEvent<void>) => void;
        /**
          * Emits whenever the autocomplete is opened.
         */
        "onDid-open"?: (event: SbbAutocompleteCustomEvent<void>) => void;
        /**
          * Emits whenever the autocomplete begins the closing transition.
         */
        "onWill-close"?: (event: SbbAutocompleteCustomEvent<void>) => void;
        /**
          * Emits whenever the autocomplete starts the opening transition.
         */
        "onWill-open"?: (event: SbbAutocompleteCustomEvent<void>) => void;
        /**
          * The element where the autocomplete will attach; accepts both an element's id or an HTMLElement. If not set, will search for the first 'sbb-form-field' ancestor.
         */
        "origin"?: string | HTMLElement;
        /**
          * Whether the icon space is preserved when no icon is set.
         */
        "preserveIconSpace"?: boolean;
        /**
          * The input element that will trigger the autocomplete opening; accepts both an element's id or an HTMLElement. By default, the autocomplete will open on focus, click, input or `ArrowDown` keypress of the 'trigger' element. If not set, will search for the first 'input' child of a 'sbb-form-field' ancestor.
         */
        "trigger"?: string | HTMLInputElement;
    }
    interface SbbBreadcrumb {
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to.
         */
        "href"?: string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
    }
    interface SbbBreadcrumbGroup {
    }
    interface SbbButton {
        /**
          * Whether the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is present, button becomes a link).
         */
        "href"?: string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Set this property to true if you want only a visual representation of a button, but no interaction (a span instead of a link/button will be rendered).
         */
        "isStatic"?: boolean;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
        /**
          * Negative coloring variant flag.
         */
        "negative"?: boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Size variant, either l or m.
         */
        "size"?: InterfaceButtonAttributes['size'];
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type"?: ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
        /**
          * Variant of the button, like primary, secondary etc.
         */
        "variant"?: InterfaceButtonAttributes['variant'];
    }
    interface SbbCalendar {
        /**
          * A function used to filter out dates.
         */
        "dateFilter"?: (date: Date | null) => boolean;
        /**
          * The maximum valid date. Takes Date Object, ISOString, and Unix Timestamp (number of seconds since Jan 1 1970).
         */
        "max"?: Date | string | number;
        /**
          * The minimum valid date. Takes Date Object, ISOString, and Unix Timestamp (number of seconds since Jan 1 1970).
         */
        "min"?: Date | string | number;
        /**
          * Event emitted on date selection.
         */
        "onDate-selected"?: (event: SbbCalendarCustomEvent<Date>) => void;
        /**
          * The selected date. Takes Date Object, ISOString, and Unix Timestamp (number of seconds since Jan 1 1970).
         */
        "selectedDate"?: Date | string | number;
        /**
          * If set to true, two months are displayed
         */
        "wide"?: boolean;
    }
    interface SbbCard {
        /**
          * Option to set the component's background color.
         */
        "color"?: InterfaceSbbCardAttributes['color'];
        /**
          * Size variant, either xs, s, m, l, xl, xxl or xxxl.
         */
        "size"?: InterfaceSbbCardAttributes['size'];
    }
    interface SbbCardAction {
        /**
          * Whether the card is active.
         */
        "active"?: boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean | undefined;
        /**
          * The <form> element to associate the button to it.
         */
        "form"?: string | undefined;
        /**
          * The href value you want to link to.
         */
        "href"?: string | undefined;
        /**
          * The name of the button.
         */
        "name"?: string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Default behaviour of the button.
         */
        "type"?: ButtonType | undefined;
        /**
          * The value associated with button `name` when it's submitted with the form data.
         */
        "value"?: string | undefined;
    }
    interface SbbCardBadge {
        /**
          * Color of the card badge.
         */
        "color"?: InterfaceSbbCardBadgeAttributes['color'];
    }
    interface SbbCheckbox {
        /**
          * Whether the checkbox is checked.
         */
        "checked"?: boolean;
        /**
          * Whether the checkbox is disabled.
         */
        "disabled"?: boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from https://icons.app.sbb.ch (optional).
         */
        "iconName"?: string;
        /**
          * The label position relative to the labelIcon. Defaults to end
         */
        "iconPlacement"?: InterfaceSbbCheckboxAttributes['iconPlacement'];
        /**
          * Whether the checkbox is indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbCheckboxCustomEvent<any>) => void;
        "onState-change"?: (event: SbbCheckboxCustomEvent<CheckboxStateChange>) => void;
        /**
          * Whether the checkbox is required.
         */
        "required"?: boolean;
        /**
          * Label size variant, either m or s.
         */
        "size"?: InterfaceSbbCheckboxAttributes['size'];
        /**
          * Value of checkbox.
         */
        "value"?: string;
    }
    interface SbbCheckboxGroup {
        /**
          * Whether the checkbox group is disabled.
         */
        "disabled"?: boolean;
        /**
          * Overrides the behaviour of `orientation` property.
         */
        "horizontalFrom"?: InterfaceSbbCheckboxGroupAttributes['horizontalFrom'];
        /**
          * Indicates the orientation of the checkboxes inside the `<sbb-checkbox-group>`.
         */
        "orientation"?: InterfaceSbbCheckboxGroupAttributes['orientation'];
        /**
          * Whether the checkbox group is required.
         */
        "required"?: boolean;
        /**
          * Size variant, either m or s.
         */
        "size"?: InterfaceSbbCheckboxGroupAttributes['size'];
    }
    interface SbbChip {
        /**
          * Color of the chip.
         */
        "color"?: InterfaceSbbChipAttributes['color'];
        /**
          * Size of the chip.
         */
        "size"?: InterfaceSbbChipAttributes['size'];
    }
    interface SbbClock {
    }
    interface SbbDatepicker {
        /**
          * A function used to filter out dates.
         */
        "dateFilter"?: (date: Date | null) => boolean;
        /**
          * A function used to parse string value into dates.
         */
        "dateParser"?: (value: string) => Date | undefined;
        /**
          * A function used to format dates into the preferred string format.
         */
        "format"?: (date: Date) => string;
        /**
          * Reference of the native input connected to the datepicker.
         */
        "input"?: string | HTMLElement;
        "onChange"?: (event: SbbDatepickerCustomEvent<any>) => void;
        /**
          * Notifies that the attributes of the datepicker has changes.
         */
        "onDatePickerUpdated"?: (event: SbbDatepickerCustomEvent<any>) => void;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbDatepickerCustomEvent<any>) => void;
        /**
          * Notifies that the attributes of the input connected to the datepicker has changes.
         */
        "onInputUpdated"?: (event: SbbDatepickerCustomEvent<InputUpdateEvent>) => void;
        /**
          * Emits whenever the internal validation state changes.
         */
        "onValidationChange"?: (event: SbbDatepickerCustomEvent<ValidationChangeEvent>) => void;
        /**
          * If set to true, two months are displayed
         */
        "wide"?: boolean;
    }
    interface SbbDatepickerNextDay {
        /**
          * Datepicker reference.
         */
        "datePicker"?: string | HTMLElement;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
    }
    interface SbbDatepickerPreviousDay {
        /**
          * Datepicker reference.
         */
        "datePicker"?: string | HTMLElement;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
    }
    interface SbbDatepickerToggle {
        /**
          * Datepicker reference.
         */
        "datePicker"?: string | HTMLElement;
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation"?: boolean;
    }
    interface SbbDialog {
        /**
          * This will be forwarded as aria-label to the back button element.
         */
        "accessibilityBackLabel"?: string | undefined;
        /**
          * This will be forwarded as aria-label to the close button element.
         */
        "accessibilityCloseLabel"?: string | undefined;
        /**
          * This will be forwarded as aria-label to the relevant nested element.
         */
        "accessibilityLabel"?: string | undefined;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Negative coloring variant flag.
         */
        "negative"?: boolean;
        /**
          * Emits whenever the dialog is closed.
         */
        "onDid-close"?: (event: SbbDialogCustomEvent<any>) => void;
        /**
          * Emits whenever the dialog is opened.
         */
        "onDid-open"?: (event: SbbDialogCustomEvent<void>) => void;
        /**
          * Emits whenever the back button is clicked.
         */
        "onRequest-back-action"?: (event: SbbDialogCustomEvent<void>) => void;
        /**
          * Emits whenever the dialog begins the closing transition.
         */
        "onWill-close"?: (event: SbbDialogCustomEvent<any>) => void;
        /**
          * Emits whenever the dialog starts the opening transition.
         */
        "onWill-open"?: (event: SbbDialogCustomEvent<void>) => void;
        /**
          * Whether a back button is displayed next to the title.
         */
        "titleBackButton"?: boolean;
        /**
          * Dialog title.
         */
        "titleContent"?: string;
        /**
          * Level of title, will be rendered as heading tag (e.g. h1). Defaults to level 1.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbDivider {
        /**
          * Negative coloring variant flag
         */
        "negative"?: boolean;
        /**
          * Orientation property with possible values 'horizontal' | 'vertical'. Defaults to horizontal.
         */
        "orientation"?: InterfaceSbbDividerAttributes['orientation'];
    }
    interface SbbFooter {
        /**
          * Footer title text, visually hidden, necessary for screen readers.
         */
        "accessibilityTitle"?: string;
        /**
          * Level of the accessibility title, will be rendered as heading tag (e.g. h1). Defaults to level 1.
         */
        "accessibilityTitleLevel"?: InterfaceTitleAttributes['level'];
        /**
          * Whether to allow the footer content to stretch to full width. By default, the content has the appropriate page size.
         */
        "expanded"?: boolean;
        /**
          * Negative coloring variant flag.
         */
        "negative"?: boolean;
        /**
          * Variants to display the footer. The default, displays the content in regular block element approach. The clock-columns, used a css-grid for displaying the content over different breakpoints.
         */
        "variant"?: InterfaceFooterAttributes['variant'];
    }
    interface SbbFormError {
    }
    interface SbbFormField {
        /**
          * Whether to display the form field without a border.
         */
        "borderless"?: boolean;
        /**
          * Whether to reserve space for an error message. `none` does not reserve any space. `reserve` does reserve one row for an error message.
         */
        "errorSpace"?: InterfaceSbbFormFieldAttributes['errorSpace'];
        /**
          * Whether the label should float. If activated, the placeholder of the input is hidden.
         */
        "floatingLabel"?: boolean;
        /**
          * Label text for the input which is internally rendered as `<label>`.
         */
        "label"?: string;
        /**
          * Indicates whether the input is optional.
         */
        "optional"?: boolean;
        /**
          * Size variant, either l or m.
         */
        "size"?: InterfaceSbbFormFieldAttributes['size'];
        /**
          * Defines the width of the component: - `default`: the component has defined width and min-width; - `collapse`: the component adapts itself to its inner input content.
         */
        "width"?: 'default' | 'collapse';
    }
    interface SbbHeader {
        /**
          * Whether to allow the header content to stretch to full width. By default, the content has the appropriate page size.
         */
        "expanded"?: boolean;
        /**
          * Whether the header should hide and show on scroll.
         */
        "hideOnScroll"?: boolean;
        /**
          * The element's id or the element on which the scroll listener is attached.
         */
        "scrollOrigin"?: string | HTMLElement | Document;
    }
    interface SbbHeaderAction {
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * Used to set the minimum breakpoint from which the text is displayed. E.g. if set to 'large', the text will be visible for breakpoints large, wide, ultra, and hidden for all the others.
         */
        "expandFrom"?: InterfaceSbbHeaderActionAttributes['expandFrom'];
        /**
          * Form attribute if component is displayed as a button.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is not present sbb-header-action becomes a button).
         */
        "href"?: string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Name attribute if component is displayed as a button.
         */
        "name"?: string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Type attribute if component is displayed as a button.
         */
        "type"?: ButtonType | undefined;
        /**
          * The value associated with button `name` when it's submitted with the form data.
         */
        "value"?: string;
    }
    interface SbbIcon {
        /**
          * The aria-hidden property is set to "true" by default, since an icon alone does not convey any useful information for a screen-reader user.
         */
        "ariaHidden"?: string;
        /**
          * Only set the aria-label if aria-hidden is set to "false".
         */
        "ariaLabel"?: string;
        /**
          * The provided name consisting of the namespace and the name of the icon. If the namespace is missing, the default namespace "sbb" will be used. E.g. `name` (will use "sbb" as namespace) or `namespace:name`.
         */
        "name"?: string;
        /**
          * When set to `false`, SVG content that is HTTP fetched will not be checked if the response SVG content has any `<script>` elements, or any attributes that start with `on`, such as `onclick`.
          * @default true
         */
        "sanitize"?: boolean;
    }
    interface SbbImage {
        /**
          * An alt text is not always necessary (e.g. in teaser cards when additional link text is provided). In this case we can leave the value of the alt attribute blank, but the attribute itself still needs to be present. That way we can signal assistive technology, that they can skip the image.
         */
        "alt"?: string;
        /**
          * Set an aspect ratio default is '16-9' (16/9) other values: 'free', '1-1', '1-2', '2-1', '2-3', '3-2', '3-4', '4-3', '4-5', '5-4', '9-16'
         */
        "aspectRatio"?: InterfaceImageAttributes['aspectRatio'];
        /**
          * border-radius: if set to false, there will be no border-radius on the image
         */
        "borderRadius"?: boolean;
        /**
          * A caption can provide additional context to the image (e.g. descriptions and the like). Links will automatically receive tabindex=-1 if hideFromScreenreader is set to true. That way they will no longer become focusable.
         */
        "caption"?: string;
        /**
          * If a copyright text is provided, we will add it to the caption and create a structured data json-ld block with the copyright information.
         */
        "copyright"?: string;
        /**
          * Copyright holder can either be an Organization or a Person
         */
        "copyrightHolder"?: InterfaceImageAttributes['copyrightHolder'];
        /**
          * Set this to true, if you want to pass a custom focal point for the image. See full documentation here: https://docs.imgix.com/apis/rendering/focalpoint-crop
         */
        "customFocalPoint"?: boolean;
        /**
          * If the lazy property is set to true, the module will automatically change the decoding to async, otherwise the decoding is set to auto which leaves the handling up to the browser. Read more about the decoding attribute here: https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding
         */
        "decoding"?: InterfaceImageAttributes['decoding'];
        /**
          * Whether the fade animation from blurred to real image should be disabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Set this to true, to receive visual guidance where the custom focal point is currently set.
         */
        "focalPointDebug"?: boolean;
        /**
          * Pass in a floating number between 0 (left) and 1 (right).
         */
        "focalPointX"?: number;
        /**
          * Pass in a floating number between 0 (top) and 1 (bottom).
         */
        "focalPointY"?: number;
        /**
          * Right now the module is heavily coupled with the image delivery service imgix and depends on the original files being stored inside AEM. You can pass in any https://cdn.img.sbb.ch img src address you find on sbb.ch to play around with it. Just strip the url parameters and paste in the plain file address. If you want to know how to best work with this module with images coming from a different source, please contact the LYNE Core Team.
         */
        "imageSrc"?: string;
        /**
          * The importance attribute is fairly new attribute which should help the browser decide which resources it should prioritise during page load. We will set the attribute value based on the value, we receive in the loading attribute. 'eager', which we use for the largest image within the initial viewport, will set the attribute value to 'high'. 'lazy', which we use for images below the fold, will set the attribute value to 'low'.
         */
        "importance"?: InterfaceImageAttributes['importance'];
        /**
          * With the support of native image lazy loading, we can now decide whether we want to load the image immediately or only once it is close to the visible viewport. The value eager is best used for images within the initial viewport. We want to load these images as fast as possible to improve the Core Web Vitals values. lazy on the other hand works best for images which are further down the page or invisible during the loading of the initial viewport.
         */
        "loading"?: InterfaceImageAttributes['loading'];
        /**
          * If set to true, we show a blurred version of the image as placeholder before the actual image shows up. This will help to improve the perceived loading performance. Read more about the idea of lqip here: https://medium.com/@imgix/lqip-your-images-for-fast-loading-2523d9ee4a62
         */
        "lqip"?: boolean;
        /**
          * With performance.mark you can log a timestamp associated with the name you define in performanceMark when a certain event is happening. In our case we will log the performance.mark into the PerformanceEntry API once the image is fully loaded. Performance monitoring tools like SpeedCurve or Lighthouse are then able to grab these entries from the PerformanceEntry API and give us additional information and insights about our page loading behaviour. We are then also able to monitor these values over a long period to see if our performance increases or decreases over time. Best to use lowercase strings here, separate words with underscores or dashes.
         */
        "performanceMark"?: string;
        /**
          * With the pictureSizesConfig object, you can pass in information into image about what kind of source elements should get rendered. mediaQueries accepts multiple Media Query entries which can get combined by defining a conditionOperator. Type is: stringified InterfaceImageAttributesSizesConfig-Object An example could look like this: {    "breakpoints": [      {        "image": {          "height": "675",          "width": "1200"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "sbb-breakpoint-large-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "549",          "width": "976"        },        "mediaQueries": [          {            "conditionFeature": "min-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "sbb-breakpoint-small-min"            },            "conditionOperator": false          }        ]      },      {        "image": {          "height": "180",          "width": "320"        },        "mediaQueries": [          {            "conditionFeature": "max-width",            "conditionFeatureValue": {              "lyneDesignToken": true,              "value": "sbb-breakpoint-micro-max"            },            "conditionOperator": "and"          },          {            "conditionFeature": "orientation",            "conditionFeatureValue": {              "lyneDesignToken": false,              "value": "landscape"            },            "conditionOperator": false          }        ]      }    ]  }
         */
        "pictureSizesConfig"?: string;
    }
    interface SbbJourneyHeader {
        /**
          * Destination location for the journey header.
         */
        "destination": string;
        /**
          * Heading level of the journey header element (e.g. h1-h6).
         */
        "level"?: InterfaceTitleAttributes['level'];
        /**
          * Negative coloring variant flag.
         */
        "negative"?: boolean;
        /**
          * Origin location for the journey header.
         */
        "origin": string;
        /**
          * Whether the journey is a round trip. If so, the icon changes to a round-trip one.
         */
        "roundTrip"?: boolean;
        /**
          * Journey header size.
         */
        "size"?: InterfaceJourneyHeaderAttributes['size'];
    }
    interface SbbJourneySummary {
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * Heading level of the journey header element (e.g. h1-h6).
         */
        "headerLevel"?: InterfaceSbbJourneySummaryAttributes['headerLevel'];
        /**
          * The RoundTrip prop. This prop controls if one or two arrows are displayed in the header.
         */
        "roundTrip"?: boolean;
        /**
          * The trip prop
         */
        "trip": InterfaceSbbJourneySummaryAttributes;
        /**
          * The tripBack prop
         */
        "tripBack"?: InterfaceSbbJourneySummaryAttributes;
    }
    interface SbbLink {
        /**
          * Whether the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is not present link becomes a button).
         */
        "href"?: string | undefined;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch. Inline variant doesn't support icons.
         */
        "iconName"?: string;
        /**
          * Moves the icon to the end of the component if set to true.
         */
        "iconPlacement"?: InterfaceLinkAttributes['iconPlacement'];
        /**
          * Set this property to true if you want only a visual representation of a link, but no interaction (a span instead of a link/button will be rendered).
         */
        "isStatic"?: boolean;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
        /**
          * Negative coloring variant flag.
         */
        "negative"?: boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Text size, the link should get in the non-button variation. With inline variant, the text size adapts to where it is used.
         */
        "size"?: InterfaceLinkAttributes['size'];
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type"?: ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
        /**
          * Variant of the link (block or inline).
         */
        "variant"?: InterfaceLinkAttributes['variant'];
    }
    interface SbbLinkList {
        /**
          * Selected breakpoint from which the list is rendered horizontally.
         */
        "horizontalFrom"?: InterfaceLinkListAttributes['horizontalFromBreakpoint'];
        /**
          * Whether to render the link list and nested sbb-link instances as negative. This will overwrite the negative attribute of nested sbb-link instances.
         */
        "negative"?: boolean;
        /**
          * The orientation in which the list will be shown vertical or horizontal.
         */
        "orientation"?: InterfaceLinkListAttributes['orientation'];
        /**
          * Text size of the nested sbb-link instances. This will overwrite the size attribute of nested sbb-link instances.
         */
        "size"?: InterfaceLinkAttributes['size'];
        /**
          * The title text we want to show before the list.
         */
        "titleContent"?: string;
        /**
          * The semantic level of the title, e.g. 2 = h2.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbLoadingIndicator {
        /**
          * Size variant, either s or m.
         */
        "size"?: InterfaceSbbLoadingIndicatorAttributes['size'];
        /**
          * Variant of the loading indicator; `circle` is meant to be used inline, while `window` as overlay.
         */
        "variant"?: InterfaceSbbLoadingIndicatorAttributes['variant'];
    }
    interface SbbLogo {
        /**
          * Accessibility label which will be forwarded to the SVG logo.
         */
        "accessibilityLabel"?: string;
        /**
          * Variants of the logo.
         */
        "negative"?: boolean;
        /**
          * Visual protective room around logo.
         */
        "protectiveRoom"?: InterfaceLogoAttributes['protectiveRoom'];
    }
    interface SbbMapContainer {
        /**
          * Flag to show/hide the scroll up button inside the sidebar on mobile.
         */
        "hideScrollUpButton"?: boolean;
    }
    interface SbbMenu {
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * This will be forwarded as aria-label to the inner list. Used only if the menu automatically renders the actions inside as a list.
         */
        "listAccessibilityLabel"?: string;
        /**
          * Emits whenever the menu is closed.
         */
        "onDid-close"?: (event: SbbMenuCustomEvent<void>) => void;
        /**
          * Emits whenever the menu is opened.
         */
        "onDid-open"?: (event: SbbMenuCustomEvent<void>) => void;
        /**
          * Emits whenever the menu begins the closing transition.
         */
        "onWill-close"?: (event: SbbMenuCustomEvent<void>) => void;
        /**
          * Emits whenever the menu starts the opening transition.
         */
        "onWill-open"?: (event: SbbMenuCustomEvent<void>) => void;
        /**
          * The element that will trigger the menu dialog. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger"?: string | HTMLElement;
    }
    interface SbbMenuAction {
        /**
          * Value shown as badge at component end.
         */
        "amount"?: string | undefined;
        /**
          * Whether the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The href value you want to link to (if it is not present menu action becomes a button).
         */
        "href"?: string | undefined;
        /**
          * The name of the icon, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string | undefined;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type"?: ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
    }
    interface SbbNavigation {
        /**
          * This will be forwarded as aria-label to the close button element.
         */
        "accessibilityCloseLabel"?: string | undefined;
        /**
          * This will be forwarded as aria-label to the dialog and is read as a title of the navigation.
         */
        "accessibilityLabel"?: string | undefined;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Emits whenever the navigation is closed.
         */
        "onDidClose"?: (event: SbbNavigationCustomEvent<void>) => void;
        /**
          * Emits whenever the navigation is opened.
         */
        "onDidOpen"?: (event: SbbNavigationCustomEvent<void>) => void;
        /**
          * Emits whenever the navigation begins the closing transition.
         */
        "onWillClose"?: (event: SbbNavigationCustomEvent<void>) => void;
        /**
          * Emits whenever the navigation begins the opening transition.
         */
        "onWillOpen"?: (event: SbbNavigationCustomEvent<void>) => void;
        /**
          * The element that will trigger the navigation. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger"?: string | HTMLElement;
    }
    interface SbbNavigationAction {
        /**
          * Whether the action is active.
         */
        "active"?: boolean;
        /**
          * Whether the browser will show the download dialog on click.
         */
        "download"?: boolean;
        /**
          * The href value you want to link to (if it is not present, navigation action becomes a button).
         */
        "href"?: string | undefined;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Action size variant.
         */
        "size"?: 'l' | 'm' | 's';
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * The type attribute to use for the button.
         */
        "type"?: ButtonType | undefined;
        /**
          * The value attribute to use for the button.
         */
        "value"?: string;
    }
    interface SbbNavigationList {
        "label"?: string;
    }
    interface SbbNavigationMarker {
        /**
          * Marker size variant.
         */
        "size"?: 'l' | 's';
    }
    interface SbbNavigationSection {
        /**
          * This will be forwarded as aria-label to the back button element.
         */
        "accessibilityBackLabel"?: string | undefined;
        /**
          * This will be forwarded as aria-label to the dialog and is read as a title of the navigation-section.
         */
        "accessibilityLabel"?: string | undefined;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        "titleContent"?: string;
        /**
          * The element that will trigger the navigation section. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger"?: string | HTMLElement;
    }
    interface SbbNotification {
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Emits whenever the notification is closed.
         */
        "onDid-close"?: (event: SbbNotificationCustomEvent<void>) => void;
        /**
          * Emits whenever the notification is opened.
         */
        "onDid-open"?: (event: SbbNotificationCustomEvent<void>) => void;
        /**
          * Emits whenever the notification begins the closing transition.
         */
        "onWill-close"?: (event: SbbNotificationCustomEvent<void>) => void;
        /**
          * Emits whenever the notification starts the opening transition.
         */
        "onWill-open"?: (event: SbbNotificationCustomEvent<void>) => void;
        /**
          * Whether the notification is readonly. In readonly mode, there is no dismiss button offered to the user.
         */
        "readonly"?: boolean;
        /**
          * Content of title.
         */
        "titleContent"?: string;
        /**
          * Level of title, will be rendered as heading tag (e.g. h3). Defaults to level 3.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
        /**
          * The type of the notification.
         */
        "type"?: InterfaceNotificationAttributes['type'];
    }
    interface SbbOptgroup {
        /**
          * Whether the group is disabled.
         */
        "disabled"?: boolean;
        /**
          * Option group label.
         */
        "label"?: string;
    }
    interface SbbOption {
        /**
          * Whether the option is currently active.
         */
        "active"?: boolean;
        /**
          * Whether the option is disabled. TBI: missing disabled style, will be implemented with the select component.
         */
        "disabled"?: boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Emits when an option was selected by user.
         */
        "onOption-selected"?: (event: SbbOptionCustomEvent<any>) => void;
        /**
          * Emits when the option selection status changes.
         */
        "onOption-selection-change"?: (event: SbbOptionCustomEvent<any>) => void;
        /**
          * Whether the option is selected.
         */
        "selected"?: boolean;
        /**
          * Value of the option.
         */
        "value"?: string;
    }
    interface SbbPearlChain {
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * define the legs of the pearl-chain. Format: `{"legs": [{"duration": 25}, ...]}` `duration` in minutes. Duration of the leg is relative to the total travel time. Example: departure 16:30, change at 16:40, arrival at 17:00. So the change should have a duration of 33.33%.
         */
        "legs"?: Leg[];
    }
    interface SbbPearlChainTime {
        /**
          * Prop to render the arrival time - will be formatted as "H:mm"
         */
        "arrivalTime"?: string;
        /**
          * Optional prop to render the walk time (in minutes) after arrival
         */
        "arrivalWalk"?: number;
        /**
          * Prop to render the departure time - will be formatted as "H:mm"
         */
        "departureTime"?: string;
        /**
          * Optional prop to render the walk time (in minutes) before departure
         */
        "departureWalk"?: number;
        /**
          * Per default, the current location has a pulsating animation. You can disable the animation with this property.
         */
        "disableAnimation"?: boolean;
        /**
          * define the legs of the pearl-chain. Format: `{"legs": [{"duration": 25}, ...]}` `duration` in minutes. Duration of the leg is relative to the total travel time. Example: departure 16:30, change at 16:40, arrival at 17:00. So the change should have a duration of 33.33%.
         */
        "legs": Leg[];
    }
    interface SbbPearlChainVertical {
    }
    interface SbbPearlChainVerticalItem {
        /**
          * If true the position won't be animated.
         */
        "disableAnimation"?: boolean;
        /**
          * The pearlChainVerticalItemAttributes Prop for styling the bullets and line.
         */
        "pearlChainVerticalItemAttributes": PearlChainVerticalItemAttributes;
    }
    interface SbbRadioButton {
        /**
          * Whether the radio can be deselected.
         */
        "allowEmptySelection"?: boolean;
        /**
          * Whether the radio button is checked.
         */
        "checked"?: boolean;
        /**
          * Whether the radio button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Internal event that emits whenever the state of the radio option in relation to the parent selection panel changes.
         */
        "onState-change"?: (event: SbbRadioButtonCustomEvent<RadioButtonStateChange>) => void;
        /**
          * Whether the radio button is required.
         */
        "required"?: boolean;
        /**
          * Label size variant, either m or s.
         */
        "size"?: InterfaceSbbRadioButtonAttributes['size'];
        /**
          * Value of radio button.
         */
        "value"?: string;
    }
    interface SbbRadioButtonGroup {
        /**
          * Whether the radios can be deselected.
         */
        "allowEmptySelection"?: boolean;
        /**
          * Whether the radio group is disabled.
         */
        "disabled"?: boolean;
        /**
          * Overrides the behaviour of `orientation` property.
         */
        "horizontalFrom"?: InterfaceSbbRadioButtonGroupAttributes['horizontalFrom'];
        /**
          * Emits whenever the radio group value changes.
         */
        "onChange"?: (event: SbbRadioButtonGroupCustomEvent<any>) => void;
        /**
          * Emits whenever the radio group value changes.
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbRadioButtonGroupCustomEvent<any>) => void;
        /**
          * Emits whenever the radio group value changes.
         */
        "onInput"?: (event: SbbRadioButtonGroupCustomEvent<any>) => void;
        /**
          * Radio group's orientation, either horizontal or vertical.
         */
        "orientation"?: InterfaceSbbRadioButtonGroupAttributes['orientation'];
        /**
          * Whether the radio group is required.
         */
        "required"?: boolean;
        /**
          * Size variant, either m or s.
         */
        "size"?: InterfaceSbbRadioButtonGroupAttributes['size'];
        /**
          * The value of the radio group.
         */
        "value"?: any | null;
    }
    interface SbbSelect {
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Whether the select is disabled.
         */
        "disabled"?: boolean;
        /**
          * Whether the select allows for multiple selection.
         */
        "multiple"?: boolean;
        "onChange"?: (event: SbbSelectCustomEvent<any>) => void;
        /**
          * Emits whenever the select is closed.
         */
        "onDid-close"?: (event: SbbSelectCustomEvent<void>) => void;
        /**
          * Emits whenever the select is opened.
         */
        "onDid-open"?: (event: SbbSelectCustomEvent<void>) => void;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbSelectCustomEvent<any>) => void;
        "onInput"?: (event: SbbSelectCustomEvent<any>) => void;
        "onState-change"?: (event: SbbSelectCustomEvent<SelectChange>) => void;
        /**
          * Emits whenever the select begins the closing transition.
         */
        "onWill-close"?: (event: SbbSelectCustomEvent<void>) => void;
        /**
          * Emits whenever the select starts the opening transition.
         */
        "onWill-open"?: (event: SbbSelectCustomEvent<void>) => void;
        /**
          * The placeholder used if no value has been selected.
         */
        "placeholder"?: string;
        /**
          * Whether the select is readonly.
         */
        "readonly"?: boolean;
        /**
          * Whether the select is required.
         */
        "required"?: boolean;
        /**
          * The value of the select component. If `multiple` is true, it's an array.
         */
        "value"?: string | string[];
    }
    interface SbbSelectionPanel {
        /**
          * Whether the unselected panel has a border.
         */
        "borderless"?: boolean;
        /**
          * The background color of the panel.
         */
        "color"?: 'white' | 'milk';
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Whether the content section is always visible.
         */
        "forceOpen"?: boolean;
        /**
          * Emits whenever the content section is closed.
         */
        "onDid-close"?: (event: SbbSelectionPanelCustomEvent<{ closeTarget: HTMLElement }>) => void;
        /**
          * Emits whenever the content section is opened.
         */
        "onDid-open"?: (event: SbbSelectionPanelCustomEvent<void>) => void;
        /**
          * Emits whenever the content section begins the closing transition.
         */
        "onWill-close"?: (event: SbbSelectionPanelCustomEvent<{ closeTarget: HTMLElement }>) => void;
        /**
          * Emits whenever the content section starts the opening transition.
         */
        "onWill-open"?: (event: SbbSelectionPanelCustomEvent<void>) => void;
    }
    interface SbbSignet {
        /**
          * Accessibility label which will be forwarded to the inner SVG signet.
         */
        "accessibilityLabel"?: string;
        /**
          * Visual protective room around signet.
         */
        "protectiveRoom"?: InterfaceSignetAttributes['protectiveRoom'];
    }
    interface SbbSkiplinkList {
        /**
          * The title text we want to place before the list.
         */
        "titleContent"?: string;
        /**
          * The semantic level of the title, e.g. 2 = h2.
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbSlider {
        /**
          * Disabled state for the inner HTMLInputElement.
         */
        "disabled"?: boolean;
        /**
          * Name of the icon at component's end, which will be forward to the nested `sbb-icon`.
         */
        "endIcon"?: string;
        /**
          * The <form> element to associate the inner HTMLInputElement with.
         */
        "form"?: string;
        /**
          * Maximum acceptable value for the inner HTMLInputElement.
         */
        "max"?: string;
        /**
          * Minimum acceptable value for the inner HTMLInputElement.
         */
        "min"?: string;
        /**
          * Name of the inner HTMLInputElement.
         */
        "name"?: string;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbSliderCustomEvent<any>) => void;
        /**
          * Readonly state for the inner HTMLInputElement. Since the input range does not allow this attribute, it will be merged with the `disabled` one.
         */
        "readonly"?: boolean;
        /**
          * Name of the icon at component's start, which will be forward to the nested `sbb-icon`.
         */
        "startIcon"?: string;
        /**
          * Value for the inner HTMLInputElement.
         */
        "value"?: string;
        /**
          * Numeric value for the inner HTMLInputElement.
         */
        "valueAsNumber"?: number;
    }
    interface SbbTabGroup {
        /**
          * Sets the initial tab. If it matches a disabled tab or exceeds the length of the tab group, the first enabled tab will be selected.
         */
        "initialSelectedIndex"?: number;
        /**
          * Emits an event on selected tab change
         */
        "onDid-change"?: (event: SbbTabGroupCustomEvent<void>) => void;
    }
    interface SbbTabTitle {
        /**
          * Active tab state
         */
        "active"?: boolean;
        /**
          * Amount displayed inside the tab.
         */
        "amount"?: string;
        /**
          * Disabled tab state
         */
        "disabled"?: boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * The level will correspond to the heading tag generated in the title. Use this property to generate the appropriate header tag, taking SEO into consideration.
         */
        "level"?: InterfaceTabTitleAttributes['level'];
    }
    interface SbbTag {
        /**
          * Amount displayed inside the tag.
         */
        "amount"?: string;
        /**
          * Whether the toggle is checked.
         */
        "checked"?: boolean;
        /**
          * Whether the tag is disabled.
         */
        "disabled"?: boolean;
        /**
          * The <form> element to associate the button with.
         */
        "form"?: string;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from https://icons.app.sbb.ch (optional).
         */
        "iconName"?: string;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
        /**
          * Change event emitter
         */
        "onChange"?: (event: SbbTagCustomEvent<any>) => void;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbTagCustomEvent<any>) => void;
        /**
          * Input event emitter
         */
        "onInput"?: (event: SbbTagCustomEvent<any>) => void;
        /**
          * Internal event that emits whenever the state of the tag in relation to the parent toggle changes.
         */
        "onState-change"?: (event: SbbTagCustomEvent<TagStateChange>) => void;
        /**
          * Value of the tag.
         */
        "value"?: string;
    }
    interface SbbTagGroup {
        /**
          * This will be forwarded as aria-label to the inner list.
         */
        "listAccessibilityLabel"?: string;
        /**
          * If set multiple to false, the selection is exclusive and the value is a string (or null). If set multiple to true, the selection can have multiple values and therefore value is an array.  Changing multiple during run time is not supported.
         */
        "multiple"?: boolean;
        /**
          * Value of the sbb-tag-group. If set multiple to false, the value is a string (or null). If set multiple to true, the value is an array.
         */
        "value"?: string | string[] | null;
    }
    /**
     * Generalized Teaser - for displaying an image, title and paragraph
     */
    interface SbbTeaser {
        /**
          * The href value you want to link to.
         */
        "href"?: string | undefined;
        /**
          * Teaser variant - when this is true the text-content will be under the image otherwise it will be displayed next to the image.
         */
        "isStacked"?: boolean;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
        /**
          * Heading level of the sbb-title element (e.g. h1-h6).
         */
        "titleLevel"?: InterfaceTitleAttributes['level'];
    }
    interface SbbTeaserHero {
        /**
          * The href value you want to link to.
         */
        "href"?: string | undefined;
        /**
          * Image alt text will be passed to `sbb-image`.
         */
        "imageAlt"?: string;
        /**
          * Image src will be passed to `sbb-image`.
         */
        "imageSrc"?: string;
        /**
          * Panel link text.
         */
        "linkContent"?: string;
        /**
          * The relationship of the linked URL as space-separated link types.
         */
        "rel"?: string | undefined;
        /**
          * Where to display the linked URL.
         */
        "target"?: LinkTargetType | string | undefined;
    }
    interface SbbTimeInput {
        /**
          * Reference of the native input connected to the datepicker.
         */
        "input"?: string | HTMLElement;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbTimeInputCustomEvent<any>) => void;
        /**
          * Emits whenever the internal validation state changes.
         */
        "onValidationChange"?: (event: SbbTimeInputCustomEvent<ValidationChangeEvent>) => void;
    }
    interface SbbTimetableBarrierFree {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableDuration {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableOccupancy {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableParkAndRail {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableParkAndRailAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableRow {
        /**
          * This will be forwarded to the sbb-card component as aria-expanded.
         */
        "accessibilityExpanded"?: boolean;
        /**
          * When this prop is true the sbb-card will be in the active state.
         */
        "active"?: boolean;
        /**
          * This will be forwarded to the notices section
         */
        "boarding"?: Boarding;
        /**
          * Hidden label for the card action. It overrides the automatically generated accessibility text for the component. Use this prop to provide custom accessibility information for the component.
         */
        "cardActionLabel"?: string;
        /**
          * This will be forwarded to the sbb-pearl-chain component - if true the position won't be animated.
         */
        "disableAnimation"?: boolean;
        /**
          * The loading state - when this is true it will be render skeleton with an idling animation
         */
        "loadingPrice"?: boolean;
        /**
          * The loading state - when this is true it will be render skeleton with an idling animation
         */
        "loadingTrip"?: boolean;
        /**
          * The price Prop, which consists of the data for the badge.
         */
        "price"?: Price;
        /**
          * The trip Prop.
         */
        "trip"?: ITripItem;
    }
    interface SbbTimetableRowColumnHeaders {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableRowDayChange {
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableRowHeader {
        "config": string;
    }
    interface SbbTimetableTransportationNumber {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableTransportationNumberAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableTransportationTime {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableTransportationTimeAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTimetableTravelHints {
        /**
          * Set the desired appearance of the component.
         */
        "appearance"?: InterfaceTimetableTravelHintsAttributes['appearance'];
        /**
          * Stringified JSON which defines most of the content of the component. Please check the individual stories to get an idea of the structure.
         */
        "config": string;
    }
    interface SbbTitle {
        /**
          * Title level
         */
        "level"?: InterfaceTitleAttributes['level'];
        /**
          * Choose negative variant
         */
        "negative"?: boolean;
        /**
          * Visual level for the title. Optional, if not set, the value of level will be used.
         */
        "visualLevel"?: InterfaceTitleAttributes['visualLevel'];
        /**
          * Sometimes we need a title in the markup to present a proper hierarchy to the screen readers while we do not want to let that title appear visually. In this case we set visuallyHidden to true
         */
        "visuallyHidden"?: false;
    }
    interface SbbToast {
        /**
          * Whether the animation is disabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Whether the toast has a close button.
         */
        "dismissible"?: boolean;
        /**
          * The name of the icon, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * Emits whenever the autocomplete is closed.
         */
        "onDid-close"?: (event: SbbToastCustomEvent<void>) => void;
        /**
          * Emits whenever the autocomplete is opened.
         */
        "onDid-open"?: (event: SbbToastCustomEvent<void>) => void;
        /**
          * Emits whenever the autocomplete begins the closing transition.
         */
        "onWill-close"?: (event: SbbToastCustomEvent<void>) => void;
        /**
          * Emits whenever the autocomplete starts the opening transition.
         */
        "onWill-open"?: (event: SbbToastCustomEvent<void>) => void;
        /**
          * The ARIA politeness level. Check https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#live_regions for further info
         */
        "politeness"?: SbbToastAriaPoliteness;
        /**
          * The position where to place the toast.
         */
        "position"?: SbbToastPosition;
        /**
          * The length of time in milliseconds to wait before automatically dismissing the toast. If 0, it stays open indefinitely.
         */
        "timeout"?: number;
    }
    interface SbbToggle {
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Whether the toggle is disabled.
         */
        "disabled"?: boolean;
        /**
          * If true set the width of the component fixed; if false the width is dynamic based on the label of the sbb-toggle-option.
         */
        "even"?: boolean;
        /**
          * Emits whenever the radio group value changes.
         */
        "onChange"?: (event: SbbToggleCustomEvent<any>) => void;
        /**
          * Emits whenever the radio group value changes.
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbToggleCustomEvent<any>) => void;
        /**
          * Size variant, either m or s.
         */
        "size"?: InterfaceSbbToggleAttributes['size'];
        /**
          * The value of the toggle. It needs to be mutable since it is updated whenever a new option is selected (see the `onToggleOptionSelect()` method).
         */
        "value"?: any | null;
    }
    interface SbbToggleCheck {
        /**
          * Whether the toggle-check is checked.
         */
        "checked"?: boolean;
        /**
          * The disabled prop for the disabled state.
         */
        "disabled"?: boolean;
        /**
          * The svg name for the true state - default -> 'tick-small'
         */
        "iconName"?: string;
        /**
          * The label position relative to the toggle. Defaults to 'after'
         */
        "labelPosition"?: InterfaceToggleCheckAttributes['labelPosition'];
        /**
          * Name of the toggle-check.
         */
        "name"?: string;
        /**
          * @deprecated only used for React. Will probably be removed once React 19 is available.
         */
        "onDidChange"?: (event: SbbToggleCheckCustomEvent<any>) => void;
        /**
          * The required prop for the required state.
         */
        "required"?: boolean;
        /**
          * Size variant, either m or s.
         */
        "size"?: InterfaceToggleCheckAttributes['size'];
        /**
          * Value of toggle-check.
         */
        "value"?: string;
    }
    interface SbbToggleOption {
        /**
          * Whether the toggle-option is checked.
         */
        "checked"?: boolean;
        /**
          * Whether the toggle option is disabled.
         */
        "disabled"?: boolean;
        /**
          * Name of the icon for `<sbb-icon>`.
         */
        "iconName"?: string;
        /**
          * Internal event that emits whenever the state of the toggle option in relation to the parent toggle changes.
         */
        "onState-change"?: (event: SbbToggleOptionCustomEvent<ToggleOptionStateChange>) => void;
        /**
          * Value of toggle-option.
         */
        "value"?: string;
    }
    interface SbbTooltip {
        /**
          * This will be forwarded as aria-label to the close button element.
         */
        "accessibilityCloseLabel"?: string | undefined;
        /**
          * Close the tooltip after a certain delay.
         */
        "closeDelay"?: number;
        /**
          * Whether the animation is enabled.
         */
        "disableAnimation"?: boolean;
        /**
          * Whether the close button should be hidden.
         */
        "hideCloseButton"?: boolean;
        /**
          * Whether the tooltip should be triggered on hover.
         */
        "hoverTrigger"?: boolean;
        /**
          * Emits whenever the tooltip is closed.
         */
        "onDid-close"?: (event: SbbTooltipCustomEvent<{ closeTarget: HTMLElement }>) => void;
        /**
          * Emits whenever the tooltip is opened.
         */
        "onDid-open"?: (event: SbbTooltipCustomEvent<void>) => void;
        /**
          * Emits whenever the tooltip begins the closing transition.
         */
        "onWill-close"?: (event: SbbTooltipCustomEvent<{ closeTarget: HTMLElement }>) => void;
        /**
          * Emits whenever the tooltip starts the opening transition.
         */
        "onWill-open"?: (event: SbbTooltipCustomEvent<void>) => void;
        /**
          * Open the tooltip after a certain delay.
         */
        "openDelay"?: number;
        /**
          * The element that will trigger the tooltip dialog. Accepts both a string (id of an element) or an HTML element.
         */
        "trigger"?: string | HTMLElement;
    }
    interface SbbTooltipTrigger {
        /**
          * Whether the tooltip-trigger is disabled.
         */
        "disabled"?: boolean;
        /**
          * The icon name we want to use, choose from the small icon variants from the ui-icons category from here https://icons.app.sbb.ch.
         */
        "iconName"?: string;
        /**
          * The name attribute to use for the button.
         */
        "name"?: string | undefined;
    }
    interface SbbTrain {
        /**
          * Accessibility label for additional information regarding the leaving direction of the train.
         */
        "accessibilityLabel"?: string;
        /**
          * Controls the direction indicator to show the arrow left or right. Default is left.
         */
        "direction"?: InterfaceSbbTrainAttributes['direction'];
        /**
          * General label for "driving direction".
         */
        "directionLabel": string;
        /**
          * Heading level of the direction label, used for screen readers.
         */
        "directionLabelLevel"?: InterfaceTitleAttributes['level'];
        "onTrainSlotChange"?: (event: SbbTrainCustomEvent<any>) => void;
        /**
          * Label for the destination station of the train.
         */
        "station"?: string;
    }
    interface SbbTrainBlockedPassage {
    }
    interface SbbTrainFormation {
        /**
          * Option to hide all wagon labels.
         */
        "hideWagonLabel"?: boolean;
    }
    interface SbbTrainWagon {
        /**
          * Additional accessibility text which will be appended to the end.
         */
        "additionalAccessibilityText"?: string;
        /**
          * Accessibility text for blocked passages of the wagon.
         */
        "blockedPassage"?: InterfaceSbbTrainWagonAttributes['blockedPassage'];
        /**
          * Visible label for the wagon number. Not used by type locomotive or closed.
         */
        "label"?: string;
        /**
          * Occupancy of a wagon.
         */
        "occupancy"?: InterfaceSbbTrainWagonAttributes['occupancy'];
        "onSectorChange"?: (event: SbbTrainWagonCustomEvent<any>) => void;
        /**
          * Sector in which to wagon stops.
         */
        "sector"?: string;
        /**
          * Wagon type.
         */
        "type"?: InterfaceSbbTrainWagonAttributes['type'];
        /**
          * Visible class label of a wagon.
         */
        "wagonClass"?: '1' | '2';
    }
    interface SbbVisualCheckbox {
        /**
          * Checked state.
         */
        "checked"?: boolean;
        /**
          * Disabled state.
         */
        "disabled"?: boolean;
        /**
          * Indeterminate state.
         */
        "indeterminate"?: boolean;
    }
    interface IntrinsicElements {
        "sbb-accordion": SbbAccordion;
        "sbb-accordion-item": SbbAccordionItem;
        "sbb-action-group": SbbActionGroup;
        "sbb-alert": SbbAlert;
        "sbb-alert-group": SbbAlertGroup;
        "sbb-autocomplete": SbbAutocomplete;
        "sbb-breadcrumb": SbbBreadcrumb;
        "sbb-breadcrumb-group": SbbBreadcrumbGroup;
        "sbb-button": SbbButton;
        "sbb-calendar": SbbCalendar;
        "sbb-card": SbbCard;
        "sbb-card-action": SbbCardAction;
        "sbb-card-badge": SbbCardBadge;
        "sbb-checkbox": SbbCheckbox;
        "sbb-checkbox-group": SbbCheckboxGroup;
        "sbb-chip": SbbChip;
        "sbb-clock": SbbClock;
        "sbb-datepicker": SbbDatepicker;
        "sbb-datepicker-next-day": SbbDatepickerNextDay;
        "sbb-datepicker-previous-day": SbbDatepickerPreviousDay;
        "sbb-datepicker-toggle": SbbDatepickerToggle;
        "sbb-dialog": SbbDialog;
        "sbb-divider": SbbDivider;
        "sbb-footer": SbbFooter;
        "sbb-form-error": SbbFormError;
        "sbb-form-field": SbbFormField;
        "sbb-header": SbbHeader;
        "sbb-header-action": SbbHeaderAction;
        "sbb-icon": SbbIcon;
        "sbb-image": SbbImage;
        "sbb-journey-header": SbbJourneyHeader;
        "sbb-journey-summary": SbbJourneySummary;
        "sbb-link": SbbLink;
        "sbb-link-list": SbbLinkList;
        "sbb-loading-indicator": SbbLoadingIndicator;
        "sbb-logo": SbbLogo;
        "sbb-map-container": SbbMapContainer;
        "sbb-menu": SbbMenu;
        "sbb-menu-action": SbbMenuAction;
        "sbb-navigation": SbbNavigation;
        "sbb-navigation-action": SbbNavigationAction;
        "sbb-navigation-list": SbbNavigationList;
        "sbb-navigation-marker": SbbNavigationMarker;
        "sbb-navigation-section": SbbNavigationSection;
        "sbb-notification": SbbNotification;
        "sbb-optgroup": SbbOptgroup;
        "sbb-option": SbbOption;
        "sbb-pearl-chain": SbbPearlChain;
        "sbb-pearl-chain-time": SbbPearlChainTime;
        "sbb-pearl-chain-vertical": SbbPearlChainVertical;
        "sbb-pearl-chain-vertical-item": SbbPearlChainVerticalItem;
        "sbb-radio-button": SbbRadioButton;
        "sbb-radio-button-group": SbbRadioButtonGroup;
        "sbb-select": SbbSelect;
        "sbb-selection-panel": SbbSelectionPanel;
        "sbb-signet": SbbSignet;
        "sbb-skiplink-list": SbbSkiplinkList;
        "sbb-slider": SbbSlider;
        "sbb-tab-group": SbbTabGroup;
        "sbb-tab-title": SbbTabTitle;
        "sbb-tag": SbbTag;
        "sbb-tag-group": SbbTagGroup;
        "sbb-teaser": SbbTeaser;
        "sbb-teaser-hero": SbbTeaserHero;
        "sbb-time-input": SbbTimeInput;
        "sbb-timetable-barrier-free": SbbTimetableBarrierFree;
        "sbb-timetable-duration": SbbTimetableDuration;
        "sbb-timetable-occupancy": SbbTimetableOccupancy;
        "sbb-timetable-park-and-rail": SbbTimetableParkAndRail;
        "sbb-timetable-row": SbbTimetableRow;
        "sbb-timetable-row-column-headers": SbbTimetableRowColumnHeaders;
        "sbb-timetable-row-day-change": SbbTimetableRowDayChange;
        "sbb-timetable-row-header": SbbTimetableRowHeader;
        "sbb-timetable-transportation-number": SbbTimetableTransportationNumber;
        "sbb-timetable-transportation-time": SbbTimetableTransportationTime;
        "sbb-timetable-travel-hints": SbbTimetableTravelHints;
        "sbb-title": SbbTitle;
        "sbb-toast": SbbToast;
        "sbb-toggle": SbbToggle;
        "sbb-toggle-check": SbbToggleCheck;
        "sbb-toggle-option": SbbToggleOption;
        "sbb-tooltip": SbbTooltip;
        "sbb-tooltip-trigger": SbbTooltipTrigger;
        "sbb-train": SbbTrain;
        "sbb-train-blocked-passage": SbbTrainBlockedPassage;
        "sbb-train-formation": SbbTrainFormation;
        "sbb-train-wagon": SbbTrainWagon;
        "sbb-visual-checkbox": SbbVisualCheckbox;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sbb-accordion": LocalJSX.SbbAccordion & JSXBase.HTMLAttributes<HTMLSbbAccordionElement>;
            "sbb-accordion-item": LocalJSX.SbbAccordionItem & JSXBase.HTMLAttributes<HTMLSbbAccordionItemElement>;
            "sbb-action-group": LocalJSX.SbbActionGroup & JSXBase.HTMLAttributes<HTMLSbbActionGroupElement>;
            "sbb-alert": LocalJSX.SbbAlert & JSXBase.HTMLAttributes<HTMLSbbAlertElement>;
            "sbb-alert-group": LocalJSX.SbbAlertGroup & JSXBase.HTMLAttributes<HTMLSbbAlertGroupElement>;
            "sbb-autocomplete": LocalJSX.SbbAutocomplete & JSXBase.HTMLAttributes<HTMLSbbAutocompleteElement>;
            "sbb-breadcrumb": LocalJSX.SbbBreadcrumb & JSXBase.HTMLAttributes<HTMLSbbBreadcrumbElement>;
            "sbb-breadcrumb-group": LocalJSX.SbbBreadcrumbGroup & JSXBase.HTMLAttributes<HTMLSbbBreadcrumbGroupElement>;
            "sbb-button": LocalJSX.SbbButton & JSXBase.HTMLAttributes<HTMLSbbButtonElement>;
            "sbb-calendar": LocalJSX.SbbCalendar & JSXBase.HTMLAttributes<HTMLSbbCalendarElement>;
            "sbb-card": LocalJSX.SbbCard & JSXBase.HTMLAttributes<HTMLSbbCardElement>;
            "sbb-card-action": LocalJSX.SbbCardAction & JSXBase.HTMLAttributes<HTMLSbbCardActionElement>;
            "sbb-card-badge": LocalJSX.SbbCardBadge & JSXBase.HTMLAttributes<HTMLSbbCardBadgeElement>;
            "sbb-checkbox": LocalJSX.SbbCheckbox & JSXBase.HTMLAttributes<HTMLSbbCheckboxElement>;
            "sbb-checkbox-group": LocalJSX.SbbCheckboxGroup & JSXBase.HTMLAttributes<HTMLSbbCheckboxGroupElement>;
            "sbb-chip": LocalJSX.SbbChip & JSXBase.HTMLAttributes<HTMLSbbChipElement>;
            "sbb-clock": LocalJSX.SbbClock & JSXBase.HTMLAttributes<HTMLSbbClockElement>;
            "sbb-datepicker": LocalJSX.SbbDatepicker & JSXBase.HTMLAttributes<HTMLSbbDatepickerElement>;
            "sbb-datepicker-next-day": LocalJSX.SbbDatepickerNextDay & JSXBase.HTMLAttributes<HTMLSbbDatepickerNextDayElement>;
            "sbb-datepicker-previous-day": LocalJSX.SbbDatepickerPreviousDay & JSXBase.HTMLAttributes<HTMLSbbDatepickerPreviousDayElement>;
            "sbb-datepicker-toggle": LocalJSX.SbbDatepickerToggle & JSXBase.HTMLAttributes<HTMLSbbDatepickerToggleElement>;
            "sbb-dialog": LocalJSX.SbbDialog & JSXBase.HTMLAttributes<HTMLSbbDialogElement>;
            "sbb-divider": LocalJSX.SbbDivider & JSXBase.HTMLAttributes<HTMLSbbDividerElement>;
            "sbb-footer": LocalJSX.SbbFooter & JSXBase.HTMLAttributes<HTMLSbbFooterElement>;
            "sbb-form-error": LocalJSX.SbbFormError & JSXBase.HTMLAttributes<HTMLSbbFormErrorElement>;
            "sbb-form-field": LocalJSX.SbbFormField & JSXBase.HTMLAttributes<HTMLSbbFormFieldElement>;
            "sbb-header": LocalJSX.SbbHeader & JSXBase.HTMLAttributes<HTMLSbbHeaderElement>;
            "sbb-header-action": LocalJSX.SbbHeaderAction & JSXBase.HTMLAttributes<HTMLSbbHeaderActionElement>;
            "sbb-icon": LocalJSX.SbbIcon & JSXBase.HTMLAttributes<HTMLSbbIconElement>;
            "sbb-image": LocalJSX.SbbImage & JSXBase.HTMLAttributes<HTMLSbbImageElement>;
            "sbb-journey-header": LocalJSX.SbbJourneyHeader & JSXBase.HTMLAttributes<HTMLSbbJourneyHeaderElement>;
            "sbb-journey-summary": LocalJSX.SbbJourneySummary & JSXBase.HTMLAttributes<HTMLSbbJourneySummaryElement>;
            "sbb-link": LocalJSX.SbbLink & JSXBase.HTMLAttributes<HTMLSbbLinkElement>;
            "sbb-link-list": LocalJSX.SbbLinkList & JSXBase.HTMLAttributes<HTMLSbbLinkListElement>;
            "sbb-loading-indicator": LocalJSX.SbbLoadingIndicator & JSXBase.HTMLAttributes<HTMLSbbLoadingIndicatorElement>;
            "sbb-logo": LocalJSX.SbbLogo & JSXBase.HTMLAttributes<HTMLSbbLogoElement>;
            "sbb-map-container": LocalJSX.SbbMapContainer & JSXBase.HTMLAttributes<HTMLSbbMapContainerElement>;
            "sbb-menu": LocalJSX.SbbMenu & JSXBase.HTMLAttributes<HTMLSbbMenuElement>;
            "sbb-menu-action": LocalJSX.SbbMenuAction & JSXBase.HTMLAttributes<HTMLSbbMenuActionElement>;
            "sbb-navigation": LocalJSX.SbbNavigation & JSXBase.HTMLAttributes<HTMLSbbNavigationElement>;
            "sbb-navigation-action": LocalJSX.SbbNavigationAction & JSXBase.HTMLAttributes<HTMLSbbNavigationActionElement>;
            "sbb-navigation-list": LocalJSX.SbbNavigationList & JSXBase.HTMLAttributes<HTMLSbbNavigationListElement>;
            "sbb-navigation-marker": LocalJSX.SbbNavigationMarker & JSXBase.HTMLAttributes<HTMLSbbNavigationMarkerElement>;
            "sbb-navigation-section": LocalJSX.SbbNavigationSection & JSXBase.HTMLAttributes<HTMLSbbNavigationSectionElement>;
            "sbb-notification": LocalJSX.SbbNotification & JSXBase.HTMLAttributes<HTMLSbbNotificationElement>;
            "sbb-optgroup": LocalJSX.SbbOptgroup & JSXBase.HTMLAttributes<HTMLSbbOptgroupElement>;
            "sbb-option": LocalJSX.SbbOption & JSXBase.HTMLAttributes<HTMLSbbOptionElement>;
            "sbb-pearl-chain": LocalJSX.SbbPearlChain & JSXBase.HTMLAttributes<HTMLSbbPearlChainElement>;
            "sbb-pearl-chain-time": LocalJSX.SbbPearlChainTime & JSXBase.HTMLAttributes<HTMLSbbPearlChainTimeElement>;
            "sbb-pearl-chain-vertical": LocalJSX.SbbPearlChainVertical & JSXBase.HTMLAttributes<HTMLSbbPearlChainVerticalElement>;
            "sbb-pearl-chain-vertical-item": LocalJSX.SbbPearlChainVerticalItem & JSXBase.HTMLAttributes<HTMLSbbPearlChainVerticalItemElement>;
            "sbb-radio-button": LocalJSX.SbbRadioButton & JSXBase.HTMLAttributes<HTMLSbbRadioButtonElement>;
            "sbb-radio-button-group": LocalJSX.SbbRadioButtonGroup & JSXBase.HTMLAttributes<HTMLSbbRadioButtonGroupElement>;
            "sbb-select": LocalJSX.SbbSelect & JSXBase.HTMLAttributes<HTMLSbbSelectElement>;
            "sbb-selection-panel": LocalJSX.SbbSelectionPanel & JSXBase.HTMLAttributes<HTMLSbbSelectionPanelElement>;
            "sbb-signet": LocalJSX.SbbSignet & JSXBase.HTMLAttributes<HTMLSbbSignetElement>;
            "sbb-skiplink-list": LocalJSX.SbbSkiplinkList & JSXBase.HTMLAttributes<HTMLSbbSkiplinkListElement>;
            "sbb-slider": LocalJSX.SbbSlider & JSXBase.HTMLAttributes<HTMLSbbSliderElement>;
            "sbb-tab-group": LocalJSX.SbbTabGroup & JSXBase.HTMLAttributes<HTMLSbbTabGroupElement>;
            "sbb-tab-title": LocalJSX.SbbTabTitle & JSXBase.HTMLAttributes<HTMLSbbTabTitleElement>;
            "sbb-tag": LocalJSX.SbbTag & JSXBase.HTMLAttributes<HTMLSbbTagElement>;
            "sbb-tag-group": LocalJSX.SbbTagGroup & JSXBase.HTMLAttributes<HTMLSbbTagGroupElement>;
            /**
             * Generalized Teaser - for displaying an image, title and paragraph
             */
            "sbb-teaser": LocalJSX.SbbTeaser & JSXBase.HTMLAttributes<HTMLSbbTeaserElement>;
            "sbb-teaser-hero": LocalJSX.SbbTeaserHero & JSXBase.HTMLAttributes<HTMLSbbTeaserHeroElement>;
            "sbb-time-input": LocalJSX.SbbTimeInput & JSXBase.HTMLAttributes<HTMLSbbTimeInputElement>;
            "sbb-timetable-barrier-free": LocalJSX.SbbTimetableBarrierFree & JSXBase.HTMLAttributes<HTMLSbbTimetableBarrierFreeElement>;
            "sbb-timetable-duration": LocalJSX.SbbTimetableDuration & JSXBase.HTMLAttributes<HTMLSbbTimetableDurationElement>;
            "sbb-timetable-occupancy": LocalJSX.SbbTimetableOccupancy & JSXBase.HTMLAttributes<HTMLSbbTimetableOccupancyElement>;
            "sbb-timetable-park-and-rail": LocalJSX.SbbTimetableParkAndRail & JSXBase.HTMLAttributes<HTMLSbbTimetableParkAndRailElement>;
            "sbb-timetable-row": LocalJSX.SbbTimetableRow & JSXBase.HTMLAttributes<HTMLSbbTimetableRowElement>;
            "sbb-timetable-row-column-headers": LocalJSX.SbbTimetableRowColumnHeaders & JSXBase.HTMLAttributes<HTMLSbbTimetableRowColumnHeadersElement>;
            "sbb-timetable-row-day-change": LocalJSX.SbbTimetableRowDayChange & JSXBase.HTMLAttributes<HTMLSbbTimetableRowDayChangeElement>;
            "sbb-timetable-row-header": LocalJSX.SbbTimetableRowHeader & JSXBase.HTMLAttributes<HTMLSbbTimetableRowHeaderElement>;
            "sbb-timetable-transportation-number": LocalJSX.SbbTimetableTransportationNumber & JSXBase.HTMLAttributes<HTMLSbbTimetableTransportationNumberElement>;
            "sbb-timetable-transportation-time": LocalJSX.SbbTimetableTransportationTime & JSXBase.HTMLAttributes<HTMLSbbTimetableTransportationTimeElement>;
            "sbb-timetable-travel-hints": LocalJSX.SbbTimetableTravelHints & JSXBase.HTMLAttributes<HTMLSbbTimetableTravelHintsElement>;
            "sbb-title": LocalJSX.SbbTitle & JSXBase.HTMLAttributes<HTMLSbbTitleElement>;
            "sbb-toast": LocalJSX.SbbToast & JSXBase.HTMLAttributes<HTMLSbbToastElement>;
            "sbb-toggle": LocalJSX.SbbToggle & JSXBase.HTMLAttributes<HTMLSbbToggleElement>;
            "sbb-toggle-check": LocalJSX.SbbToggleCheck & JSXBase.HTMLAttributes<HTMLSbbToggleCheckElement>;
            "sbb-toggle-option": LocalJSX.SbbToggleOption & JSXBase.HTMLAttributes<HTMLSbbToggleOptionElement>;
            "sbb-tooltip": LocalJSX.SbbTooltip & JSXBase.HTMLAttributes<HTMLSbbTooltipElement>;
            "sbb-tooltip-trigger": LocalJSX.SbbTooltipTrigger & JSXBase.HTMLAttributes<HTMLSbbTooltipTriggerElement>;
            "sbb-train": LocalJSX.SbbTrain & JSXBase.HTMLAttributes<HTMLSbbTrainElement>;
            "sbb-train-blocked-passage": LocalJSX.SbbTrainBlockedPassage & JSXBase.HTMLAttributes<HTMLSbbTrainBlockedPassageElement>;
            "sbb-train-formation": LocalJSX.SbbTrainFormation & JSXBase.HTMLAttributes<HTMLSbbTrainFormationElement>;
            "sbb-train-wagon": LocalJSX.SbbTrainWagon & JSXBase.HTMLAttributes<HTMLSbbTrainWagonElement>;
            "sbb-visual-checkbox": LocalJSX.SbbVisualCheckbox & JSXBase.HTMLAttributes<HTMLSbbVisualCheckboxElement>;
        }
    }
}

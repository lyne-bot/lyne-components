@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

// Displays the action item's text and corrects spacings.
$breakpoints: 'zero', 'micro', 'small', 'medium', 'large', 'wide', 'ultra';

:host {
  --sbb-header-action-padding-inline: 0;
  --sbb-header-action-color: var(--sbb-color-black-default);
  --sbb-header-action-background-color: transparent;
  --sbb-header-action-min-height: var(--sbb-size-button-m-min-height);
  --sbb-header-action-min-width: var(--sbb-header-action-min-height);
  --sbb-header-action-transition-duration: var(--sbb-animation-duration-2x);
  --sbb-header-action-transition-easing: var(--sbb-animation-easing);
  --sbb-header-action-border-color: transparent;
  --sbb-header-action-background-inset: 0;
  --sbb-header-action-translate-y: 0;
  --sbb-header-action-gap: var(--sbb-spacing-fixed-2x);

  @include sbb.if-forced-colors {
    --sbb-header-action-border-color: CanvasText;
  }

  // The variable is assigned to the property in the sbb-header component if it is
  // the first element in the header and needs left offset correction (see sbb-header.scss).
  // To avoid duplicated css definitions, the value itself is assigned here in
  // sbb-header-action instead of sbb-header.
  //
  // Move it left by distance between button's left side and the start of the icon.
  // As result, the icon should be aligned with the left side of the page wrapper.
  --sbb-header-first-item-margin-inline-start: calc(
    -0.5 * (var(--sbb-header-action-min-width) - var(--sbb-size-icon-ui-small))
  );

  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize css of several frameworks.
  outline: none !important;
}

:host([data-expanded]) {
  --sbb-header-action-padding-inline: var(--sbb-spacing-fixed-5x);

  // If expanded, move it left by left padding.
  // As result, the icon should be aligned with the left side of the page wrapper.
  --sbb-header-first-item-margin-inline-start: calc(-1 * var(--sbb-header-action-padding-inline));
}

@include sbb.hover-mq($hover: true) {
  :host(:hover:not(:active, [data-active], [aria-expanded='true'])) {
    --sbb-header-action-background-color: var(--sbb-color-milk-default);
    --sbb-header-action-translate-y: #{sbb.px-to-rem-build(-1)};
    --sbb-header-action-background-inset: calc(var(--sbb-border-width-2x) * -1);

    @include sbb.if-forced-colors {
      --sbb-header-action-border-color: Highlight;
    }
  }
}

:host(:is(:active, [data-active])) {
  --sbb-header-action-background-color: var(--sbb-color-cloud-default);

  @include sbb.if-forced-colors {
    --sbb-header-action-border-color: Highlight;
  }
}

:host([role='button']) {
  @include sbb.if-forced-colors {
    --sbb-header-action-color: ButtonText;
  }
}

.sbb-header-action {
  @include sbb.text-inherit;

  display: flex;
  position: relative;
  align-items: center;
  justify-content: center;
  color: var(--sbb-header-action-color);
  text-decoration: none;
  min-height: var(--sbb-header-action-min-height);
  min-width: var(--sbb-header-action-min-width);
  padding-inline: var(--sbb-header-action-padding-inline);
  cursor: pointer;
  user-select: none;

  &::before {
    position: absolute;
    content: '';
    inset: var(--sbb-header-action-background-inset);
    border-radius: var(--sbb-border-radius-infinity);
    background-color: var(--sbb-header-action-background-color);
    transition-duration: var(--sbb-header-action-transition-duration);
    transition-timing-function: var(--sbb-header-action-transition-easing);
    transition-property: inset, background-color;
    border: var(--sbb-border-width-1x) solid var(--sbb-header-action-border-color);

    @include sbb.if-forced-colors {
      border-width: var(--sbb-border-width-2x);
    }

    // Hide focus outline when focus origin is mouse or touch. This is being used in tooltip as a workaround.
    :host(:focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) & {
      @include sbb.focus-outline;
    }
  }
}

.sbb-header-action__wrapper {
  display: flex;
  align-items: center;
  gap: var(--sbb-header-action-gap);
  white-space: nowrap;
  transform: translateY(var(--sbb-header-action-translate-y));
  transition: transform var(--sbb-header-action-transition-duration)
    var(--sbb-header-action-transition-easing);
  will-change: transform;
}

.sbb-header-action__icon {
  // Set stroke on header icons
  --sbb-icon-svg-stroke-color: currentcolor;
  --sbb-icon-svg-stroke-width: 1px;

  min-width: var(--sbb-size-icon-ui-small);
  min-height: var(--sbb-size-icon-ui-small);
  line-height: 0;
}

.sbb-header-action__text {
  @include sbb.text-xs--bold;

  display: flex;

  :host(:not([data-expanded])) & {
    @include sbb.screen-reader-only;
  }

  // This is a workaround to fix styling after orientation change on iOS.
  // If the display value changes comparing to the base state (display: flex),
  // it re-renders and displays everything correctly.
  // Without this workaround, elements are overlapping each other.
  :host([data-expanded]) & {
    display: block;
  }
}

.sbb-header-action__opens-in-new-window {
  @include sbb.screen-reader-only;
}

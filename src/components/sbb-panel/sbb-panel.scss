// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include host-component-properties;

:host {
  --panel-opacity: 0.9;
  --panel-padding-inline: var(--spacing-responsive-m-small);
  --panel-padding-block: var(--spacing-responsive-s-small);
  --background-color: var(--color-red-default);
  --text-margin-block-end: var(--spacing-fixed-6x);

  // TODO: missing design tokens
  --panel-width: #{px-to-rem-build(223)};
  --panel-height: #{px-to-rem-build(167)};
  --triangle-height: #{px-to-rem-build(33)};

  @include mq($from: medium) {
    --panel-padding-inline: var(--spacing-responsive-m-medium);
    --panel-padding-block: var(--spacing-responsive-s-medium);

    // TODO: missing design tokens
    --panel-width: #{px-to-rem-build(321)};
    --panel-height: #{px-to-rem-build(240.11)};
    --triangle-height: #{px-to-rem-build(45)};
  }

  @include mq($from: large) {
    --panel-padding-inline: var(--spacing-responsive-m-wide);
    --panel-padding-block: var(--spacing-responsive-s-wide);

    // TODO: missing design tokens
    --panel-width: #{px-to-rem-build(428)};
    --panel-height: #{px-to-rem-build(320.38)};
    --triangle-height: #{px-to-rem-build(65)};
  }

  position: relative;
  opacity: var(--panel-opacity);
  padding-block-start: var(--triangle-height);
  padding-block-end: var(--triangle-height);
}

.panel {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: var(--panel-width);
  min-height: var(--panel-height);
  padding-inline-start: var(--panel-padding-inline);
  padding-inline-end: var(--panel-padding-inline);
  padding-block-start: var(--panel-padding-block);
  padding-block-end: var(--panel-padding-block);
  background-color: var(--background-color);

  @include ifForcedColors {
    border: #{px-to-rem-build(1)} solid CanvasText;
  }
}

.panel::before,
.panel::after {
  content: '';
  position: absolute;
  width: 0;
  height: 0;
  left: 0;
  border-inline-end: var(--panel-width) solid transparent;
  z-index: 0;

  @include ifForcedColors {
    display: none;
  }
}

.panel::before {
  top: calc(-1 * var(--triangle-height));
  border-block-end: var(--triangle-height) solid var(--background-color);
}

.panel::after {
  bottom: calc(-1 * var(--triangle-height));
  border-block-start: var(--triangle-height) solid var(--background-color);
}

::slotted( [slot="text"] ) {
  @include text-xxl--regular();
  color: var(--color-white-default);
  margin-block-start: 0;
  margin-block-end: var(--text-margin-block-end);
}

@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-toast-z-index: var(--sbb-overlay-z-index);
  --sbb-toast-max-width: #{sbb.px-to-rem-build(400)};
  --sbb-toast-animation-duration: var(--sbb-animation-duration-6x);
  --sbb-toast-animation-timing-function: ease;
  --sbb-toast-color: var(--sbb-color-milk-default);
  --sbb-toast-background-color: var(--sbb-color-midnight-default);
  --sbb-toast-margin: var(--sbb-spacing-responsive-s);
  --sbb-toast-padding-block: var(--sbb-spacing-responsive-xxxs);
  --sbb-toast-padding-inline: var(--sbb-spacing-responsive-xs);
  --sbb-toast-border-radius: var(--sbb-border-radius-4x);
}

:host([disable-animation]:not([disable-animation='false'])) {
  --sbb-toast-animation-duration: 0s;
}

.sbb-toast__overlay-container {
  position: fixed;
  pointer-events: none;
  inset: 0;
  display: flex;

  :host([data-state='closed']) & {
    display: none;
  }

  :host([position='bottom-left']) &,
  :host([position='bottom-start']) & {
    justify-content: flex-start;
    align-items: flex-end;
  }

  :host([position='bottom-center']) & {
    justify-content: center;
    align-items: flex-end;
  }

  :host([position='bottom-right']) &,
  :host([position='bottom-end']) & {
    justify-content: flex-end;
    align-items: flex-end;
  }

  :host([position='top-left']) &,
  :host([position='top-start']) & {
    justify-content: flex-start;
    align-items: flex-start;
  }

  :host([position='top-center']) & {
    justify-content: center;
    align-items: flex-start;
  }

  :host([position='top-right']) &,
  :host([position='top-end']) & {
    justify-content: flex-end;
    align-items: flex-start;
  }
}

.sbb-toast {
  z-index: var(--sbb-toast-z-index);
  pointer-events: auto;
  margin: var(--sbb-toast-margin);
  padding-block: var(--sbb-toast-padding-block);
  padding-inline: var(--sbb-toast-padding-inline);
  border-radius: var(--sbb-toast-border-radius);
  max-width: var(--sbb-toast-max-width);
  display: flex;
  color: var(--sbb-toast-color);
  background-color: var(--sbb-toast-background-color);

  :host([data-state='opening']) & {
    animation: {
      name: open;
      duration: var(--sbb-toast-animation-duration);
      timing-function: var(--sbb-toast-animation-timing-function);
    }
  }

  :host([data-state='closing']) & {
    animation: {
      name: close;
      duration: var(--sbb-toast-animation-duration);
      timing-function: var(--sbb-toast-animation-timing-function);
    }
  }
}

.sbb-toast__icon {
  margin-inline-end: var(--sbb-spacing-fixed-2x);

  :host(:not([data-has-icon])) & {
    display: none;
  }
}

.sbb-toast__content {
  @include sbb.title-6($exclude-spacing: true);

  flex: 1 1 0;
}

.sbb-toast__action {
  position: relative;

  // Since the action button has an absolute position, we have to "reserve" space
  min-width: #{sbb.px-to-rem-build(40)};

  :host(:not([data-has-action])) & {
    display: none;
  }
}

::slotted(sbb-button),
.sbb-toast__action-button {
  margin-inline: var(--sbb-spacing-fixed-2x);
  position: absolute;
  top: calc(var(--sbb-spacing-responsive-xxxs) * -1 / 2);
}

::slotted(sbb-link) {
  margin-inline-start: var(--sbb-spacing-fixed-4x);
}

@keyframes open {
  from {
    visibility: hidden;
    opacity: 0;
    transform: translateY(var(--sbb-spacing-fixed-2x));
  }

  to {
    visibility: visible;
    opacity: 1;
    transform: translateY(0%);
  }
}

@keyframes close {
  from {
    visibility: visible;
    opacity: 1;
    transform: translateY(0%);
  }

  to {
    visibility: hidden;
    opacity: 0;
    transform: translateY(var(--sbb-spacing-fixed-2x));
  }
}

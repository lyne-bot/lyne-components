@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

// Fixes the gap between the origin and the overlay by creating conjuction
// corners based on the origin element border radius
@include sbb.overlay-gap-fix;

:host {
  @include sbb.options-panel-overlay-variables;

  --sbb-options-panel-internal-z-index: var(--sbb-autocomplete-z-index, var(--sbb-overlay-z-index));
}

:host([data-state='closed']) {
  --sbb-options-panel-visibility: hidden;
}

:host([data-state='opening']) {
  --sbb-options-panel-animation-name: open;
}

:host([data-state='closing']) {
  --sbb-options-panel-animation-name: close;
}

:host([data-state='opened']),
:host([data-state='opening']) {
  --sbb-options-panel-gap-fix-opacity: 1;
}

:host([data-options-panel-position='below']) {
  --sbb-options-panel-animation-transform: translateY(
    calc((var(--sbb-options-panel-origin-height) / 2) * -1)
  );
}

:host([data-options-panel-position='above']) {
  --sbb-options-panel-options-border-radius: var(--sbb-options-panel-border-radius)
    var(--sbb-options-panel-border-radius) 0 0;
  --sbb-options-panel-gap-fix-top: var(--sbb-options-panel-max-height);
  --sbb-options-panel-gap-fix-transform: rotate(180deg);
  --sbb-options-panel-animation-transform: translateY(
    calc(var(--sbb-options-panel-origin-height) / 2)
  );
}

:host([disable-animation]:not([disable-animation='false'])) {
  --sbb-options-panel-animation-duration: 0s;
}

:host([preserve-icon-space]:not([preserve-icon-space='false'])) {
  --sbb-option-icon-container-display: block;
}

::slotted(sbb-divider) {
  margin-block: var(--sbb-spacing-fixed-3x);
}

.sbb-autocomplete__container {
  @include sbb.options-panel-overlay-container;
}

.sbb-autocomplete__gap-fix {
  @include sbb.options-panel-overlay-gap;
}

.sbb-autocomplete__panel {
  @include sbb.options-panel-overlay;

  :host([data-state='opened']) &,
  :host([data-state='opening']) & {
    @include sbb.shadow-level-5-hard;
  }

  :host([data-options-panel-position='below']) & {
    inset-block-start: calc(
      var(--sbb-options-panel-position-y) - var(--sbb-options-panel-origin-height)
    );

    &::before {
      display: block;
    }
  }

  :host([data-options-panel-position='above']) & {
    &::after {
      display: block;
    }
  }

  :host(:is([data-state='opened'], [data-state='opening'])[data-option-panel-origin-borderless]) & {
    &::before,
    &::after {
      @include sbb.shadow-level-5-hard;
    }
  }
}

.sbb-autocomplete__wrapper {
  overflow: hidden;
}

.sbb-autocomplete__options {
  @include sbb.scrollbar;
  @include sbb.optionsOverlay;

  @include sbb.if-forced-colors {
    border: var(--sbb-border-width-1x) solid CanvasText;
    border-top: none;
  }
}

@keyframes open {
  from {
    transform: var(--sbb-options-panel-animation-transform);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes close {
  from {
    transform: translateY(0);
    opacity: 1;
  }

  to {
    transform: var(--sbb-options-panel-animation-transform);
    opacity: 0;
  }
}

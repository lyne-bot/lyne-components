@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-overlay-position-x: 0;
  --sbb-overlay-position-y: 0;
  --sbb-overlay-max-height: calc(85vh - var(--sbb-spacing-fixed-8x));
  --sbb-overlay-min-height: #{sbb.px-to-rem-build(120)};
  --sbb-overlay-width: fit-content;
  --sbb-overlay-border-radius: var(--sbb-border-radius-4x);
  --sbb-overlay-translate-y: 0;
  --sbb-overlay-transition-origin: center;
  --sbb-overlay-transition-duration: var(--sbb-animation-duration-2x);
}

:host(:not([data-state='closed'])) {
  --sbb-menu-inset: 0;
}

:host([data-autocomplete-position='below']) {
  --sbb-overlay-translate-y: calc(-1 * var(--sbb-overlay-origin-height));
  --sbb-overlay-transition-origin: top;
}

:host([data-autocomplete-position='above']) {
  --sbb-overlay-translate-y: var(--sbb-overlay-origin-height);
  --sbb-overlay-transition-origin: bottom;
}

:host([disable-animation]:not([disable-animation='false'])) {
  --sbb-overlay-transition-duration: 0s;
}

::slotted(sbb-divider) {
  margin-block: var(--sbb-spacing-fixed-3x);
}

.sbb-autocomplete__backdrop {
  position: fixed;
  pointer-events: none;
  inset: var(--sbb-menu-inset, unset);
  z-index: var(--sbb-autocomplete-z-index, var(--sbb-overlay-z-index));
}

.sbb-autocomplete__panel {
  display: block;
  position: absolute;
  padding: 0;
  margin: 0;
  background-color: transparent;
  border: none;
  border-radius: var(--sbb-overlay-border-radius);
  top: var(--sbb-overlay-position-y);
  left: var(--sbb-overlay-position-x);
  width: var(--sbb-overlay-width);
  visibility: visible;
  transition: box-shadow var(--sbb-overlay-transition-duration) var(--sbb-animation-easing);

  &[data-open]:not([data-open='false']) {
    pointer-events: all;
  }

  :host([data-state='opening']) & {
    animation: {
      name: open;
      duration: var(--sbb-overlay-transition-duration);
      timing-function: var(--sbb-animation-easing);
    }
  }

  :host([data-state='closing']) & {
    animation: {
      name: close;
      duration: var(--sbb-overlay-transition-duration);
      timing-function: var(--sbb-animation-easing);
    }
  }

  :host([data-state='opened']) & {
    @include sbb.shadow-level-5-hard;
  }

  :host([data-state='closed']) & {
    visibility: hidden;
  }

  :host([data-autocomplete-position='below']) & {
    transform: translateY(calc(-1 * var(--sbb-overlay-origin-height)));

    &::before {
      content: '';
      display: block;
      position: relative;
      width: 100%;
      height: var(--sbb-overlay-origin-height);
      background-color: transparent;
      border-radius: var(--sbb-overlay-border-radius);
      pointer-events: none;
    }
  }

  :host([data-autocomplete-origin-borderless='true'][data-autocomplete-position='below'])
    &::before {
    @include sbb.shadow-level-5-hard;
  }

  :host([data-autocomplete-position='above']) & {
    transform: translateY(var(--sbb-overlay-origin-height));

    &::after {
      content: '';
      display: block;
      position: relative;
      width: 100%;
      height: var(--sbb-overlay-origin-height);
      background-color: transparent;
      border-radius: var(--sbb-overlay-border-radius);
      pointer-events: none;
    }
  }

  :host([data-autocomplete-origin-borderless='true'][data-autocomplete-position='above']) &::after {
    @include sbb.shadow-level-5-hard;
  }
}

.sbb-autocomplete__options {
  background-color: var(--sbb-color-white-default);
  padding-block: var(--sbb-spacing-fixed-3x);
  padding-inline: 0;
  border-radius: var(--sbb-overlay-border-radius);
  max-height: var(--sbb-overlay-max-height);
  min-height: var(--sbb-overlay-min-height);
  overflow-y: auto;
}

@keyframes open {
  from {
    transform: scaleY(0) translateY(var(--sbb-overlay-translate-y));
    transform-origin: var(--sbb-overlay-transition-origin);
  }

  to {
    transform: scaleY(1) translateY(var(--sbb-overlay-translate-y));
    transform-origin: var(--sbb-overlay-transition-origin);
  }
}

@keyframes close {
  from {
    transform: scaleY(1) translateY(var(--sbb-overlay-translate-y));
    transform-origin: var(--sbb-overlay-transition-origin);
  }

  to {
    transform: scaleY(0) translateY(var(--sbb-overlay-translate-y));
    transform-origin: var(--sbb-overlay-transition-origin);
  }
}

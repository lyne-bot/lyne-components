@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-tag-border-radius: var(--sbb-border-radius-16x);
  --sbb-tag-background-color: var(--sbb-color-white-default);
  --sbb-tag-border-color: var(--sbb-color-cloud-default);
  --sbb-tag-border-width: var(--sbb-border-width-1x);
  --sbb-tag-text-color: var(--sbb-color-charcoal-default);
  --sbb-tag-amount-color: var(--sbb-color-metal-default);
  --sbb-tag-height: #{sbb.px-to-rem-build(36)};
  --sbb-tag-inset: 0;
  --sbb-tag-transition: translateY(0);
  --sbb-tag-animation-duration: var(--sbb-animation-duration-2x);
  --sbb-tag-animation-easing: var(--sbb-animation-easing);

  @include sbb.mq($from: medium) {
    --sbb-tag-height: #{sbb.px-to-rem-build(40)};
  }

  display: inline-block;
  max-width: 100%;
  -webkit-tap-highlight-color: transparent;
}

// Active state
:host([checked]) {
  --sbb-tag-border-color: var(--sbb-color-charcoal-default);
  --sbb-tag-border-width: var(--sbb-border-width-2x);

  @include sbb.if-forced-colors {
    --sbb-tag-border-color: Highlight;
  }
}

:host([disabled]) {
  --sbb-tag-text-color: var(--sbb-color-platinum-default);
  --sbb-tag-amount-color: var(--sbb-color-platinum-default);
  --sbb-tag-background-color: var(--sbb-color-milk-default);
  --sbb-tag-border-color: transparent;

  @include sbb.if-forced-colors {
    --sbb-tag-text-color: GrayText;
    --sbb-tag-amount-color: GrayText;
    --sbb-tag-border-color: GrayText;
  }
}

:host([checked][disabled]) {
  --sbb-tag-border-color: var(--sbb-color-platinum-default);
}

.sbb-tag__wrapper {
  position: relative;
  user-select: none;

  // Pressed state
  &:active {
    --sbb-tag-background-color: var(--sbb-color-milk-default);
    --sbb-tag-border-color: var(--sbb-color-iron-default);
    --sbb-tag-border-width: var(--sbb-border-width-2x);
    --sbb-tag-text-color: var(--sbb-color-iron-default);
  }

  :host([disabled]) & {
    cursor: unset;
    pointer-events: none;

    &::after {
      content: '';
      inset: 50% var(--sbb-spacing-fixed-5x);
      border-block-end: var(--sbb-border-width-2x) solid var(--sbb-color-platinum-default);
      @include sbb.absolute-center-y;
    }
  }

  /* stylelint-disable plugin/stylelint-bem-namics */
  :host(:not([disabled])) &:hover {
    // If the the device can hover over elements with ease
    @include sbb.hover-mq($hover: true) {
      --sbb-tag-background-color: var(--sbb-color-milk-default);
      --sbb-tag-inset: calc(var(--sbb-border-width-2x) * -1);
      --sbb-tag-transition: translateY(calc(var(--sbb-border-width-1x) * -1));
    }
  }
  /* stylelint-enable plugin/stylelint-bem-namics */

  &::before {
    content: '';
    position: absolute;
    inset: var(--sbb-tag-inset);
    background-color: var(--sbb-tag-background-color);
    border: var(--sbb-tag-border-width) solid var(--sbb-tag-border-color);
    border-radius: var(--sbb-tag-border-radius);
    transition-duration: var(--sbb-tag-animation-duration);
    transition-timing-function: var(--sbb-tag-animation-easing);
    transition-property: inset, background-color, border-color, box-shadow;
  }
}

.sbb-tag {
  @include sbb.text-xs--bold;

  position: relative;
  margin: 0;
  display: flex;
  align-items: center;
  height: var(--sbb-tag-height);
  gap: var(--sbb-spacing-fixed-2x);
  padding-inline: var(--sbb-spacing-fixed-5x);
  cursor: pointer;
  border-radius: var(--sbb-tag-border-radius);
  color: var(--sbb-tag-text-color);
  transition: color var(--sbb-tag-animation-duration) var(--sbb-tag-animation-easing);
}

.sbb-tag__icon {
  display: flex;
  align-items: center;
  height: calc(var(--sbb-typo-line-height-body-text) * 1em);
}

.sbb-tag__text {
  @include sbb.ellipsis;
}

.sbb-tag__amount {
  @include sbb.text-xs--regular;

  color: var(--sbb-tag-amount-color);
}

.sbb-tag--shift {
  transition: transform var(--sbb-tag-animation-duration) var(--sbb-tag-animation-easing);
  transform: var(--sbb-tag-transition);
  will-change: transform;
}

input[type='checkbox'] {
  @include sbb.invisible-container-overlay;
}

input[type='checkbox']:focus-visible + .sbb-tag::before {
  @include sbb.focus-outline;
}

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

:host {
  display: block;

  // TODO: missing design tokens

  // velocity is based on --typo-scale-default as a distance. so a
  // --expand-transition of 100ms physically means: 100ms / 1rem
  --expand-transtion-velocity: 20;

  --chevron-transition-timing-function: ease-in;
  --chevron-transition-duration: 200ms;
  --expand-transition-timing-function: cubic-bezier(0.785, 0.135, 0.15, 0.86);

  // this is just the fallback transition duration. the definitive duration
  // will be set via sbb-accordion-item.tsx before opening/expanding
  --expand-transition-duration: 150ms;
  --header-transition-timing-function: ease-in;
  --header-transition-duration: 180ms;

  --color-heading-hover: var(--color-anthracite-default);
  --color-default: var(--color-white-default);
  --color-black: var(--color-black-default);
  --icon-size: var(--size-icon-ui-small);
  --header-padding-block: var(--spacing-fixed-5x);
  --icon-padding-inline-end: var(--spacing-fixed-3x);
  --body-padding-block: var(--spacing-fixed-5x);
  --border-color: var(--color-cloud-default);
}

.accordion-item {
  width: 100%;
  background-color: var(--color-default);
  border-radius: pxToRem(var(--border-radius-small));

  // no support in safari for border-start-start-radius etc.
  border-top-left-radius: pxToRem(var(--border-radius-start-start));
  border-top-right-radius: pxToRem(var(--border-radius-start-end));
  border-bottom-left-radius: pxToRem(var(--border-radius-end-start));
  border-bottom-right-radius: pxToRem(var(--border-radius-end-end));
  border-block-end: pxToRem(var(--border-width)) solid var(--border-color);
  transition: background-color var(--header-transition-duration) var(--header-transition-timing-function),
              color var(--header-transition-duration) var(--header-transition-timing-function);

  :host(.focus-visible) & {
    @include focusOutline;
  }
}

.accordion-item__heading {
  display: block;
  margin: 0;
}

.accordion-item__button {
  @include buttonReset;
  @include text-m--regular();
  width: 100%;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  padding-block-start: pxToRem(var(--header-padding-block));
  padding-block-end: pxToRem(var(--header-padding-block));
  padding-inline-start: pxToRem(var(--header-padding-inline));
  padding-inline-end: pxToRem(var(--header-padding-inline));
  color: inherit;
}

.accordion-item:not(.accordion-item--disabled):hover,
.accordion-item:not(.accordion-item--disabled):focus-within {
  color: var(--color-heading-hover);
  background-color: var(--color-background-hover);

  .accordion-item__body {
    color: var(--color-black);
  }
}

.accordion-item__icon {
  color: currentColor;
  flex-shrink: 0;
  flex-grow: 0;
}

::slotted(svg[slot='icon']) {
  display: block;
  height: pxToRem(var(--icon-size));
  margin-inline-end: pxToRem(var(--icon-padding-inline-end));
  fill: currentColor;
}

.accordion-item__title {
  display: flex;
  flex-direction: column;
  flex: 1 1 auto;
  text-align: start;
  justify-content: center;
}

.accordion-item__chevron {
  flex-basis: pxToRem(var(--icon-size));
  flex-shrink: 0;
  flex-grow: 0;
  height: pxToRem(var(--icon-size));
  padding-inline-start: pxToRem(var(--header-padding-inline));
}

.accordion-item__chevron svg {
  display: block;
  transition: transform var(--chevron-transition-duration) var(--chevron-transition-timing-function);
  transform-style: preserve-3d;
  fill: currentColor;
}

.accordion-item__chevron--rotate svg {
  transform: rotate3d(1, 0, 0, 180deg);
}

.accordion-item__body {
  font-family: var(--typo-type-face-sbb-roman); // TODO remove once generic styles will be in
  box-sizing: border-box;
  overflow: hidden;
  transition-property: height, opacity;
  transition-duration: var(--expand-transition-duration);
  transition-timing-function: var(--expand-transition-timing-function);
}

.accordion-item--closed .accordion-item__body {
  display: none;
  opacity: 0;
}

.accordion-item--has-icon .accordion-item__body-inner {
  padding-inline-start: calc(#{pxToRem(var(--body-padding-inline))} + #{pxToRem(var(--icon-size))} + #{pxToRem(var(--icon-padding-inline-end))});
}

.accordion-item__body-inner {
  box-sizing: border-box;
  padding-inline-start: pxToRem(var(--body-padding-inline));
  padding-inline-end: pxToRem(var(--body-padding-inline));
  padding-block-end: pxToRem(var(--body-padding-block));
}

// style first slot child
::slotted(*:first-of-type[slot='content']) {
  padding-top: 0;
  padding-block-start: 0;
  margin-block-start: 0;
  margin-top: 0;
}

// style last slot child
::slotted(*:last-of-type[slot='content']) {
  padding-bottom: 0;
  padding-block-end: 0;
  margin-block-end: 0;
  margin-bottom: 0;
}

// Forced Colors
@include ifForcedColors() {
  .accordion-item--open .accordion-item__button,
  .accordion-item:not(.accordion-item--disabled):hover,
  .accordion-item:not(.accordion-item--disabled):focus-within {
    .accordion-item__chevron svg,
    ::slotted(svg[slot='icon']) {
      color: inherit;
    }

    color: HighlightText;

  }

  .accordion-item {
    border: pxToRem(1) solid CanvasText;
  }

  .accordion-item__chevron svg,
  ::slotted(svg[slot='icon']) {
    color: ButtonText;
  }

}

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

@mixin dot {
  content: '';
  position: absolute;
  width: var(--dot-size);
  height: var(--dot-size);
  border-radius: 100%;
}

:host {
  display: block;

  --dot-size-large: #{pxToRemBuild(10)};
  --dot-size-small: #{pxToRemBuild(8)};
  --border-width: var(--sbb-border-width-2x);
  --spacing-small: var(--sbb-spacing-fixed-1x);
  --color-white: var(--sbb-color-white-default);
  --color-default: var(--sbb-color-black-default);
  --color-current-location: var(--sbb-color-red-default);
  --color-current-location-dark: var(--sbb-color-red150-default);
  --color-cancellation: var(--sbb-color-red-default);
  --color-past: var(--sbb-color-metal-default);
}

.pearl-chain {
  position: relative;
  box-sizing: border-box;
  display: flex;
  flex-wrap: nowrap;
  color: var(--sbb-color-default);
  width: 100%;
  padding-block-start: calc((var(--dot-size-large) - var(--border-width)) / 2);
  padding-block-end: calc((var(--dot-size-large) - var(--border-width)) / 2);
  padding-inline-end: var(--dot-size-large);
}

// first and last dot
.pearl-chain:before,
.pearl-chain:after {
  --dot-size: var(--dot-size-large);
  @include dot;
  background-color: currentColor;
  top: 0;
  z-index: 2;

  @include ifForcedColors {
    background-color: CanvasText;
  }
}

.pearl-chain:before {
  left: 0;
}

.pearl-chain:after {
  right: 0;
}

.pearl-chain.pearl-chain--past:before,
.pearl-chain.pearl-chain--past:after {
  @include ifForcedColors {
    background-color: GrayText;
  }
}

.pearl-chain--departure-cancellation:before,
.pearl-chain--arrival-cancellation:after {
  color: var(--color-cancellation);

  @include ifForcedColors {
    background-color: ActiveText;
  }
}

.pearl-chain--departure-cancellation.pearl-chain--past:before,
.pearl-chain--arrival-cancellation.pearl-chain--past:after {
  color: var(--color-past);

  @include ifForcedColors {
    color: GrayText;
  }
}

.pearl-chain--past {
  color: var(--color-past);

  @include ifForcedColors {
    color: GrayText;
  }
}

.pearl-chain__leg {
  flex-shrink: 0;
  flex-grow: 0;
  position: relative;
  height: var(--border-width);

  @include ifForcedColors {
    color: CanvasText;
  }
}

// dot on leg
.pearl-chain__leg:not(:first-child):before {
  --dot-size: var(--dot-size-small);
  @include dot;

  box-sizing: border-box;
  top: calc(var(--dot-size) / -2 + var(--border-width) / 2);
  left: 0;
  background-color: var(--color-white);
  border: var(--border-width) solid currentColor;
  z-index: 2;

  @include ifForcedColors {
    .pearl-chain--past & {
      border-color: GrayText;
    }
  }
}

// line on leg
.pearl-chain__leg:after {
  content: '';
  position: absolute;
  top: 0;
  right: var(--spacing-small);
  bottom: 0;
  left: 0;
  background-color: currentColor;
  border-radius: var(--border-width);
  z-index: 1;

  @include ifForcedColors {
    background-color: CanvasText;

    .pearl-chain--past & {
      background-color: GrayText;
    }
  }
}

.pearl-chain__leg:last-of-type:after {
  right: calc(-1 * var(--border-width));
}

.pearl-chain__leg--cancellation {
  color: var(--color-cancellation);

  .pearl-chain--past & {
    color: var(--color-past);

    @include ifForcedColors {
      color: GrayText;
    }
  }

  @include ifForcedColors {
    color: ActiveText;
  }
}

.pearl-chain__leg--cancellation:after {
  background-color: unset;
  background-image: linear-gradient(
    to right,
    currentColor 0%,
    currentColor 50%,
    var(--color-white) 50%
  );
  background-repeat: repeat-x;
  background-size: calc(2 * var(--spacing-small)) var(--border-width);
}

.pearl-chain__leg--cancellation:after,
.pearl-chain--past .pearl-chain__leg--cancellation:after {
  @include ifForcedColors {
    background: none;
    border-top: #{pxToRemBuild(1)} dashed currentColor;
    transform: translateY(#{pxToRemBuild(1)});
  }
}

.pearl-chain__status {
  --dot-size: var(--dot-size-large);
  @include dot;

  top: 0;
  background-color: var(--color-current-location);
  z-index: 3;

  // --status-position: defined in .tsx file
  $realChainLength: calc(100% - var(--dot-size-large));
  $realPosition: calc(#{var(--status-position)} / 100 * #{$realChainLength});
  left: $realPosition;

  animation: pulse 3s infinite;

  @include ifForcedColors {
    background-color: ActiveText;
  }
}

.pearl-chain__status--no-animation {
  animation: unset;
}

@keyframes pulse {
  0% {
    box-shadow: 0 0 0 0 var(--color-current-location-dark);
  }
  40% {
    box-shadow: 0 0 0 #{pxToRemBuild(6)} transparent;
  }
}

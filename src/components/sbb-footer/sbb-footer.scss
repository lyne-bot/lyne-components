// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include host-component-properties;

:host {
  --sbb-page-base-offset-responsive: var(--sbb-layout-base-offset-responsive);

  // TODO: Remove once sbb-stack is refactored
  // Contextual design for sbb-stack
  --stack-text-color-normal: var(--sbb-color-granite-default);
  --sbb-footer-gap-horizontal: var(--sbb-grid-base-gutter-responsive);
  --sbb-footer-gap-vertical: var(--sbb-spacing-responsive-l);
  --sbb-footer-background-color: var(--sbb-color-milk-default);
  --sbb-footer-clock-width: #{px-to-rem-build(76)};

  @include mq($from: small) {
    --sbb-footer-clock-width: #{px-to-rem-build(112)};
  }
}

:host([negative]) {
  --sbb-footer-background-color: var(--sbb-color-charcoal-default);
}

.sbb-footer {
  padding-block: var(--sbb-spacing-responsive-l);
  padding-inline: var(--sbb-layout-base-offset-responsive);
  background-color: var(--sbb-footer-background-color);
}

.sbb-footer__title {
  @include screenReaderOnly;
}

::slotted(.sbb-link-list-button-group) {
  display: flex;
  flex-direction: column;
  gap: var(--sbb-spacing-fixed-6x);
  align-items: flex-start;
}

:host([variant='clock-columns']) {
  // Content
  slot {
    display: grid;
    grid-template-columns: auto;
    grid-template-rows: auto;
    gap: var(--sbb-footer-gap-vertical) var(--sbb-footer-gap-horizontal);

    @include mq($from: small) {
      grid-template-columns: calc(50% - (var(--sbb-footer-gap-horizontal) / 2));
    }

    @include mq($from: wide) {
      width: calc(#{$sbb-breakpoint-wide-min} - (2 * var(--sbb-layout-base-offset-responsive)));
      margin-inline-start: auto;
      margin-inline-end: auto;
      grid-template-columns: repeat(4, calc(25% - ((3 * var(--sbb-footer-gap-horizontal)) / 4)));
    }
  }

  ::slotted(sbb-clock) {
    max-width: var(--sbb-footer-clock-width);
    grid-row: 1;

    @include mq($from: small) {
      align-self: start;
      grid-row: 2;
    }

    @include mq($from: wide) {
      grid-row: 1;
      grid-column: 4 / 5;
      width: 100%;
      justify-self: start;
    }
  }

  ::slotted(sbb-divider) {
    @include mq($from: small) {
      grid-row: 3;
      grid-column: 1 / 4;
      width: 100%;
    }

    @include mq($from: wide) {
      grid-row: 2;
    }
  }

  @include mq($from: small) {
    /* stylelint-disable-next-line plugin/stylelint-bem-namics */
    ::slotted(:nth-child(-n + 2)) {
      grid-row: 1;
    }

    /* stylelint-disable-next-line plugin/stylelint-bem-namics */
    ::slotted(:nth-child(3)),
    ::slotted(:nth-child(4)) {
      grid-row: 2;
    }

    ::slotted(*:last-child) {
      grid-row: 4;
    }
  }

  @include mq($from: large) {
    ::slotted(*:last-child) {
      grid-column: 1 / 4;
    }
  }

  @include mq($from: wide) {
    /* stylelint-disable-next-line plugin/stylelint-bem-namics */
    ::slotted(:nth-child(-n + 4)) {
      grid-row: 1;
    }

    ::slotted(*:last-child) {
      grid-row: 3;
    }

    ::slotted(sbb-divider),
    ::slotted(*:last-child) {
      grid-column: 1 / 5;
    }
  }
}

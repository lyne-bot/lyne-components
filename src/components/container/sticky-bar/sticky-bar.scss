@use '../../core/styles' as sbb;

:host {
  @include sbb.box-sizing;

  --sbb-sticky-bar-padding-block: var(--sbb-spacing-responsive-xxxs);
  --sbb-sticky-bar-animation-duration: var(--sbb-animation-duration-5x);
  --sbb-sticky-bar-animation-easing: var(--sbb-animation-easing);

  // Display contents needed to get the sticky bar sticky.
  display: contents;
}

:host([data-sticking]) {
  --sbb-sticky-bar-sticky-background-color: var(
    --sbb-container-background-color,
    var(--sbb-color-white-default)
  );
}

:host([data-sticking][color='white']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-white-default);
}

:host([data-sticking][color='milk']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-milk-default);
}

:host([data-sticking][color='midnight']) {
  --sbb-sticky-bar-sticky-background-color: var(--sbb-color-midnight-default);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);

  color: var(--sbb-color-white-default);
}

:host(:is([disable-animation], [data-disable-animation])) {
  --sbb-sticky-bar-animation-duration: 0.1ms;
}

.sbb-sticky-bar__wrapper {
  position: sticky;
  inset-block-end: 0;
  display: block;
  width: 100%;
}

.sbb-sticky-bar__wrapper::before {
  content: '';
  position: absolute;
  inset: 0;
  z-index: -1;
  background-color: var(--sbb-sticky-bar-sticky-background-color, transparent);
  transition-property: background-color, box-shadow;
  transition-duration: var(--sbb-sticky-bar-animation-duration);
  transition-timing-function: var(--sbb-sticky-bar-animation-easing);

  :host([data-sticking]) & {
    @include sbb.shadow-level-5-hard;

    @include sbb.if-forced-colors {
      border-block-start: var(--sbb-border-width-1x) solid CanvasText;
    }
  }
}

.sbb-sticky-bar {
  display: flex;
  padding-block: var(--sbb-sticky-bar-padding-block);
  background-color: var(
    --sbb-sticky-bar-sticky-background-color,
    var(--sbb-container-background-color)
  );
  transition-property: background-color;
  transition-duration: var(--sbb-sticky-bar-animation-duration);
  transition-timing-function: var(--sbb-sticky-bar-animation-easing);

  :host(:not([data-expanded])) & {
    @include sbb.page-spacing;
  }

  :host([data-expanded]) & {
    @include sbb.page-spacing-expanded;
  }
}

.sbb-sticky-bar__intersector {
  position: absolute;
  width: 100%;

  // In order to make the intersection observer work properly on windows the intersector needs to have a defined height
  height: #{sbb.px-to-rem-build(1)};
  transform: translateY(calc(#{sbb.px-to-rem-build(1)} * -1));
}

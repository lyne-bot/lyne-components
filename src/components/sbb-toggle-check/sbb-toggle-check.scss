@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  display: inline-block;

  --sbb-toggle-check-color: var(--sbb-color-charcoal-default);
  --sbb-toggle-check-background: var(--sbb-color-smoke-default);
  --sbb-toggle-check-fill: var(--sbb-color-red-default);
  --sbb-toggle-check-circle-background: var(--sbb-color-white-default);
  --sbb-toggle-check-circle-diameter: #{sbb.px-to-rem-build(28)};
  --sbb-toggle-check-circle-transform: translate(0, -50%);
  --sbb-toggle-check-height: #{sbb.px-to-rem-build(24)};
  --sbb-toggle-check-width: calc(2 * var(--sbb-toggle-check-height));
  --sbb-toggle-check-cursor: pointer;
  --sbb-toggle-check-flex-direction: row-reverse;
  --sbb-toggle-check-icon-opacity: 0;
  --sbb-toggle-check-vertical-align: start;

  @include sbb.if-forced-colors {
    --sbb-toggle-check-circle-background: Canvas;
    --sbb-toggle-check-background: CanvasText;
  }
}

:host([checked]:not([checked='false'])) {
  --sbb-toggle-check-background: var(--sbb-color-red-default);

  // As the circle is greater than the slider below,
  // we have to subtract the difference in order to not overshoot on the right side.
  // 100% of circle (28px) - 2 * (100% (28px) - 0.5 * width (48px)) => 20px
  --sbb-toggle-check-circle-transform: translate(
    calc(100% - 2 * (100% - 0.5 * var(--sbb-toggle-check-width))),
    -50%
  );
  --sbb-toggle-check-icon-opacity: 1;

  @include sbb.if-forced-colors {
    --sbb-toggle-check-fill: Highlight;
    --sbb-toggle-check-background: Highlight;
  }
}

:host([disabled]:not([disabled='false'])) {
  --sbb-toggle-check-color: var(--sbb-color-graphite-default);
  --sbb-toggle-check-background: var(--sbb-color-cloud-default);
  --sbb-toggle-check-fill: var(--sbb-color-smoke-default);
  --sbb-toggle-check-circle-background: var(--sbb-color-milk-default);
  --sbb-toggle-check-cursor: not-allowed;

  @include sbb.if-forced-colors {
    --sbb-toggle-check-fill: GrayText;
    --sbb-toggle-check-background: GrayText;
  }
}

:host([checked][disabled]) {
  --sbb-toggle-check-circle-background: var(--sbb-color-white-default);
}

:host([label-position='before']) {
  --sbb-toggle-check-flex-direction: row;
}

.sbb-toggle-check {
  // Avoids unwanted space displayed if no label text is set.
  @include sbb.zero-width-space;

  position: relative;
  display: flex;
  color: var(--sbb-toggle-check-color);
  user-select: none;
  -webkit-tap-highlight-color: transparent;

  input[type='checkbox']:focus-visible + & {
    @include sbb.focus-outline;

    border-radius: calc(var(--sbb-border-radius-4x) - var(--sbb-focus-outline-offset));
  }
}

input[type='checkbox'] {
  @include sbb.screen-reader-only;
}

.sbb-toggle-check__container {
  @include sbb.text-s--regular;

  display: flex;
  flex-direction: var(--sbb-toggle-check-flex-direction);
  gap: var(--sbb-spacing-fixed-3x);
  align-items: var(--sbb-toggle-check-vertical-align);
  width: 100%;
}

.sbb-toggle-check__label {
  flex-grow: 1;
  padding-block-start: calc(
    (var(--sbb-toggle-check-height) - (var(--sbb-typo-line-height-body-text) * 1em)) / 2
  );
}

.sbb-toggle-check__slider {
  display: inline-block;
  position: relative;
  min-width: var(--sbb-toggle-check-width);
  height: var(--sbb-toggle-check-height);
  border-radius: var(--sbb-toggle-check-height);
  background-color: var(--sbb-toggle-check-background);
  cursor: var(--sbb-toggle-check-cursor);

  // Reserve space of overlapping circle
  margin-block: calc(
    0.5 * (var(--sbb-toggle-check-circle-diameter) - var(--sbb-toggle-check-height))
  );
}

.sbb-toggle-check__circle {
  @include sbb.shadow-level-5-hard;
  @include sbb.absolute-center-y;

  width: var(--sbb-toggle-check-circle-diameter);
  height: var(--sbb-toggle-check-circle-diameter);
  border: var(--sbb-border-width-1x) solid var(--sbb-toggle-check-background);
  border-radius: 50%;
  background-color: var(--sbb-toggle-check-circle-background);
  color: var(--sbb-toggle-check-fill);
  will-change: transform;
  transform: var(--sbb-toggle-check-circle-transform);
  transition: transform ease var(--sbb-animation-duration-6x);
}

.sbb-toggle-check-icon {
  @include sbb.absolute-center-x-y;

  width: var(--sbb-size-icon-ui-small);
  height: var(--sbb-size-icon-ui-small);
  opacity: var(--sbb-toggle-check-icon-opacity);
  transition: opacity ease var(--sbb-animation-duration-6x);
}

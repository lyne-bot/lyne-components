@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  // Necessary to forward styles to native link
  @include sbb.text-inherit;

  display: inline-block;
  color: inherit;
  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize css of several frameworks.
  outline: none !important;

  @include sbb.link-variables;

  --sbb-link-gap: var(--sbb-spacing-fixed-1x);
}

:host([variant='block']) {
  display: block;
}

// Using :where to be not more specific than inline variant
:host([negative]:where(:not([negative='false']))) {
  @include sbb.link-variables--negative;
}

:host([variant='inline']) {
  @include sbb.link-variables--inline;
}

:host([variant='inline'][negative]:not([negative='false'])) {
  @include sbb.link-variables--inline-negative;
}

.sbb-link {
  @include sbb.link-base;

  display: flex;
  align-items: center;
  gap: var(--sbb-link-gap);
  word-break: break-word;
  width: 100%;
  cursor: pointer;

  :host(:focus-visible) & {
    @include sbb.focus-outline;

    border-radius: calc(var(--sbb-border-radius-4x) - var(--sbb-focus-outline-offset));
  }

  :host([variant='inline']) & {
    @include sbb.link-inline-base;
  }

  :host([size='xs']:not([variant='inline'])) & {
    @include sbb.text-xs--regular;
  }

  :host([size='s']:not([variant='inline'])) & {
    @include sbb.text-s--regular;
  }

  :host([size='m']:not([variant='inline'])) & {
    @include sbb.text-m--regular;
  }

  :host([disabled]:not([disabled='false'])) & {
    pointer-events: none;
    cursor: default;
  }

  :host(:not([disabled]:not([disabled='false']))) & {
    @include sbb.link-hover;

    // Active definitions have to be after :hover definitions
    @include sbb.link-active;
  }
}

button:where(.sbb-link) {
  @include sbb.button-reset;

  text-align: left;
}

.sbb-link__icon {
  position: relative;
  height: calc(var(--sbb-typo-line-height-body-text) * 1em);
  width: var(--sbb-size-icon-ui-small);
  flex: 0 0 auto;
  align-self: start;

  :host([icon-placement='end']) & {
    order: 2;
  }

  ::slotted([slot='icon']),
  sbb-icon {
    @include sbb.absolute-center-y;
  }
}

.sbb-link__opens-in-new-window {
  @include sbb.screen-reader-only;
}

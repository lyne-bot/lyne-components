@use '../core/styles' as sbb;
@use 'sass:color';
@use 'node_modules/@sbb-esta/lyne-design-tokens/dist/scss/sbb-variables.scss' as sbb-tokens;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-notification-visibility: hidden;
  --sbb-notification-opacity: 0;
  --sbb-notification-max-height: 0;
  --sbb-notification-margin: 0;
  --sbb-notification-padding-block: var(--sbb-spacing-responsive-xxs);
  --sbb-notification-padding-inline: var(--sbb-spacing-responsive-xs);
  --sbb-notification-color: var(--sbb-color-charcoal-default);
  --sbb-notification-icon-color: var(--sbb-notification-type-color);
  --sbb-notification-border-width: var(--sbb-border-width-1x);
  --sbb-notification-border: var(--sbb-notification-border-width) solid
    var(--sbb-notification-type-color);
  --sbb-notification-base-radius: var(--sbb-border-radius-4x);
  --sbb-notification-border-radius: calc(var(--sbb-notification-base-radius) / 2)
    var(--sbb-notification-base-radius) var(--sbb-notification-base-radius)
    calc(var(--sbb-notification-base-radius) / 2);
  --sbb-notification-animation-duration: var(--sbb-animation-duration-4x);
  --sbb-notification-timing-function: ease-in;
  --sbb-notification-transition: max-height var(--sbb-notification-animation-duration)
      var(--sbb-animation-duration-2x) var(--sbb-notification-timing-function),
    padding var(--sbb-notification-animation-duration) var(--sbb-animation-duration-2x)
      var(--sbb-notification-timing-function),
    border var(--sbb-notification-animation-duration) var(--sbb-animation-duration-2x)
      var(--sbb-notification-timing-function),
    visibility var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function),
    opacity var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function);

  // As the notification has always a light background, we have to fix the focus outline color
  // to default color for cases where the notification is used in a negative context.
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-default);

  margin: 0;
  transition: margin var(--sbb-notification-animation-duration)
    var(--sbb-notification-timing-function);
  animation: {
    name: animate-margin;
    duration: var(--sbb-notification-animation-duration);
    timing-function: var(--sbb-notification-timing-function);
  }
}

:host(:is([data-state='opened'], [data-state='opening'])) {
  --sbb-notification-visibility: visible;
  --sbb-notification-opacity: 1;
  --sbb-notification-max-height: calc(
    var(--sbb-notification-height) + (var(--sbb-notification-border-width) * 2)
  );
  --sbb-notification-transition: max-height var(--sbb-notification-animation-duration)
      var(--sbb-notification-timing-function),
    padding var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function),
    border var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function),
    visibility var(--sbb-notification-animation-duration) var(--sbb-notification-animation-duration)
      var(--sbb-notification-timing-function),
    opacity var(--sbb-notification-animation-duration) var(--sbb-notification-animation-duration)
      var(--sbb-notification-timing-function);

  margin: var(--sbb-notification-margin);
}

:host(:is([data-resize-disable-animation], [disable-animation])) {
  --sbb-notification-animation-duration: 0.1ms;
}

/* Types */

:host([type='info']) {
  --sbb-notification-type-color: var(--sbb-color-smoke-default);
  --sbb-notification-type-color-sass: #{color.mix(sbb-tokens.$sbb-color-smoke-default, white, 5%)};
  --sbb-notification-icon-color: var(--sbb-notification-color);
}

:host([type='success']) {
  --sbb-notification-type-color: var(--sbb-color-green-default);
  --sbb-notification-type-color-sass: #{color.mix(sbb-tokens.$sbb-color-green-default, white, 5%)};
}

:host([type='warn']) {
  --sbb-notification-type-color: var(--sbb-color-peach-default);
  --sbb-notification-type-color-sass: #{color.mix(sbb-tokens.$sbb-color-peach-default, white, 5%)};
  --sbb-notification-icon-color: var(--sbb-notification-color);
}

:host([type='error']) {
  --sbb-notification-type-color: var(--sbb-color-red-default);
  --sbb-notification-type-color-sass: #{color.mix(sbb-tokens.$sbb-color-red-default, white, 5%)};
}

.sbb-notification__wrapper {
  position: relative;
  inset-inline-start: calc(
    var(--sbb-notification-base-radius) - var(--sbb-notification-border-width)
  );
  width: calc(
    100% - calc(var(--sbb-notification-base-radius) - var(--sbb-notification-border-width))
  );
  visibility: var(--sbb-notification-visibility);
  opacity: var(--sbb-notification-opacity);
  max-height: var(--sbb-notification-max-height);
  transition: var(--sbb-notification-transition);
  border: var(--sbb-notification-border);
  border-radius: var(--sbb-notification-border-radius);
  animation: {
    name: open;
    duration: var(--sbb-notification-animation-duration);
    timing-function: var(--sbb-notification-timing-function);
  }

  &::before {
    content: '';
    position: absolute;
    inset: calc(var(--sbb-notification-border-width) * -1) var(--sbb-notification-base-radius)
      calc(var(--sbb-notification-border-width) * -1) calc(var(--sbb-notification-base-radius) * -1);
    background-color: var(--sbb-notification-type-color);
    border: var(--sbb-notification-border);
    border-radius: var(--sbb-notification-base-radius);
  }
}

.sbb-notification {
  @include sbb.text-s--regular;

  position: relative;
  display: grid;
  grid-template-columns: 1fr auto;
  align-items: center;
  padding-block: var(--sbb-notification-padding-block);
  padding-inline: var(--sbb-notification-padding-inline);
  color: var(--sbb-notification-color);
  border-radius: var(--sbb-notification-border-radius);
  overflow: hidden;

  // We apply SASS calculated background color as default/fallback for older browsers.
  background-color: var(--sbb-notification-type-color-sass);

  // If supported, try to mix color with CSS
  @supports (background-color: color-mix(in srgb, transparent 5%, white)) {
    background-color: color-mix(in srgb, var(--sbb-notification-type-color) 5%, white);
  }

  @include sbb.mq($from: small) {
    grid-template-columns: auto 1fr auto;
    align-items: flex-start;
  }
}

.sbb-notification__icon {
  color: var(--sbb-notification-icon-color);

  @include sbb.mq($from: small) {
    margin-block-start: calc(
      ((1em * var(--sbb-typo-line-height-body-text)) - var(--sbb-size-icon-ui-small)) / 2
    );

    :host([data-has-title]) & {
      margin-block-start: calc(
        (
            (var(--sbb-font-size-title-5) * var(--sbb-typo-line-height-body-text)) - var(
                --sbb-size-icon-ui-small
              )
          ) / 2
      );
    }
  }
}

.sbb-notification__title {
  // Overwrite sbb-title default margin
  margin: 0;
}

.sbb-notification__content {
  order: 3;
  grid-area: 2 / 1 / 3 / 3;
  margin-block-start: var(--sbb-spacing-fixed-2x);

  @include sbb.mq($from: small) {
    order: initial;
    grid-area: initial;
    margin-block-start: 0;
    padding-inline: var(--sbb-spacing-responsive-xxxs) var(--sbb-spacing-responsive-xs);
  }
}

.sbb-notification__close-wrapper {
  display: flex;
  align-items: center;
  gap: var(--sbb-spacing-responsive-xxs);
  height: 100%;
}

.sbb-notification__divider {
  --sbb-divider-color: var(--sbb-notification-type-color);

  display: none;
  position: relative;
  inset-inline-start: var(--sbb-border-width-1x);
  opacity: 0.2;

  @include sbb.mq($from: small) {
    display: block;
    height: calc(100% - (var(--sbb-spacing-fixed-1x) * 2));
  }
}

@keyframes open {
  from {
    visibility: hidden;
    opacity: 0;
    max-height: 0;
    border-block: none;
  }

  to {
    visibility: visible;
    opacity: 1;
    max-height: var(--sbb-notification-max-height);
    border-block: var(--sbb-notification-border);
  }
}

@keyframes animate-margin {
  from {
    margin: 0;
  }

  to {
    margin: var(--sbb-notification-margin);
  }
}

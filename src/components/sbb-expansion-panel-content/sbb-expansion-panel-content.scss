@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-expansion-panel-content-padding-inline: var(--sbb-spacing-fixed-6x);
  --sbb-expansion-panel-content-padding-inline-start: var(
    --sbb-expansion-panel-content-padding-inline
  );
}

:host([data-icon-space]) {
  @include sbb.mq($from: micro) {
    // The space taken by the icon in the sbb-expansion-panel-header must be considered here to correctly calculate the padding value;
    // this is the sum of the default padding, plus the icon space plus the gap between the icon and the header title.
    --sbb-expansion-panel-content-padding-inline-start: calc(
      var(--sbb-expansion-panel-content-padding-inline) + var(--sbb-expansion-panel-icon-size) +
        var(--sbb-expansion-panel-title-gap)
    );
  }
}

.sbb-expansion-panel-content {
  padding-block-end: var(--sbb-spacing-responsive-s);
  padding-inline-start: var(--sbb-expansion-panel-content-padding-inline-start);
  padding-inline-end: var(--sbb-expansion-panel-content-padding-inline);
}

::slotted(:is(p, sbb-title):first-child) {
  margin-block-start: 0;
}

@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  // Overwrites logo in slotted and default case
  --sbb-logo-height: #{sbb.px-to-rem-build(16)};
  --sbb-header-position: fixed;
  --sbb-header-transition-duration: var(--sbb-animation-duration-6x);

  @include sbb.mq($from: medium) {
    --sbb-logo-height: #{sbb.px-to-rem-build(20)};
  }

  // Setting the height here reserves the space for the header which will else be lost with fixed position.
  height: var(--sbb-header-height);
}

:host([hide-on-scroll]) {
  --sbb-header-position: absolute;
}

:host([hide-on-scroll][data-fixed]) {
  --sbb-header-position: fixed;
  --sbb-header-animation-name: hide;
  --sbb-header-transform: translate3d(0, -100%, 0);
}

:host([hide-on-scroll][data-fixed][data-animated]) {
  // Hide transition
  --sbb-header-transition-timing: cubic-bezier(0.4, 0, 1, 1);
}

:host([hide-on-scroll][data-fixed][data-visible]) {
  --sbb-header-animation-name: show;
  --sbb-header-transform: translate3d(0, 0, 0);

  // Show transition
  --sbb-header-transition-timing: cubic-bezier(0, 0, 0.2, 1);
}

.sbb-header {
  position: var(--sbb-header-position);
  inset: 0 0 auto;
  background: var(--sbb-color-white-default);
  z-index: var(--sbb-header-z-index, 10);
  transform: var(--sbb-header-transform);
  transition: {
    property: box-shadow;
    duration: var(--sbb-header-transition-duration);
    timing-function: var(--sbb-header-transition-timing);
  }
  animation: {
    name: var(--sbb-header-animation-name);
    duration: var(--sbb-header-transition-duration);
    timing-function: var(--sbb-header-transition-timing);
  }

  :host([data-shadow]) & {
    @include sbb.shadow-level-9-soft;
  }

  @include sbb.if-forced-colors {
    border-block-end: var(--sbb-border-width-1x) solid CanvasText;
  }
}

.sbb-header__wrapper {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  height: var(--sbb-header-height);

  :host(:not([expanded]:not([expanded='false']))) & {
    @include sbb.page-spacing;
  }

  :host([expanded]:not([expanded='false'])) & {
    @include sbb.page-spacing-expanded;
  }
}

.sbb-header__logo {
  margin-inline-start: auto;
}

// Fix left offset if first element of the header is a sbb-header-action.
// The value of the offset is calculated inside sbb-header-action styles.
.sbb-header__wrapper > ::slotted(sbb-header-action:first-child) {
  margin-inline-start: var(--sbb-header-first-item-margin-inline-start);
}

// Apply padding and outline to possible slotted link in logo slot
::slotted(a[slot='logo']) {
  display: block;
  padding-block: var(--sbb-spacing-fixed-3x);
  position: relative;
  outline: none;
}

// To show the correct outline, we need to span a hidden element filling the link but without the outline-offset.
::slotted(a[slot='logo'])::before {
  content: '';
  display: block;
  position: absolute;
  inset: var(--sbb-spacing-fixed-3x) 0;
}

::slotted(a[slot='logo']:focus-visible)::before {
  @include sbb.focus-outline;

  outline-offset: var(--sbb-spacing-fixed-3x);

  // As if the outline has an offset, the border radius increases, we set it to the smallest possible border-radius.
  border-radius: 0.1px;
}

@keyframes show {
  from {
    transform: translate3d(0, -100%, 0);
  }

  to {
    transform: translate3d(0, 0, 0);
  }
}

@keyframes hide {
  from {
    transform: translate3d(0, 0, 0);
  }

  to {
    transform: translate3d(0, -100%, 0);
  }
}

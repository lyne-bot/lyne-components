@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-header-logo-height: #{sbb.px-to-rem-build(16)};

  @include sbb.mq($from: medium) {
    --sbb-header-logo-height: #{sbb.px-to-rem-build(20)};
  }

  // Setting the height here reserves the space for the header which will else be lost with fixed position.
  height: var(--sbb-header-height);
}

.sbb-header {
  position: fixed;
  inset: 0 0 auto;
  background: var(--sbb-color-white-default);
  transition: box-shadow var(--sbb-animation-duration-4x) var(--sbb-animation-easing);
  z-index: 10;

  :host([shadow]:not([shadow='false'])) & {
    @include sbb.shadow-level-9-soft;
  }

  @include sbb.if-forced-colors {
    border-block-end: var(--sbb-border-width-1x) solid CanvasText;
  }
}

.sbb-header__wrapper {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  height: var(--sbb-header-height);

  /* stylelint-disable-next-line plugin/stylelint-bem-namics */
  :host(:not([expanded]:not([expanded='false']))) & {
    @include sbb.page-spacing;
  }

  :host([expanded]:not([expanded='false'])) & {
    @include sbb.page-spacing-expanded;
  }
}

.sbb-header__logo {
  margin-inline-start: auto;

  // Only apply height to standard logo. If slotted, no styles will be applied.
  sbb-logo {
    height: var(--sbb-header-logo-height);
  }
}

// Fix left offset if first element of the header is a sbb-header-action.
// The value of the offset is calculated inside sbb-header-action styles.
.sbb-header__wrapper > ::slotted(sbb-header-action:first-child) {
  margin-inline-start: var(--sbb-header-first-item-margin-inline-start);
}

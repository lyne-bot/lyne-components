@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-calendar-day-size: #{sbb.px-to-rem-build(40)};
  --sbb-calendar-day-disabled-color: var(--sbb-color-granite-default);
  --sbb-calendar-header-color: var(--sbb-color-granite-default);
  --sbb-calendar-day-background-color: transparent;
  --sbb-calendar-day-padding: #{sbb.px-to-rem-build(2)};
  --sbb-calendar-day-color: var(--sbb-color-charcoal-default);
  --sbb-calendar-day-selected-color: var(--sbb-color-white-default);
  --sbb-calendar-day-selected-background-color: var(--sbb-color-charcoal-default);
  --sbb-calendar-day-disabled-height: #{sbb.px-to-rem-build(1.5)};
  --sbb-calendar-day-disabled-width: #{sbb.px-to-rem-build(25.5)};
  --sbb-calendar-day-transition-duration: var(--sbb-animation-duration-2x);
  --sbb-calendar-day-transition-easing-function: var(--sbb-animation-easing);
  --sbb-calendar-tables-gap: var(--sbb-spacing-fixed-10x);

  @include sbb.mq($from: micro) {
    --sbb-calendar-day-size: #{sbb.px-to-rem-build(44)};
  }

  // We add width definition to host, to make overwriting easy for consumers.
  width: max-content;
}

.sbb-calendar__wrapper {
  width: 100%;
  display: block;
}

.sbb-calendar__controls {
  width: 100%;
  display: inline-flex;
  align-items: center;
  gap: var(--sbb-spacing-fixed-2x);
  margin-block-end: var(--sbb-spacing-fixed-4x);
}

.sbb-calendar__controls-month {
  @include sbb.text-s--regular;

  width: 100%;
  display: flex;
  gap: var(--sbb-calendar-tables-gap);
}

.sbb-calendar__controls-month-label {
  width: 100%;
  text-align: center;
  text-transform: capitalize;
}

.sbb-calendar__table-container {
  display: flex;
  gap: var(--sbb-calendar-tables-gap);

  // The padding of the first and last column should not be visible if calendar is stretched.
  // Therefore we need a negative inline margin.
  // As we don't want to squeeze, the margin should never be greater than zero.
  --sbb-calendar-calculated-width: calc(7 * var(--sbb-calendar-day-size));
  --sbb-calendar-overflow-padding: calc(100% - var(--sbb-calendar-calculated-width));
  --sbb-calendar-start-offset: min(0px, -1 * (var(--sbb-calendar-overflow-padding) / 12));
  --sbb-calendar-margin: var(--sbb-calendar-start-offset);

  :host([wide]:not([wide='false'])) & {
    --sbb-calendar-calculated-width: calc(
      2 * 7 * var(--sbb-calendar-day-size) + var(--sbb-calendar-tables-gap)
    );
    --sbb-calendar-margin: calc(0.5 * var(--sbb-calendar-start-offset));
  }

  margin-inline: var(--sbb-calendar-margin);
}

.sbb-calendar__table {
  width: 100%;
  border-collapse: collapse;
  height: max-content;
}

.sbb-calendar__table-header {
  @include sbb.text-xs--regular;

  color: var(--sbb-calendar-header-color);
  width: var(--sbb-calendar-day-size);
  padding: 0;
  padding-block-end: var(--sbb-spacing-fixed-4x);
}

.sbb-calendar__table-data {
  position: relative;
  padding: 0;
  text-align: center;
  transition-duration: var(--sbb-calendar-day-transition-duration);
  transition-timing-function: var(--sbb-calendar-day-transition-easing-function);
}

.sbb-calendar__day {
  @include sbb.button-reset;
  @include sbb.text-s--regular;

  height: var(--sbb-calendar-day-size);
  width: var(--sbb-calendar-day-size);
  color: var(--sbb-calendar-day-color);
  border-radius: 50%;
  cursor: pointer;
  position: relative;
  z-index: 0;

  &::before {
    content: '';
    position: absolute;
    inset: var(--sbb-calendar-day-padding);
    background-color: var(--sbb-calendar-day-background-color);
    border-radius: 50%;
    z-index: -1;
    transition-duration: var(--sbb-calendar-day-transition-duration);
    transition-timing-function: var(--sbb-calendar-day-transition-easing-function);
    transition-property: background-color;
  }

  @include sbb.hover-mq($hover: true) {
    &:not(.sbb-calendar__day-selected, :active, :disabled):hover {
      --sbb-calendar-day-background-color: var(--sbb-color-milk-default);

      padding-block-end: #{sbb.px-to-rem-build(1)};

      &::before {
        @include sbb.if-forced-colors {
          @include sbb.focus-outline;
        }
      }
    }
  }

  &:disabled {
    --sbb-calendar-day-color: var(--sbb-calendar-day-disabled-color);

    cursor: unset;
  }

  &:focus-visible::before {
    @include sbb.focus-outline;
  }

  &:not(.sbb-calendar__day-selected, :disabled):active {
    --sbb-calendar-day-background-color: var(--sbb-color-cloud-default);

    &::before {
      @include sbb.if-forced-colors {
        @include sbb.focus-outline;
      }
    }
  }
}

.sbb-calendar__crossed-out::after {
  content: '';
  height: var(--sbb-calendar-day-disabled-height);
  width: var(--sbb-calendar-day-disabled-width);
  position: absolute;
  background-color: var(--sbb-calendar-day-disabled-color);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(-45deg);
}

.sbb-calendar__day-today {
  @include sbb.text-s--bold;
}

.sbb-calendar__day-selected {
  --sbb-calendar-day-color: var(--sbb-calendar-day-selected-color);
  --sbb-calendar-day-background-color: var(--sbb-calendar-day-selected-background-color);

  @include sbb.if-forced-colors {
    --sbb-calendar-day-background-color: ButtonText !important;
  }
}

.sbb-calendar__visually-hidden {
  @include sbb.screen-reader-only;
}

@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  @include sbb.text-s--regular;

  --sbb-option-color: var(--sbb-color-charcoal-default);
  --sbb-option-bg-color: inherit;
  --sbb-option-padding-inline: var(--sbb-spacing-responsive-xxxs);
  --sbb-option-padding-block: calc(var(--sbb-spacing-fixed-2x) + var(--sbb-border-width-2x));
  --sbb-option-column-gap: var(--sbb-spacing-responsive-xxxs);
  --sbb-option-justify-content: start;
  --sbb-option-min-height: var(--sbb-size-button-m-min-height);
  --sbb-option-cursor: pointer;
  --sbb-option-border-radius: var(--sbb-border-radius-4x);
}

:host([active]:not([active='false'])) {
  --sbb-focus-outline-offset: calc(-1 * var(--sbb-spacing-fixed-1x));
}

:host(:hover:not([disabled]:not([disabled='false']), [data-group-disabled])) {
  @include sbb.hover-mq($hover: true) {
    --sbb-option-bg-color: var(--sbb-color-milk-default);
  }
}

// if the highlight is enabled, hide the slot content
:host(:not([data-disable-highlight])),
:host([data-disable-highlight='false']) {
  .sbb-option__label slot {
    display: none;
  }
}

:host([data-group-disabled]),
:host([disabled]:not([disabled='false'])) {
  --sbb-option-color: var(--sbb-color-graphite-default);
  --sbb-option-cursor: default;

  @include sbb.if-forced-colors {
    --sbb-option-color: GrayText;
  }
}

:host(:not(:is([disabled]:not([disabled='false']), [data-group-disabled]))) {
  .sbb-option__label--highlight {
    @include sbb.text--bold;
    @include sbb.if-forced-colors {
      color: Highlight;
    }
  }
}

:host([data-variant='select']) {
  @include sbb.text-xs--regular;

  --sbb-option-padding-inline: var(--sbb-spacing-fixed-3x);
  --sbb-option-padding-block: var(--sbb-spacing-fixed-1x);
  --sbb-option-column-gap: var(--sbb-spacing-fixed-3x);
  --sbb-option-justify-content: space-between;

  .sbb-option[data-multiple] {
    --sbb-option-padding-inline: 0;
    --sbb-option-padding-block: 0;
    --sbb-option-column-gap: var(--sbb-spacing-fixed-2x);
    --sbb-option-justify-content: start;
    --sbb-option-border-radius: var(--sbb-spacing-fixed-1x);
    --sbb-focus-outline-offset: var(--sbb-spacing-fixed-1x);

    margin-block-end: var(--sbb-spacing-fixed-3x);
  }
}

.sbb-option__container {
  background-color: var(--sbb-option-bg-color);
}

.sbb-option {
  display: flex;
  align-items: center;
  column-gap: var(--sbb-option-column-gap);
  padding-inline: var(--sbb-option-padding-inline);
  padding-block: var(--sbb-option-padding-block);
  justify-content: var(--sbb-option-justify-content);
  color: var(--sbb-option-color);
  cursor: var(--sbb-option-cursor);

  :host([active]:not([active='false'])) & {
    @include sbb.focus-outline;

    border-radius: var(--sbb-option-border-radius);
  }
}

.sbb-option__icon {
  display: flex;
  min-width: var(--sbb-size-icon-ui-small);
  min-height: var(--sbb-size-icon-ui-small);
}

.sbb-option__icon--empty {
  // Can be overridden by the 'preserve-icon-space' on the autocomplete
  display: var(--sbb-option-icon-container-display, none);
}

.sbb-option__group-label--visually-hidden {
  @include sbb.screen-reader-only;
}

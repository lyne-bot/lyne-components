// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

:host {
  --sbb-form-field-background-color: var(--sbb-color-white-default);
  --sbb-form-field-border-color: var(--sbb-color-smoke-default);
  --sbb-form-field-border-radius: var(--sbb-border-radius-4x);
  --sbb-form-field-height: var(--sbb-size-form-element-m-min-height);
  --sbb-form-field-label-color: var(--sbb-color-metal-default);
  --sbb-form-field-prefix-color: var(--sbb-color-metal-default);
  --sbb-form-field-padding-inline: var(--sbb-spacing-fixed-3x);
  --sbb-form-field-text-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-error-divider-width: var(--sbb-spacing-fixed-1x);
  --sbb-form-field-error-padding-block-start: var(--sbb-form-field-error-divider-width);
  --sbb-form-field-gap: var(--sbb-spacing-fixed-2x);
  --sbb-form-field-label-to-input-gap: calc(-1 * var(--sbb-spacing-fixed-1x));
  --sbb-form-field-select-inline-padding-end: calc(
    var(--sbb-icon-svg-width) + var(--sbb-form-field-gap)
  );
  --sbb-form-field-overflow: hidden;

  // Lock sbb-icon size
  --sbb-icon-svg-width: var(--sbb-size-icon-ui-small);
  --sbb-icon-svg-height: var(--sbb-size-icon-ui-small);

  display: inline-block;
  min-width: #{px-to-rem-build(150)};
  width: min(#{px-to-rem-build(300)}, 100%);
}

:host([size='l']) {
  --sbb-form-field-border-radius: var(--sbb-border-radius-8x);
  --sbb-form-field-height: var(--sbb-size-form-element-l-min-height);
  --sbb-form-field-padding-inline: var(--sbb-spacing-responsive-xxxs);
}

:host([error-space='reserve']) {
  --form-field-error-min-height: calc(
    var(--sbb-typo-line-height-body-text) * var(--sbb-font-size-text-xs)
  );
  --sbb-form-field-error-padding-block-start-override: var(--sbb-form-field-error-divider-width);
}

:host(.sbb-form-field--readonly),
:host(.sbb-form-field--disabled) {
  --sbb-form-field-background-color: var(--sbb-color-milk-default);
  --sbb-form-field-border-color: var(--sbb-color-graphite-default);
}

:host(.sbb-form-field--disabled) {
  --sbb-form-field-label-color: var(--sbb-color-graphite-default);
  --sbb-form-field-prefix-color: var(--sbb-color-graphite-default);
  --sbb-form-field-text-color: var(--sbb-color-graphite-default);

  @include ifForcedColors {
    --sbb-form-field-label-color: GrayText;
    --sbb-form-field-prefix-color: GrayText;
    --sbb-form-field-text-color: GrayText;
  }
}

:host(.sbb-form-field--readonly) {
  --sbb-form-field-label-color: var(--sbb-color-granite-default);
  --sbb-form-field-prefix-color: var(--sbb-color-granite-default);
}

:host(:focus-within) {
  --sbb-form-field-border-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-prefix-color: var(--sbb-color-charcoal-default);
}

:host(.sbb-invalid) {
  --sbb-form-field-border-color: var(--sbb-color-red125-default);
  --sbb-form-field-text-color: var(--sbb-color-red125-default);

  @include ifForcedColors {
    --sbb-form-field-border-color: LinkText;
    --sbb-form-field-text-color: LinkText;
  }
}

:host(.sbb-form-field--empty-error) {
  --sbb-form-field-error-padding-block-start: 0;
}

// Should be after other definitions to override border style
/* stylelint-disable-next-line plugin/stylelint-bem-namics */
:host(:is([borderless], [data-input-type='sbb-slider'])) {
  --sbb-form-field-border-color: transparent;
}

// Should be after other definitions to override overflow and background
:host([data-input-type='sbb-slider']) {
  --sbb-form-field-overflow: visible;
  --sbb-form-field-background-color: var(--sbb-color-white-default);
}

.sbb-form-field__space-wrapper {
  display: flex;
  flex-direction: column;
  @include zeroWidthSpace;
}

.sbb-form-field__wrapper {
  display: flex;
  align-items: center;
  gap: var(--sbb-form-field-gap);
  padding-inline: calc(var(--sbb-form-field-padding-inline) - var(--sbb-border-width-1x));
  border: var(--sbb-border-width-1x) solid var(--sbb-form-field-border-color);
  border-radius: var(--sbb-form-field-border-radius);
  height: var(--sbb-form-field-height);
  background-color: var(--sbb-form-field-background-color);
}

// Ensure slotted inline elements are vertically centered
::slotted(*[slot='prefix']),
::slotted(*[slot='suffix']) {
  min-width: var(--sbb-icon-svg-width);
  display: flex;
}

.sbb-form-field__select-input-icon {
  @include absoluteCenterY;

  inset-inline-end: 0;
  position: absolute;
  pointer-events: none;
}

::slotted(*[slot='prefix']) {
  color: var(--sbb-form-field-prefix-color);
}

.sbb-form-field__input-container {
  flex: 1 1 auto;
  position: relative;

  // Prevents overflowing parent
  min-width: 0;
}

// Label
.sbb-form-field__label {
  @include text-xs--regular;

  display: flex;
  max-width: 100%;

  // Moves label down and input up to meet positioning requirements
  margin-block-end: var(--sbb-form-field-label-to-input-gap);
  color: var(--sbb-form-field-label-color);
  user-select: none;
  pointer-events: none;

  :host([data-input-type='select']) & {
    padding-inline-end: var(--sbb-form-field-select-inline-padding-end);
  }
}

::slotted(*[slot='label']),
slot[name='label'] > span {
  @include ellipsis;
}

// Input
/* stylelint-disable plugin/stylelint-bem-namics */
.sbb-form-field__input ::slotted(:where(input, select)) {
  @include text-m--regular;
  @include placeholder;
  @include ellipsis;

  overflow: var(--sbb-form-field-overflow);
  -webkit-appearance: none;
  width: 100%;
  box-sizing: border-box;
  border: none;
  outline: none;
  padding: 0;
  color: var(--sbb-form-field-text-color);
  background-color: var(--sbb-form-field-background-color);

  // To be more specific than the styles in normalize.scss we need to use !important
  // TODO: Find a better solution
  font-size: var(--sbb-font-size-text-m) !important;
  font-family: var(--sbb-typo-type-face-sbb-roman) !important;
  line-height: var(--sbb-typo-line-height-body-text) !important;
}
/* stylelint-enable plugin/stylelint-bem-namics */

.sbb-form-field__input ::slotted(select) {
  padding-inline-end: var(--sbb-form-field-select-inline-padding-end);
}

.sbb-form-field__error {
  display: flex;
  min-height: var(--form-field-error-min-height);
  margin-block-start: var(
    --sbb-form-field-error-padding-block-start-override,
    var(--sbb-form-field-error-padding-block-start)
  );
}

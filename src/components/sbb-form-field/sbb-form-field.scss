@use '../core/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-form-field-background-color: var(--sbb-color-white-default);
  --sbb-form-field-border-color: var(--sbb-color-smoke-default);
  --sbb-form-field-border-style: solid;
  --sbb-form-field-border-radius: var(--sbb-border-radius-4x);
  --sbb-form-field-border-width: var(--sbb-border-width-1x);
  --sbb-form-field-height: var(--sbb-size-form-element-m-min-height);
  --sbb-form-field-label-color: var(--sbb-color-metal-default);
  --sbb-form-field-prefix-color: var(--sbb-color-metal-default);
  --sbb-form-field-padding-inline: var(--sbb-spacing-fixed-3x);
  --sbb-form-field-text-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-arrow-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-error-divider-width: var(--sbb-spacing-fixed-1x);
  --sbb-form-field-error-padding-block-start: var(--sbb-form-field-error-divider-width);
  --sbb-form-field-gap: var(--sbb-spacing-fixed-2x);
  --sbb-form-field-label-to-input-gap: calc(-1 * var(--sbb-spacing-fixed-1x));
  --sbb-form-field-select-inline-padding-end: calc(
    var(--sbb-icon-svg-width) + var(--sbb-form-field-gap)
  );
  --sbb-form-field-overflow: hidden;

  // Lock sbb-icon size
  --sbb-icon-svg-width: var(--sbb-size-icon-ui-small);
  --sbb-icon-svg-height: var(--sbb-size-icon-ui-small);

  // As the form field has always a white background, we have to fix the focus outline color
  // to default color for cases where the form field is used in a negative context.
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-default);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: ButtonBorder;
  }

  display: inline-block;
}

:host(:where(:not([width='collapse']))) {
  min-width: #{sbb.px-to-rem-build(150)};
  width: min(#{sbb.px-to-rem-build(300)}, 100%);
}

:host([negative]) {
  --sbb-form-field-background-color: var(--sbb-color-midnight-default);
  --sbb-form-field-border-color: var(--sbb-color-smoke-default);
  --sbb-form-field-label-color: var(--sbb-color-smoke-default);
  --sbb-form-field-prefix-color: var(--sbb-color-smoke-default);
  --sbb-form-field-text-color: var(--sbb-color-milk-default);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);
  --sbb-form-field-arrow-color: var(--sbb-color-milk-default);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: ButtonBorder;
  }
}

:host([size='l']) {
  --sbb-form-field-height: var(--sbb-size-form-element-l-min-height);
  --sbb-form-field-padding-inline: var(--sbb-spacing-responsive-xxxs);
}

:host([error-space='reserve']) {
  --form-field-error-min-height: calc(
    var(--sbb-typo-line-height-body-text) * var(--sbb-font-size-text-xs)
  );
  --sbb-form-field-error-padding-block-start-override: var(--sbb-form-field-error-divider-width);
}

:host(:is([data-readonly], [data-disabled])) {
  --sbb-form-field-background-color: var(--sbb-color-milk-default);
  --sbb-form-field-border-color: var(--sbb-color-graphite-default);
  --sbb-form-field-arrow-color: var(--sbb-color-granite-default);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: ButtonBorder;
  }
}

:host(:is([data-readonly], [data-disabled])[negative]) {
  --sbb-form-field-background-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-arrow-color: var(--sbb-color-smoke-default);
}

:host([data-disabled]) {
  --sbb-form-field-label-color: var(--sbb-color-granite-default);
  --sbb-form-field-prefix-color: var(--sbb-color-granite-default);
  --sbb-form-field-border-style: dashed;

  @include sbb.if-forced-colors {
    --sbb-form-field-label-color: GrayText !important;
    --sbb-form-field-prefix-color: GrayText !important;
    --sbb-form-field-text-color: GrayText !important;
    --sbb-form-field-border-color: GrayText !important;
  }
}

:host([data-disabled][negative]) {
  --sbb-form-field-text-color: var(--sbb-color-smoke-default);
}

:host([data-readonly]:not([negative])) {
  --sbb-form-field-label-color: var(--sbb-color-granite-default);
  --sbb-form-field-prefix-color: var(--sbb-color-granite-default);
}

:host(:is([data-input-focused], [data-has-popup-open])) {
  --sbb-form-field-border-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-prefix-color: var(--sbb-color-charcoal-default);
  --sbb-form-field-border-width: var(--sbb-border-width-2x);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: Highlight !important;
    --sbb-form-field-prefix-color: Highlight !important;
  }
}

:host(:is([data-input-focused], [data-has-popup-open])[negative]) {
  --sbb-form-field-border-color: var(--sbb-color-milk-default);
  --sbb-form-field-prefix-color: var(--sbb-color-milk-default);
}

:host([data-invalid]) {
  --sbb-form-field-border-color: var(--sbb-color-red125-default);
  --sbb-form-field-text-color: var(--sbb-color-red125-default);

  @include sbb.if-forced-colors {
    --sbb-form-field-border-color: LinkText !important;
    --sbb-form-field-text-color: LinkText !important;
  }
}

:host([data-invalid][negative]) {
  --sbb-form-field-border-color: var(--sbb-color-red-mode-dark);
  --sbb-form-field-text-color: var(--sbb-color-red-mode-dark);
}

:host(:not([data-has-error])) {
  --sbb-form-field-error-padding-block-start: 0;
}

:host([floating-label]) {
  --sbb-select-placeholder-color: transparent;
}

// Should be after other definitions to override overflow and background
:host([data-input-type='sbb-slider']) {
  --sbb-form-field-overflow: visible;
  --sbb-form-field-background-color: var(--sbb-color-white-default);
}

.sbb-form-field__space-wrapper {
  @include sbb.zero-width-space;

  display: flex;
  flex-direction: column;
}

.sbb-form-field__wrapper {
  display: flex;
  align-items: center;
  gap: var(--sbb-form-field-gap);
  padding-inline: calc(var(--sbb-form-field-padding-inline) - var(--sbb-form-field-border-width));
  border: var(--sbb-form-field-border-width) var(--sbb-form-field-border-style)
    var(--sbb-form-field-border-color);
  border-radius: var(--sbb-form-field-border-radius);
  height: var(--sbb-form-field-height);
  background-color: var(--sbb-form-field-background-color);

  :host([data-input-focused][data-focus-origin='keyboard']) & {
    @include sbb.focus-outline;
  }

  // In high contrast, there is no borderless variant
  @media (forced-colors: none) {
    :host(:is([borderless], [data-input-type='sbb-slider'])) & {
      border-color: transparent;
    }

    :host(:is([data-input-focused], [data-has-popup-open])[borderless]) & {
      position: relative;

      &::after {
        content: '';
        position: absolute;
        border-block-end: var(--sbb-border-width-1x) var(--sbb-form-field-border-style)
          var(--sbb-form-field-border-color);
        inset-inline: calc(var(--sbb-form-field-padding-inline) - 2 * var(--sbb-border-width-1x));
        inset-block-end: calc(-2 * var(--sbb-border-width-1x));
      }
    }
  }
}

// Ensure slotted inline elements are vertically centered
::slotted(*[slot='prefix']),
::slotted(*[slot='suffix']) {
  min-width: var(--sbb-icon-svg-width);
  display: flex;
}

::slotted(*[slot='prefix']) {
  color: var(--sbb-form-field-prefix-color);
}

::slotted(sbb-form-field-clear) {
  :host(:is([data-input-empty], [data-disabled], [data-readonly])) & {
    display: none;
  }
}

@include sbb.if-forced-colors {
  // Align with prefix color
  ::slotted(*[slot='suffix']) {
    color: var(--sbb-form-field-prefix-color);
  }
}

.sbb-form-field__select-input-icon {
  @include sbb.absolute-center-y;

  inset-inline-end: 0;
  position: absolute;
  pointer-events: none;
  color: var(--sbb-form-field-arrow-color);
}

.sbb-form-field__input-container {
  flex: 1 1 auto;
  position: relative;

  // Prevents overflowing parent
  min-width: 0;
}

.sbb-form-field__label-spacer {
  display: flex;
  height: calc(var(--sbb-font-size-text-xs) * var(--sbb-typo-line-height-body-text));

  // Moves label down and input up to meet positioning requirements
  margin-block-end: var(--sbb-form-field-label-to-input-gap);
}

.sbb-form-field__label {
  @include sbb.text-xs--regular;

  display: flex;
  max-width: 100%;
  cursor: default;
  position: absolute;
  inset-block-start: 0;
  color: var(--sbb-form-field-label-color);

  :host([data-input-type='select']) &,
  :host([data-input-type='sbb-select']) & {
    padding-inline-end: var(--sbb-form-field-select-inline-padding-end);
  }

  :host([floating-label]) & {
    transform-origin: 0 0;
    pointer-events: none; // We shouldn't catch mouse events (let them through).
    backface-visibility: hidden;
    will-change: transform, font-size;

    transition: {
      duration: var(--sbb-animation-duration-2x);
      timing-function: var(--sbb-animation-easing);
      property: transform, font-size;
    }
  }

  // If floating-label is activated and there is no focus in it (except for select) and no popup is open
  // and input is empty
  // then apply the label transition.
  // If it is empty and readonly, always apply transition
  :host(
      [floating-label]:is(
          :not([data-input-focused]:not([data-input-type='sbb-select']), [data-has-popup-open]),
          [data-readonly]
        )[data-input-empty]
    )
    & {
    font-size: var(--sbb-font-size-text-m);
    transform: translateY(#{sbb.px-to-rem-build(8.5)});

    @include sbb.mq($from: medium) {
      transform: translateY(#{sbb.px-to-rem-build(10.5)});
    }
  }
}

.sbb-form-field__label-ellipsis {
  @include sbb.ellipsis;
}

// Input

.sbb-form-field__input ::slotted(:where(input, select, sbb-select)) {
  @include sbb.text-m--regular;
  @include sbb.ellipsis;
  @include sbb.input-reset;

  overflow: var(--sbb-form-field-overflow);
  width: 100%;
  box-sizing: border-box;
  color: var(--sbb-form-field-text-color);

  // Fill color needed for Safari
  -webkit-text-fill-color: var(--sbb-form-field-text-color);
  opacity: 1;
  background-color: transparent;

  // To be more specific than the styles in normalize.scss we need to use !important
  // TODO: Find a better solution
  font-size: var(--sbb-font-size-text-m) !important;
  font-family: var(--sbb-typo-type-face-sbb-roman) !important;
  line-height: var(--sbb-typo-line-height-body-text) !important;

  &::placeholder {
    @include sbb.placeholder;

    :host([floating-label]) & {
      color: transparent !important;
      -webkit-text-fill-color: transparent !important;

      @include sbb.if-forced-colors {
        color: Canvas !important;
        -webkit-text-fill-color: Canvas !important;
      }
    }

    :host([data-disabled]:not([floating-label])) & {
      color: var(--sbb-color-granite-default);
      -webkit-text-fill-color: var(--sbb-color-granite-default);
    }
  }

  // Fix positioning issue for select which occurs in Safari
  :host([data-input-type='select']) & {
    vertical-align: middle;
  }
}

.sbb-form-field__input ::slotted(:where(select, sbb-select)) {
  padding-inline-end: var(--sbb-form-field-select-inline-padding-end);
}

.sbb-form-field__error {
  display: flex;
  min-height: var(--form-field-error-min-height);
  margin-block-start: var(
    --sbb-form-field-error-padding-block-start-override,
    var(--sbb-form-field-error-padding-block-start)
  );
}

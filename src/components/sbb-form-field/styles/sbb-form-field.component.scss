// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin, available for shared
// and default mode
@include host-component-properties;

:host {
  display: block;

  --text-color-label: var(--sbb-color-metal-default);

  --text-color-input-default: var(--sbb-color-charcoal-default);
  --text-color-input-error: var(--sbb-color-red125-default);

  --border-color-default: var(--sbb-color-smoke-default);
  --border-color-disabled: var(--sbb-color-graphite-default);
  --border-color-error: var(--sbb-color-red125-default);
  --border-color-focus: var(--sbb-color-charcoal-default);

  --background-color-default: var(--sbb-color-white-default);
  --background-color-disabled: var(--sbb-color-milk-default);
  --text-color-readonly: var(--sbb-color-granite-default);
  --text-color-disabled: var(--border-color-disabled);

  --input-with-icon-padding-inline: calc(var(--sbb-spacing-fixed-3x) + var(--sbb-size-icon-ui-small) + var(--sbb-spacing-fixed-2x));

  --icon-size: var(--sbb-size-icon-ui-small);


  // waiting for token update
  // --input-height-m: var(--sbb-size-form-element-m-min-height-small)
  --input-height-m: var(--sbb-size-form-element-m-min-height-small);
  --input-height-l: var(--sbb-size-form-element-l-min-height-small);

  @include mq($from: medium) {
    --input-height-m: var(--sbb-size-form-element-m-min-height-medium);
    --input-height-l: var(--sbb-size-form-element-l-min-height-medium);
  }
}

.input-wrapper {
  position: relative;
}

::slotted(.input-wrapper--error) {
  color: var(--text-color-input-error);
}

::slotted(.input-wrapper__inner) {
  position: relative;
}

// Input
::slotted(.input) {
  @include text-m--regular();
  @include placeholder();
  @include ellipsis();

  -webkit-appearance: none;
  width: 100%;
  box-sizing: border-box;
  padding-block-start: var(--sbb-spacing-fixed-5x);
  padding-inline-start: var(--sbb-spacing-fixed-3x);
  padding-inline-end: var(--sbb-spacing-fixed-3x);

  background-color: var(--background-color-default);
  border: var(--sbb-border-width-1x) solid var(--border-color-default);
}

::slotted(.input.form-field--size-m) {
  height: var(--input-height-m);
  border-radius: var(--sbb-border-radius-4x);
}
::slotted(.input.form-field--size-l) {
  height: var(--input-height-l);
  border-radius: var(--sbb-border-radius-8x);
}
::slotted(.input.form-field--borderless),
::slotted(.input.form-field--borderless:focus),
::slotted(.sbb-invalid.form-field--borderless),
::slotted(.ng-touched.ng-invalid.form-field--borderless) {
  border-color: var(--background-color-default);
}
::slotted(.input:focus) {
  border-color: var(--border-color-focus);
  outline: none;
}

::slotted(.input[disabled]) {
  color: var(--text-color-disabled);
  border-color: var(--text-color-disabled);
  background-color: var(--background-color-disabled);
}
::slotted(.input[disabled] + .input-label) {
  color: var(--text-color-disabled);
}
::slotted(.input.form-field--borderless[disabled]) {
  border-color: var(--background-color-disabled);
}

::slotted(.input[readonly]) {
  color: var(--text-color-readonly);
  border-color: var(--text-color-disabled);
  background-color: var(--background-color-disabled);
}
::slotted(.input.form-field--borderless[readonly]) {
  border-color: var(--background-color-disabled);
}

// Input Icon
::slotted(.input__icon-prefix),
::slotted(.input__icon-suffix) {
  @include absoluteCenterY;
  height: var(--icon-size);
  overflow: hidden;
  fill: currentColor;
}

::slotted(.input__icon-prefix) {
  inset-inline-start: var(--sbb-spacing-fixed-3x);
}
::slotted(.input__icon-suffix) {
  inset-inline-end: var(--sbb-spacing-fixed-3x);
}

// Input Variant
.form--prefix ::slotted(.input) {
  padding-inline-start: var(--input-with-icon-padding-inline);
}

.form--suffix ::slotted(.input) {
  padding-inline-end: var(--input-with-icon-padding-inline);
}

::slotted(.sbb-invalid),
::slotted(.ng-touched.ng-invalid) {
  color: inherit;
  border-color: var(--border-color-error);
}

// Label
.input-label {
  @include text-xs--regular();
  position: absolute;
  inset-block-start: var(--sbb-spacing-fixed-1x);
  inset-block-end: var(--sbb-spacing-fixed-1x);
  inset-inline-start: 0;

  display: flex;
  max-width: 100%;
  padding-inline-start: var(--sbb-spacing-fixed-3x);
  padding-inline-end: var(--sbb-spacing-fixed-3x);
  color: var(--text-color-label);
  user-select: none;
  pointer-events: none;
}
.input-label--text {
  @include ellipsis();
}

.input-label--optional {
  flex: 0 0 auto;
}

// Label Variants
.form-field--size-l .input-label {
  padding-block-start: var(--sbb-spacing-fixed-1x);
}
.form--prefix .input-label {
  padding-inline-start: var(--input-with-icon-padding-inline);
}

@use '../../core/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

$icon-only: ':where([data-slot-names~=icon], [icon-name]):not([data-slot-names~=unnamed])';

:host {
  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize css of several frameworks.
  outline: none !important;

  --sbb-button-icon-size: var(--sbb-size-icon-ui-small);

  // we use primary button styles as default values
  --sbb-button-color-active-background: var(--sbb-color-red150-default);
  --sbb-button-color-active-border: var(--sbb-color-red150-default);
  --sbb-button-color-active-text: var(--sbb-color-cloud-default);
  --sbb-button-color-default-background: var(--sbb-color-red-default);
  --sbb-button-color-default-border: var(--sbb-color-red-default);
  --sbb-button-color-default-text: var(--sbb-color-white-default);
  --sbb-button-color-disabled-background: var(--sbb-color-milk-default);
  --sbb-button-color-disabled-border: var(--sbb-color-cloud-default);
  --sbb-button-color-disabled-text: var(--sbb-color-granite-default);
  --sbb-button-color-hover-background: var(--sbb-color-red125-default);
  --sbb-button-color-hover-border: var(--sbb-color-red125-default);
  --sbb-button-color-hover-text: var(--sbb-color-milk-default);
  --sbb-button-shadow-1-offset-y: var(--sbb-shadow-elevation-level-3-shadow-1-offset-y);
  --sbb-button-shadow-2-offset-y: var(--sbb-shadow-elevation-level-3-shadow-2-offset-y);
  --sbb-button-shadow-1-blur: var(--sbb-shadow-elevation-level-3-shadow-1-blur);
  --sbb-button-shadow-2-blur: var(--sbb-shadow-elevation-level-3-shadow-2-blur);
  --sbb-button-shadow-1-color: var(--sbb-color-red-alpha-20);
  --sbb-button-shadow-2-color: var(--sbb-color-red125-alpha-20);
  --sbb-button-border-width: var(--sbb-border-width-2x);
  --sbb-button-border-radius: var(--sbb-border-radius-infinity);
  --sbb-button-min-height: var(--sbb-size-button-l-min-height);
  --sbb-button-transition-duration: var(--sbb-animation-duration-2x);
  --sbb-button-transition-easing-function: var(--sbb-animation-easing);
  --sbb-button-padding-block-min: var(--sbb-spacing-fixed-1x);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  --sbb-button-gap: var(--sbb-spacing-fixed-2x);
  --sbb-button-inset: 0;

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-10x);
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-default-border: CanvasText !important;
    --sbb-button-color-active-border: Highlight !important;
  }
}

:host([negative]) {
  --sbb-button-color-disabled-background: var(--sbb-color-anthracite-default);
  --sbb-button-color-disabled-border: var(--sbb-color-granite-default);
  --sbb-button-color-disabled-text: var(--sbb-color-aluminium-default);
}

:host([variant='primary'][negative]) {
  --sbb-button-color-active-background: var(--sbb-color-cloud-default);
  --sbb-button-color-active-border: var(--sbb-color-cloud-default);
  --sbb-button-color-active-text: var(--sbb-color-red150-default);
  --sbb-button-color-default-background: var(--sbb-color-white-default);
  --sbb-button-color-default-border: var(--sbb-color-white-default);
  --sbb-button-color-default-text: var(--sbb-color-red-default);
  --sbb-button-color-hover-background: var(--sbb-color-milk-default);
  --sbb-button-color-hover-border: var(--sbb-color-milk-default);
  --sbb-button-color-hover-text: var(--sbb-color-red125-default);
  --sbb-button-shadow-1-color: var(--sbb-color-smoke-alpha-20);
  --sbb-button-shadow-2-color: var(--sbb-color-metal-alpha-20);
}

:host([variant='secondary']) {
  --sbb-button-color-active-background: var(--sbb-color-milk-default);
  --sbb-button-color-active-border: var(--sbb-color-cloud-default);
  --sbb-button-color-active-text: var(--sbb-color-anthracite-default);
  --sbb-button-color-default-background: var(--sbb-color-white-default);
  --sbb-button-color-default-border: var(--sbb-color-cloud-default);
  --sbb-button-color-default-text: var(--sbb-color-charcoal-default);
  --sbb-button-color-hover-background: var(--sbb-color-white-default);
  --sbb-button-color-hover-border: var(--sbb-color-cloud-default);
  --sbb-button-color-hover-text: var(--sbb-color-iron-default);
  --sbb-button-shadow-1-color: var(--sbb-color-platinum-alpha-20);
  --sbb-button-shadow-2-color: var(--sbb-color-cement-alpha-20);
}

:host([variant='secondary'][negative]) {
  --sbb-button-color-active-background: transparent;
  --sbb-button-color-active-border: var(--sbb-color-cloud-default);
  --sbb-button-color-active-text: var(--sbb-color-cloud-default);
  --sbb-button-color-default-background: transparent;
  --sbb-button-color-default-border: var(--sbb-color-white-default);
  --sbb-button-color-default-text: var(--sbb-color-white-default);
  --sbb-button-color-hover-background: transparent;
  --sbb-button-color-hover-border: var(--sbb-color-milk-default);
  --sbb-button-color-hover-text: var(--sbb-color-milk-default);
}

:host([variant='tertiary']) {
  --sbb-button-color-active-background: var(--sbb-color-black-default);
  --sbb-button-color-active-border: var(--sbb-color-cloud-default);
  --sbb-button-color-active-text: var(--sbb-color-cloud-default);
  --sbb-button-color-default-background: var(--sbb-color-charcoal-default);
  --sbb-button-color-default-border: var(--sbb-color-cloud-default);
  --sbb-button-color-default-text: var(--sbb-color-white-default);
  --sbb-button-color-hover-background: var(--sbb-color-midnight-default);
  --sbb-button-color-hover-border: var(--sbb-color-cloud-default);
  --sbb-button-color-hover-text: var(--sbb-color-milk-default);
  --sbb-button-shadow-1-color: var(--sbb-color-platinum-alpha-20);
  --sbb-button-shadow-2-color: var(--sbb-color-cement-alpha-20);
}

:host([variant='transparent']) {
  --sbb-button-color-active-background: var(--sbb-color-cloud-default);
  --sbb-button-color-active-border: var(--sbb-color-cloud-default);
  --sbb-button-color-active-text: var(--sbb-color-black-default);
  --sbb-button-color-default-background: transparent;
  --sbb-button-color-default-border: transparent;
  --sbb-button-color-default-text: var(--sbb-color-black-default);
  --sbb-button-color-hover-background: var(--sbb-color-milk-default);
  --sbb-button-color-hover-border: var(--sbb-color-milk-default);
  --sbb-button-color-hover-text: var(--sbb-color-black-default);
}

:host([variant='transparent'][negative]) {
  --sbb-button-color-active-background: var(--sbb-color-iron-default);
  --sbb-button-color-active-border: var(--sbb-color-iron-default);
  --sbb-button-color-active-text: var(--sbb-color-white-default);
  --sbb-button-color-default-background: transparent;
  --sbb-button-color-default-border: transparent;
  --sbb-button-color-default-text: var(--sbb-color-white-default);
  --sbb-button-color-hover-background: var(--sbb-color-charcoal-default);
  --sbb-button-color-hover-border: var(--sbb-color-charcoal-default);
  --sbb-button-color-hover-text: var(--sbb-color-white-default);
}

:host([size='m']) {
  --sbb-button-min-height: var(--sbb-size-button-m-min-height);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-5x);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  }
}

:host(#{$icon-only}) {
  --sbb-button-padding-inline: 0;
  --icon-margin-inline-end: 0;
}

:host([disabled]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-disabled-text: GrayText !important;
  }
}

:host(:not([disabled], :active, [data-active]):hover) {
  @include sbb.hover-mq($hover: true) {
    --sbb-button-translate-y-content-hover: #{sbb.px-to-rem-build(-1)};
    --sbb-button-shadow-1-offset-y: calc(
      0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-offset-y)
    );
    --sbb-button-shadow-1-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-blur));
    --sbb-button-shadow-2-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-2-blur));
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-hover-border: Highlight !important;
  }
}

:host([role='button']) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: ButtonText !important;
    --sbb-button-color-hover-text: ButtonText !important;
    --sbb-button-color-active-text: ButtonText !important;
    --sbb-button-color-default-background: Canvas !important;
    --sbb-button-color-hover-background: Canvas !important;
    --sbb-button-color-active-background: Canvas !important;
    --sbb-button-color-disabled-background: Canvas !important;
  }
}

:host([data-icon-small]) {
  @include sbb.icon-button-variables;

  --sbb-button-shadow-1-offset-y: var(--sbb-shadow-elevation-level-3-shadow-1-spread);
  --sbb-button-shadow-2-offset-y: var(--sbb-shadow-elevation-level-3-shadow-1-spread);
  --sbb-button-shadow-1-blur: var(--sbb-shadow-elevation-level-3-shadow-1-spread);
  --sbb-button-shadow-2-blur: var(--sbb-shadow-elevation-level-3-shadow-1-spread);
  --sbb-button-shadow-1-color: var(--sbb-color-black-alpha-0);
  --sbb-button-shadow-2-color: var(--sbb-color-black-alpha-0);
}

:host([data-icon-small][negative]) {
  @include sbb.icon-button-variables-negative;

  --sbb-button-shadow-1-color: var(--sbb-color-black-alpha-0);
  --sbb-button-shadow-2-color: var(--sbb-color-black-alpha-0);
}

:is(.sbb-button, .sbb-button-link, .sbb-button-static) {
  @include sbb.text-xs--bold;
  @include sbb.font-smoothing;

  // Reset for link variant
  text-decoration: none;
  width: 100%;
  position: relative;
  display: flex;
  gap: var(--sbb-button-gap);
  align-items: center;
  justify-content: center;
  text-align: left;
  transition-duration: var(--sbb-button-transition-duration);
  transition-timing-function: var(--sbb-button-transition-easing-function);
  transition-property: color;
  min-height: var(--sbb-button-min-height);
  border-radius: var(--sbb-button-border-radius);

  // The padding block value is only a minimal padding to preserve a padding if the content becomes larger than intended.
  // Positioning of the content is made by flexbox vertical centering.
  // The real padding displayed is larger than the defined value below.
  padding-block: var(--sbb-button-padding-block-min);
  padding-inline: var(--sbb-button-padding-inline);
  color: var(--sbb-button-color-default-text);
  cursor: pointer;
  user-select: none;

  // Renders background and border in the background absolute to enable the hover animation
  &::before {
    position: absolute;
    content: '';
    inset: var(--sbb-button-inset);
    border: var(--sbb-button-border-width) solid var(--sbb-button-color-default-border);
    border-radius: var(--sbb-button-border-radius);
    background-color: var(--sbb-button-color-default-background);
    transition-duration: var(--sbb-button-transition-duration);
    transition-timing-function: var(--sbb-button-transition-easing-function);
    transition-property: inset, background-color, border-color, box-shadow;

    :host([disabled]) & {
      background-color: var(--sbb-button-color-disabled-background);
      border-color: var(--sbb-button-color-disabled-border);
    }

    // Hide focus outline when focus origin is mouse or touch. This is being used as a workaround in various components.
    :host(
        :is(
            [data-focus-visible],
            :focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch'])
          )
      )
      & {
      @include sbb.focus-outline;
    }

    :host(:not([disabled], :active, [data-active]):hover) & {
      @include sbb.hover-mq($hover: true) {
        inset: calc(var(--sbb-button-border-width) * -1);
        background-color: var(--sbb-button-color-hover-background);
        border-color: var(--sbb-button-color-hover-border);
      }
    }

    :host(:not([disabled]):is(:active, [data-active])) & {
      color: var(--sbb-button-color-active-text);
      background-color: var(--sbb-button-color-active-background);
      border-color: var(--sbb-button-color-active-border);
    }

    // Only apply shadow definitions where it is really used.
    :host(
        :is([variant='primary'], [variant='secondary']:not([negative]), [variant='tertiary']):not(
            [disabled],
            :active,
            [data-active]
          )
      )
      & {
      box-shadow:
        var(--sbb-shadow-elevation-level-3-shadow-2-offset-x) var(--sbb-button-shadow-2-offset-y)
          var(--sbb-button-shadow-2-blur) var(--sbb-shadow-elevation-level-3-shadow-2-spread)
          var(--sbb-button-shadow-2-color),
        var(--sbb-shadow-elevation-level-3-shadow-1-offset-x) var(--sbb-button-shadow-1-offset-y)
          var(--sbb-button-shadow-1-blur) var(--sbb-shadow-elevation-level-3-shadow-1-spread)
          var(--sbb-button-shadow-1-color);
    }
  }

  :host(#{$icon-only}) & {
    width: var(--sbb-button-min-height);
    justify-content: center;
  }

  :host([disabled]) & {
    color: var(--sbb-button-color-disabled-text);
    cursor: default;
    pointer-events: none;
    text-decoration: line-through;
  }

  :host(:not([disabled], :active, [data-active]):hover) & {
    @include sbb.hover-mq($hover: true) {
      color: var(--sbb-button-color-hover-text);
    }
  }
}

.sbb-button__label,
.sbb-button__icon {
  transition: transform var(--sbb-button-transition-duration)
    var(--sbb-button-transition-easing-function);
  transform: translateY(var(--sbb-button-translate-y-content-hover, #{sbb.px-to-rem-build(0)}));
}

.sbb-button__label {
  @include sbb.ellipsis;

  display: block;

  :host(#{$icon-only}) & {
    display: none;
  }
}

.sbb-button__icon {
  display: flex;

  :host(:not([data-slot-names~='icon'], [icon-name])) & {
    display: none;
  }
}

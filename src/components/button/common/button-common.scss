@use '../../core/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

$icon-only: ':where([data-slot-names~=icon], [icon-name]):not([data-slot-names~=unnamed])';

:host {
  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize css of several frameworks.
  outline: none !important;

  --sbb-button-icon-size: var(--sbb-size-icon-ui-small);
  --sbb-button-color-disabled-background: var(--sbb-color-milk-default);
  --sbb-button-color-disabled-border: var(--sbb-color-cloud-default);
  --sbb-button-color-disabled-text: var(--sbb-color-granite-default);
  --sbb-button-shadow-1-offset-y: var(--sbb-shadow-elevation-level-3-shadow-1-offset-y);
  --sbb-button-shadow-2-offset-y: var(--sbb-shadow-elevation-level-3-shadow-2-offset-y);
  --sbb-button-shadow-1-blur: var(--sbb-shadow-elevation-level-3-shadow-1-blur);
  --sbb-button-shadow-2-blur: var(--sbb-shadow-elevation-level-3-shadow-2-blur);
  --sbb-button-shadow-1-color: var(--sbb-color-red-alpha-20);
  --sbb-button-shadow-2-color: var(--sbb-color-red125-alpha-20);
  --sbb-button-border-width: var(--sbb-border-width-2x);
  --sbb-button-border-radius: var(--sbb-border-radius-infinity);
  --sbb-button-min-height: var(--sbb-size-button-l-min-height);
  --sbb-button-transition-duration: var(--sbb-animation-duration-2x);
  --sbb-button-transition-easing-function: var(--sbb-animation-easing);
  --sbb-button-padding-block-min: var(--sbb-spacing-fixed-1x);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  --sbb-button-gap: var(--sbb-spacing-fixed-2x);
  --sbb-button-inset: 0;

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-10x);
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-default-border: CanvasText !important;
    --sbb-button-color-active-border: Highlight !important;
  }
}

:host([negative]) {
  --sbb-button-color-disabled-background: var(--sbb-color-anthracite-default);
  --sbb-button-color-disabled-border: var(--sbb-color-granite-default);
  --sbb-button-color-disabled-text: var(--sbb-color-aluminium-default);
}

:host([size='m']) {
  --sbb-button-min-height: var(--sbb-size-button-m-min-height);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-5x);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  }
}

:host(#{$icon-only}) {
  --sbb-button-padding-inline: 0;
  --icon-margin-inline-end: 0;
}

:host([disabled]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-disabled-text: GrayText !important;
  }
}

:host(:not([disabled], :active, [data-active]):hover) {
  @include sbb.hover-mq($hover: true) {
    --sbb-button-translate-y-content-hover: #{sbb.px-to-rem-build(-1)};
    --sbb-button-shadow-1-offset-y: calc(
      0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-offset-y)
    );
    --sbb-button-shadow-1-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-blur));
    --sbb-button-shadow-2-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-2-blur));
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-hover-border: Highlight !important;
  }
}

:host([role='button']) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: ButtonText !important;
    --sbb-button-color-hover-text: ButtonText !important;
    --sbb-button-color-active-text: ButtonText !important;
    --sbb-button-color-default-background: Canvas !important;
    --sbb-button-color-hover-background: Canvas !important;
    --sbb-button-color-active-background: Canvas !important;
    --sbb-button-color-disabled-background: Canvas !important;
  }
}

[class$='-link'],
[class$='-static'],
[class$='-button'] {
  @include sbb.button-base;

  &::before {
    // Only apply shadow definitions where it is really used.
    :host(
        :is(
            sbb-button,
            sbb-secondary-button:not([negative]),
            sbb-tertiary-button,
            sbb-button-link,
            sbb-secondary-button-link:not([negative]),
            sbb-tertiary-button-link,
            sbb-button-static,
            sbb-secondary-button-static:not([negative]),
            sbb-tertiary-button-static
          ):not([disabled], :active, [data-active])
      )
      & {
      box-shadow:
        var(--sbb-shadow-elevation-level-3-shadow-2-offset-x) var(--sbb-button-shadow-2-offset-y)
          var(--sbb-button-shadow-2-blur) var(--sbb-shadow-elevation-level-3-shadow-2-spread)
          var(--sbb-button-shadow-2-color),
        var(--sbb-shadow-elevation-level-3-shadow-1-offset-x) var(--sbb-button-shadow-1-offset-y)
          var(--sbb-button-shadow-1-blur) var(--sbb-shadow-elevation-level-3-shadow-1-spread)
          var(--sbb-button-shadow-1-color);
    }
  }
}

.sbb-button__label,
.sbb-button__icon {
  transition: transform var(--sbb-button-transition-duration)
    var(--sbb-button-transition-easing-function);
  transform: translateY(var(--sbb-button-translate-y-content-hover, #{sbb.px-to-rem-build(0)}));
}

.sbb-button__label {
  @include sbb.ellipsis;

  display: block;

  :host(#{$icon-only}) & {
    display: none;
  }
}

.sbb-button__icon {
  display: flex;

  :host(:not([data-slot-names~='icon'], [icon-name])) & {
    display: none;
  }
}

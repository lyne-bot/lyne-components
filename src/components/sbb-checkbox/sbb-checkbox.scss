@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-checkbox-border-width: var(--sbb-border-width-1x);
  --sbb-checkbox-dimension: var(--sbb-size-icon-ui-small);
  --sbb-checkbox-border-color: var(--sbb-color-smoke-default);
  --sbb-checkbox-selection-color: var(--sbb-color-red-default);
  --sbb-checkbox-label-color: var(--sbb-color-charcoal-default);
  --sbb-checkbox-cursor: pointer;

  @include sbb.if-forced-colors {
    --sbb-checkbox-selection-color: Canvas;
  }

  display: inline-block;
  outline: none;
}

:host([data-group-disabled]),
:host([disabled]:not([disabled='false'])) {
  --sbb-checkbox-color: var(--sbb-color-graphite-default);
  --sbb-checkbox-border-color: var(--sbb-color-graphite-default);
  --sbb-checkbox-selection-color: var(--sbb-color-graphite-default);
  --sbb-checkbox-label-color: var(--sbb-color-smoke-default);
  --sbb-checkbox-cursor: default;

  @include sbb.if-forced-colors {
    --sbb-checkbox-selection-color: Canvas;
  }
}

:host([indeterminate]:not([indeterminate='false'])) {
  @include sbb.if-forced-colors {
    --sbb-checkbox-selection-color: ButtonBorder;
  }
}

:host(
    [indeterminate]:not([indeterminate='false']):is(
        [data-group-disabled],
        [disabled]:not([disabled='false'])
      )
  ) {
  @include sbb.if-forced-colors {
    --sbb-checkbox-selection-color: GrayText;
  }
}

.sbb-checkbox-wrapper {
  display: flex;

  @include sbb.zero-width-space;

  :host(:focus-visible) & {
    @include sbb.focus-outline;

    border-radius: calc(var(--sbb-border-radius-4x) - var(--sbb-focus-outline-offset));
  }
}

.sbb-checkbox {
  @include sbb.text-s--regular;

  position: relative;
  display: block;
  width: 100%;
  color: var(--sbb-checkbox-label-color);
  cursor: var(--sbb-checkbox-cursor);
  user-select: none;
  -webkit-tap-highlight-color: transparent;

  :host([size='m']) & {
    @include sbb.text-m--regular;
  }
}

.sbb-checkbox__inner {
  display: flex;
  align-items: start;
  gap: var(--sbb-spacing-fixed-2x);
}

input[type='checkbox'] {
  @include sbb.invisible-container-overlay;
}

.sbb-checkbox__aligner,
.sbb-checkbox__label--icon {
  display: flex;
  align-items: center;
  height: calc(1em * var(--sbb-typo-line-height-body-text));
}

.sbb-checkbox__label--icon {
  :host([icon-placement='end']) & {
    margin-left: auto;
  }
}

.sbb-checkbox__selection {
  display: block;
  position: relative;
  min-width: var(--sbb-checkbox-dimension);
  height: var(--sbb-checkbox-dimension);
  border-radius: var(--sbb-border-radius-2x);
  box-shadow: var(--sbb-checkbox-border-color) 0 0 0 var(--sbb-checkbox-border-width) inset;
  background-color: var(--sbb-color-white-default);

  @include sbb.if-forced-colors {
    outline: var(--sbb-border-width-2x) solid ButtonBorder;
    outline-offset: calc(-1 * var(--sbb-border-width-2x));

    :host([checked]:not([checked='false'])) & {
      background-color: HighLight;
      outline: none;
    }

    :host([disabled]:not([disabled='false'])) & {
      outline-color: GrayText;
    }

    :host([checked]:not([checked='false'])[disabled]:not([disabled='false'])) & {
      background-color: GrayText;
    }
  }
}

.sbb-checkbox__icon {
  display: inline-flex;
  width: var(--sbb-checkbox-dimension);
  height: var(--sbb-checkbox-dimension);

  svg {
    margin: auto;
  }

  path {
    stroke: var(--sbb-checkbox-selection-color);
  }
}

.sbb-checkbox__label {
  display: flex;
  gap: var(--sbb-spacing-fixed-2x);
  color: var(--sbb-checkbox-label-color);

  // Fix for Chrome and Safari, they approximate 23.8px to 23px for line-height
  line-height: max((1em * var(--sbb-typo-line-height-body-text)), var(--sbb-checkbox-dimension));

  :host([icon-placement='start']) & {
    flex-direction: row-reverse;
    justify-content: flex-end;
  }

  :host([icon-placement='end']) & {
    justify-content: flex-start;
    flex-grow: 1;
  }
}

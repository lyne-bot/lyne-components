@use '../../global/styles' as sbb;

// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include sbb.host-component-properties;

:host {
  --sbb-notification-visibility: hidden;
  --sbb-notification-opacity: 0;
  --sbb-notification-max-height: 0;
  --sbb-notification-padding-block: 0;
  --sbb-notification-padding-inline: var(--sbb-spacing-responsive-xs);
  --sbb-notification-color: var(--sbb-color-granite-default);
  --sbb-notification-background: var(--sbb-color-white-default);
  --sbb-notification-border: var(--sbb-color-smoke-default) solid var(--sbb-border-width-1x);
  --sbb-notification-type-color: var(--sbb-color-granite-default);
  --sbb-notification-animation-duration: var(--sbb-animation-duration-4x);
  --sbb-notification-timing-function: ease-in;
  --sbb-notification-transition: max-height var(--sbb-notification-animation-duration)
      var(--sbb-animation-duration-2x) var(--sbb-notification-timing-function),
    padding var(--sbb-notification-animation-duration) var(--sbb-animation-duration-2x)
      var(--sbb-notification-timing-function),
    visibility var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function),
    opacity var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function);
}

:host(:is([data-state='opened'], [data-state='opening'])) {
  --sbb-notification-visibility: visible;
  --sbb-notification-opacity: 1;
  --sbb-notification-padding-block: var(--sbb-spacing-responsive-xxs);
  --sbb-notification-max-height: calc(
    (var(--sbb-notification-padding-block) + var(--sbb-border-width-1x)) * 2 +
      var(--sbb-notification-height)
  );
  --sbb-notification-transition: max-height var(--sbb-notification-animation-duration)
      var(--sbb-notification-timing-function),
    padding var(--sbb-notification-animation-duration) var(--sbb-notification-timing-function),
    opacity var(--sbb-notification-animation-duration) var(--sbb-notification-animation-duration)
      var(--sbb-notification-timing-function);
}

:host(:is([data-resize-disable-animation], [disable-animation]:not([disable-animation='false']))) {
  --sbb-notification-animation-duration: 0s;
}

/* Variants */

:host([variant='transparent']) {
  --sbb-notification-background: transparent;
  --sbb-notification-border: none;
  --sbb-notification-padding-block: 0px;
  --sbb-notification-padding-inline: 0px;
}

:host([variant='colorful']) {
  --sbb-notification-color: var(--sbb-color-white-default);
  --sbb-notification-background: var(--sbb-notification-type-color);
  --sbb-notification-border: var(--sbb-color-white-default) solid var(--sbb-border-width-1x);
}

:host([variant='colorful'][type='warn']) {
  --sbb-notification-color: var(--sbb-font-default-color);
}

/* Types */

:host([type='info']) {
  --sbb-notification-type-color: var(--sbb-color-granite-default);
}

:host([type='success']) {
  --sbb-notification-type-color: var(--sbb-color-green-default);
}

:host([type='warn']) {
  --sbb-notification-type-color: var(--sbb-color-peach-default);
}

:host([type='error']) {
  --sbb-notification-type-color: var(--sbb-color-red-default);
}

.sbb-notification {
  @include sbb.text-s--regular;

  display: grid;
  grid-template-columns: 1fr auto;
  align-items: center;
  visibility: var(--sbb-notification-visibility);
  opacity: var(--sbb-notification-opacity);
  padding-block: var(--sbb-notification-padding-block);
  padding-inline: var(--sbb-notification-padding-inline);
  max-height: var(--sbb-notification-max-height);
  color: var(--sbb-notification-color);
  background-color: var(--sbb-notification-background);
  border: var(--sbb-notification-border);
  border-radius: var(--sbb-border-radius-4x);
  transition: var(--sbb-notification-transition);

  @include sbb.mq($from: small) {
    grid-template-columns: auto 1fr auto;
    align-items: flex-start;
  }
}

.sbb-notification__icon {
  margin-block: var(--sbb-spacing-fixed-2x);

  :host(:not([variant='colorful'])) & {
    color: var(--sbb-notification-type-color);
  }

  @include sbb.mq($from: small) {
    margin-block-end: 0;
    margin-block-start: calc(
      (
          (var(--sbb-typo-scale-default) * var(--sbb-typo-line-height-body-text)) -
            var(--sbb-size-icon-ui-small)
        ) / 2
    );

    :host([data-has-title]) & {
      margin-block-start: calc(
        (
            (var(--sbb-font-size-title-5) * var(--sbb-typo-line-height-body-text)) -
              var(--sbb-size-icon-ui-small)
          ) / 2
      );
    }
  }
}

.sbb-notification__title {
  // Overwrite sbb-title default margin
  margin: 0;
}

.sbb-notification__content {
  order: 3;
  grid-area: 2 / 1 / 3 / 3;

  @include sbb.mq($from: small) {
    order: initial;
    grid-area: initial;
    padding-inline: var(--sbb-spacing-responsive-xxxs) var(--sbb-spacing-responsive-xs);
  }
}

.sbb-notification__close-wrapper {
  display: flex;
  align-items: center;
  height: 100%;
  gap: var(--sbb-spacing-responsive-xxs);
  max-height: calc(var(--sbb-size-icon-ui-small) + var(--sbb-spacing-fixed-4x));

  @include sbb.mq($from: small) {
    max-height: 100%;
  }
}

.sbb-notification__divider {
  position: relative;
  inset-inline-start: var(--sbb-border-width-1x);
  height: calc(var(--sbb-size-icon-ui-small) + var(--sbb-spacing-fixed-1x));

  @include sbb.mq($from: small) {
    height: calc(100% - #{sbb.px-to-rem-build(12)});
  }
}

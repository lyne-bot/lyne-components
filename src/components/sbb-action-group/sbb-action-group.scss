// Default component properties, defined for :host. Properties which can not
// travel the shadow boundary are defined through this mixin
@include host-component-properties;

$breakpoints: 'zero', 'micro', 'small', 'medium', 'large', 'wide', 'ultra';
$vertical-orientations: (
  start: flex-start,
  center: center,
  stretch: stretch,
  end: flex-end,
);
$horizontal-orientations: (
  start: flex-start,
  center: center,
  stretch: space-between,
  end: flex-end,
);

@mixin vertical-action-group {
  @each $key, $value in $vertical-orientations {
    /* stylelint-disable-next-line plugin/stylelint-bem-namics */
    .action-group--align-#{$key} {
      --sbb-action-group-align-items: #{$value};
    }
  }

  .action-group {
    align-items: var(--sbb-action-group-align-items);
  }
}

@mixin vertical-action-group-element-align-reset {
  --sbb-action-group-orientation: column;
  @include vertical-action-group;

  ::slotted([align-self='start']) {
    margin-inline-end: unset;
  }

  ::slotted([align-self='center']) {
    margin-inline: unset;
  }

  ::slotted([align-self='end']) {
    margin-inline-start: unset;
  }
}

:host {
  --sbb-action-group-orientation: row;
}

.action-group {
  display: flex;
  flex-direction: var(--sbb-action-group-orientation);
  gap: var(--sbb-spacing-fixed-4x);
}

:host([orientation='vertical']) {
  --sbb-action-group-orientation: column;
  @include vertical-action-group;
}

:host([orientation='horizontal']) {
  @each $key, $value in $horizontal-orientations {
    /* stylelint-disable-next-line plugin/stylelint-bem-namics */
    .action-group--align-#{$key} {
      --sbb-action-group-justify-content: #{$value};
    }
  }

  .action-group {
    justify-content: var(--sbb-action-group-justify-content);
  }

  ::slotted([align-self='start']) {
    margin-inline-end: auto;
  }

  ::slotted([align-self='center']) {
    margin-inline: auto;
  }

  ::slotted([align-self='end']) {
    margin-inline-start: auto;
  }
}

@each $breakpoint in $breakpoints {
  // horizontal-from overrides orientation vertical
  :host([orientation='vertical'][horizontal-from='#{$breakpoint}']) {
    --sbb-action-group-orientation: row;

    @each $key, $value in $horizontal-orientations {
      /* stylelint-disable-next-line plugin/stylelint-bem-namics */
      .action-group--align-#{$key} {
        --sbb-action-group-justify-content: #{$value};
        --sbb-action-group-align-items: unset;
      }

      .action-group {
        justify-content: var(--sbb-action-group-justify-content);
      }

      ::slotted([align-self='start']) {
        margin-inline-end: auto;
      }

      ::slotted([align-self='center']) {
        margin-inline: auto;
      }

      ::slotted([align-self='end']) {
        margin-inline-start: auto;
      }
    }
  }

  // horizontal-from overrides orientation horizontal
  :host([orientation='horizontal'][horizontal-from='#{$breakpoint}']),
  :host([orientation='vertical'][horizontal-from='#{$breakpoint}']) {
    @include mq($to: #{$breakpoint}) {
      @include vertical-action-group-element-align-reset;
    }
  }
}

::slotted(sbb-link) {
  white-space: nowrap;
}

@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  display: block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize css of several frameworks.
  outline: none !important;

  --sbb-teaser-hero-brightness-hover: var(--sbb-hover-image-brightness);
  --sbb-teaser-hero-chip-label-inset: var(--sbb-spacing-responsive-xxxs) auto auto
    var(--sbb-spacing-responsive-xxxs);

  @include sbb.panel-variables;
}

@include sbb.hover-mq($hover: true) {
  :host(:hover) {
    --sbb-panel-background-color: var(--sbb-panel-background-color-hover);
    --sbb-teaser-hero-brightness: var(--sbb-teaser-hero-brightness-hover);
  }
}

.sbb-teaser-hero {
  position: relative;
  display: block;
  min-height: var(--sbb-panel-height);

  // Hide focus outline when focus origin is mouse or touch. This is being used as a workaround in various components.
  :host(:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) &:focus-visible {
    @include sbb.focus-outline;
  }
}

.sbb-teaser-hero__panel {
  z-index: 1;

  @include sbb.panel;

  & {
    @include sbb.absolute-center-y;
  }

  // Hide panel when no content or link-content is provided.
  :host(:not([data-slot-names~='unnamed'], [data-slot-names~='link-content'], [link-content])) & {
    display: none;
  }
}

.sbb-teaser-hero__panel-text {
  @include sbb.panel-text;

  hyphens: auto;

  // Reset paragraph styles
  display: inline;
  margin: 0;
  padding: 0;
}

::slotted([slot='image']),
sbb-image {
  will-change: filter;
  filter: brightness(var(--sbb-teaser-hero-brightness, 1));
  transition: filter var(--sbb-panel-animation-duration) var(--sbb-panel-animation-easing);
}

::slotted([slot='chip']) {
  position: absolute;
  inset: var(--sbb-teaser-hero-chip-label-inset);
  z-index: 2;
}

@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

$icon-only: ':where([data-slot-names~=icon], [icon-name]):not([data-slot-names~=unnamed])';

:host {
  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize css of several frameworks.
  outline: none !important;

  --sbb-button-icon-size: var(--sbb-size-icon-ui-small);
  --sbb-button-gap: var(--sbb-spacing-fixed-2x);

  @include sbb.button-variables;

  @include sbb.if-forced-colors {
    // For static cases, button and link roles will override it.
    --sbb-button-color-default-text: CanvasText !important;
    --sbb-button-color-hover-text: CanvasText !important;
    --sbb-button-color-active-text: CanvasText !important;
  }
}

:host([data-button]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: ButtonText !important;
    --sbb-button-color-hover-text: ButtonText !important;
    --sbb-button-color-active-text: ButtonText !important;
  }
}

:host([data-link]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: LinkText !important;
    --sbb-button-color-hover-text: LinkText !important;
    --sbb-button-color-active-text: LinkText !important;
  }
}

:host([negative]) {
  --sbb-button-color-disabled-background: var(--sbb-color-anthracite);
  --sbb-button-color-disabled-text: var(--sbb-color-aluminium);
}

:host([size='m']) {
  @include sbb.button-size-m;
}

:host([size='s']) {
  @include sbb.button-size-s;
}

:host(#{$icon-only}) {
  --sbb-button-padding-inline: 0;
}

:host(:not([disabled], :active, [data-active]):hover) {
  @include sbb.button-hover;
}

.sbb-action-base {
  @include sbb.text-xs--bold;

  // Reset for link variant
  text-decoration: none;
  width: 100%;
  gap: var(--sbb-button-gap);
  transition-duration: var(--sbb-button-transition-duration);
  transition-timing-function: var(--sbb-button-transition-easing-function);
  transition-property: color;

  // Renders background and border in the background absolute to enable the hover animation
  &::before {
    @include sbb.button-base-before;

    :host([disabled]) & {
      @include sbb.button-disabled-before;
    }

    :host(:not([disabled], :active, [data-active]):hover) & {
      @include sbb.button-hover-before;
    }

    :host(:not([disabled]):is(:active, [data-active])) & {
      @include sbb.button-active;
    }
  }

  :host(#{$icon-only}) & {
    width: var(--sbb-button-min-height);
    justify-content: center;
  }

  :host([disabled]) & {
    @include sbb.button-disabled;
  }

  :host(:not([disabled], :active, [data-active]):hover) & {
    @include sbb.hover-mq($hover: true) {
      color: var(--sbb-button-color-hover-text);
    }
  }

  /* stylelint-disable no-descending-specificity */
  :host([data-focus-visible]) &,
  // Hide focus outline when focus origin is mouse or touch. This is being used as a workaround in various components.
  // Handle focus on the host (button variant)
  :host(:focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) &,
  // Handle focus on the action (link variant)
  :host(:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) &:focus-visible {
    &::before {
      @include sbb.focus-outline;
    }
  }
  /* stylelint-enable no-descending-specificity */
}

.sbb-button__label,
::slotted([slot='icon']),
sbb-icon {
  transition: transform var(--sbb-button-transition-duration)
    var(--sbb-button-transition-easing-function);
  transform: translateY(var(--sbb-button-translate-y-content-hover, #{sbb.px-to-rem-build(0)}));
}

.sbb-button__label {
  @include sbb.ellipsis;

  display: block;

  :host(#{$icon-only}) & {
    display: none;
  }
}

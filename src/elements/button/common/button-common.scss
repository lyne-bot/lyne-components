@use '../../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

$icon-only: ':where([data-slot-names~=icon], [icon-name]):not([data-slot-names~=unnamed])';
$disabled: '[disabled], :disabled, [disabled-interactive]';
$active: ':active, [data-active]';

:host {
  display: inline-block;

  // Use !important here to not interfere with Firefox focus ring definition
  // which appears in normalize CSS of several frameworks.
  outline: none !important;

  --sbb-button-icon-size: var(--sbb-size-icon-ui-small);
  --sbb-button-color-disabled-background: var(--sbb-color-milk);
  --sbb-button-color-disabled-border: var(--sbb-color-smoke);
  --sbb-button-color-disabled-text: var(--sbb-color-granite);
  --sbb-button-shadow-1-offset-y: var(--sbb-shadow-elevation-level-3-shadow-1-offset-y);
  --sbb-button-shadow-2-offset-y: var(--sbb-shadow-elevation-level-3-shadow-2-offset-y);
  --sbb-button-shadow-1-blur: var(--sbb-shadow-elevation-level-3-shadow-1-blur);
  --sbb-button-shadow-2-blur: var(--sbb-shadow-elevation-level-3-shadow-2-blur);
  --sbb-button-shadow-1-color: var(--sbb-color-red-alpha-20);
  --sbb-button-shadow-2-color: var(--sbb-color-red125-alpha-20);
  --sbb-button-border-style: solid;
  --sbb-button-border-disabled-style: dashed;
  --sbb-button-border-width: var(--sbb-border-width-2x);
  --sbb-button-border-disabled-width: var(--sbb-border-width-1x);
  --sbb-button-border-radius: var(--sbb-border-radius-infinity);
  --sbb-button-min-height: var(--sbb-size-element-m);
  --sbb-button-transition-duration: var(
    --sbb-disable-animation-duration,
    var(--sbb-animation-duration-2x)
  );
  --sbb-button-transition-easing-function: var(--sbb-animation-easing);
  --sbb-button-padding-block-min: var(--sbb-spacing-fixed-1x);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  --sbb-button-gap: var(--sbb-spacing-fixed-2x);
  --sbb-button-inset: 0;
  --sbb-button-box-shadow: transparent 0 0;
  --sbb-button-box-shadow-definition: var(--sbb-shadow-elevation-level-3-shadow-2-offset-x)
      var(--sbb-button-shadow-2-offset-y) var(--sbb-button-shadow-2-blur)
      var(--sbb-shadow-elevation-level-3-shadow-2-spread) var(--sbb-button-shadow-2-color),
    var(--sbb-shadow-elevation-level-3-shadow-1-offset-x) var(--sbb-button-shadow-1-offset-y)
      var(--sbb-button-shadow-1-blur) var(--sbb-shadow-elevation-level-3-shadow-1-spread)
      var(--sbb-button-shadow-1-color);
  --_inner-border-width: var(--sbb-button-border-width);
  --_outer-border-width: 0;
  --_border-color: var(--sbb-button-color-default-border);
  --_background-color: var(--sbb-button-color-default-background);
  --_color: var(--sbb-button-color-default-text);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-10x);
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-default-border: CanvasText !important;
    --sbb-button-color-active-border: Highlight !important;
    --sbb-button-color-default-background: Canvas !important;
    --sbb-button-color-hover-background: Canvas !important;
    --sbb-button-color-active-background: Canvas !important;
    --sbb-button-color-disabled-background: Canvas !important;
    --sbb-button-color-disabled-text: GrayText !important;

    // For static cases, button and link roles will override it.
    --sbb-button-color-default-text: CanvasText !important;
    --sbb-button-color-hover-text: CanvasText !important;
    --sbb-button-color-active-text: CanvasText !important;
  }
}

:host([data-button]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: ButtonText !important;
    --sbb-button-color-hover-text: ButtonText !important;
    --sbb-button-color-active-text: ButtonText !important;
  }
}

:host([data-link]) {
  @include sbb.if-forced-colors {
    --sbb-button-color-default-text: LinkText !important;
    --sbb-button-color-hover-text: LinkText !important;
    --sbb-button-color-active-text: LinkText !important;
  }
}

:host([negative]) {
  --sbb-button-color-disabled-background: var(--sbb-color-charcoal);
  --sbb-button-color-disabled-text: var(--sbb-color-aluminium);
}

:host([size='m']) {
  --sbb-button-min-height: var(--sbb-size-element-s);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-5x);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-8x);
  }
}

:host([size='s']) {
  --sbb-button-min-height: var(--sbb-size-element-xs);
  --sbb-button-padding-inline: var(--sbb-spacing-fixed-4x);
  --sbb-button-gap: var(--sbb-spacing-fixed-1x);

  @include sbb.mq($from: medium) {
    --sbb-button-padding-inline: var(--sbb-spacing-fixed-5x);
  }
}

:host(#{$icon-only}) {
  --sbb-button-padding-inline: 0;
}

:host(:not(#{$disabled}, #{$active}):hover) {
  @include sbb.hover-mq($hover: true) {
    --sbb-button-translate-y-content-hover: #{sbb.px-to-rem-build(-1)};
    --sbb-button-shadow-1-offset-y: calc(
      0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-offset-y)
    );
    --sbb-button-shadow-1-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-1-blur));
    --sbb-button-shadow-2-blur: calc(0.5 * var(--sbb-shadow-elevation-level-3-shadow-2-blur));

    // TODO: document
    --sbb-focus-outline-offset: #{sbb.px-to-rem-build(5)};
    --_inner-border-width: 0;
    --_outer-border-width: var(--sbb-button-border-width);
    --_border-color: var(--sbb-button-color-hover-border);
    --_color: var(--sbb-button-color-hover-text);
    --_background-color: var(--sbb-button-color-hover-background);
  }

  @include sbb.if-forced-colors {
    --sbb-button-color-hover-border: Highlight !important;
  }
}

:host([disabled]) {
  --_color: var(--sbb-button-color-disabled-text);
  --_background-color: var(--sbb-button-color-disabled-background);
  --_border-color: var(--sbb-button-color-disabled-border);
}

:host(:not([disabled]):is(:active, [data-active])) {
  --_color: var(--sbb-button-color-active-text);
  --_background-color: var(--sbb-button-color-active-background);
  --_border-color: var(--sbb-button-color-active-border);
}

.sbb-action-base {
  @include sbb.text-xs--bold;
  @include sbb.ellipsis;

  display: inline-block;
  text-align: center;
  transition-duration: var(--sbb-button-transition-duration);
  transition-timing-function: var(--sbb-button-transition-easing-function);
  transition-property: color, box-shadow, padding, outline-offset;
  min-height: var(--sbb-button-min-height);
  border-radius: var(--sbb-button-border-radius);

  // The padding block value is only a minimal padding to preserve a padding if the content becomes larger than intended.
  // Positioning of the content is made by flexbox vertical centering.
  // The real padding displayed is larger than the defined value below.
  padding-block: calc(
      0.5 * (var(--sbb-button-min-height) - 1em * var(--sbb-typo-line-height-body-text)) +
        var(--sbb-button-translate-y-content-hover, 0rem)
    )
    calc(0.5 * (var(--sbb-button-min-height) - 1em * var(--sbb-typo-line-height-body-text)));
  padding-inline: var(--sbb-button-padding-inline);
  color: var(--_color);
  cursor: pointer;
  user-select: none;
  outline: none;
  background-color: var(--_background-color);
  box-shadow:
    inset var(--_border-color) 0 0 0 var(--_inner-border-width),
    var(--_border-color) 0 0 0 var(--_outer-border-width),
    var(--sbb-button-box-shadow);

  // Setting the outline-offset is needed to avoid animation glitch
  outline-offset: var(--sbb-focus-outline-offset);

  :host(:is(#{$disabled})) & {
    box-shadow: none;
    border: var(--sbb-button-border-disabled-width) var(--sbb-button-border-disabled-style)
      var(--_border-color);
    padding-inline: calc(
      var(--sbb-button-padding-inline) - var(--sbb-button-border-disabled-width)
    );
    padding-block: calc(
      0.5 * (var(--sbb-button-min-height) - 1em * var(--sbb-typo-line-height-body-text)) - var(
          --sbb-button-border-disabled-width
        )
    );
  }

  :host(#{$icon-only}) & {
    width: var(--sbb-button-min-height);
    justify-content: center;
  }

  :host(:is(#{$disabled})) & {
    cursor: default;
    pointer-events: none;
  }

  // stylelint-disable no-descending-specificity
  :host([data-focus-visible]) &,
  // Hide focus outline when focus origin is mouse or touch. This is being used as a workaround in various components.
  // Handle focus on the host (button variant)
  :host(:focus-visible:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) &,
  // Handle focus on the action (link variant)
  :host(:not([data-focus-origin='mouse'], [data-focus-origin='touch'])) &:focus-visible {
    @include sbb.focus-outline;
  }
  // stylelint-enable no-descending-specificity
}

// TODO: keep here instead of extracting to mixin
.sbb-action-base {
  // Reset for link variant
  text-decoration: none;
  width: 100%;
  display: block;
}

::slotted([slot='icon']),
sbb-icon {
  // Positioning done by trial and error
  margin-block: #{sbb.px-to-rem-build(-4)} #{sbb.px-to-rem-build(-2)};
  vertical-align: middle;

  // TODO: document
  @supports (-moz-appearance: none) {
    @include sbb.mq($from: medium) {
      margin-block-end: #{sbb.px-to-rem-build(-1)};
    }
  }

  :host(:not(#{$icon-only})) & {
    // We have to subtract --sbb-spacing-fixed-1x as there is a natural gap which corresponds to this value
    margin-inline-end: calc(var(--sbb-button-gap) - var(--sbb-spacing-fixed-1x));
  }
}

::slotted(sbb-icon),
sbb-icon {
  height: var(--sbb-button-icon-size);
}

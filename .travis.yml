# Add release version as message to Netlify deployment
# 1. .releaserc -> write version to .version
# 2. add --message in format: ::VERSION:: in netlify deploy

# Initially, we used Travis's stages and workspaces
# https://docs.travis-ci.com/user/using-workspaces/
# In stage1: Build and deploy to npm
# In stage2: Build Storybook and deploy to Netlify
# Where stage2 takes up to 2 minutes.
# The problem: If no new version is released, it is not possible to define
# a condition so that stage2 is not run. Therefore the build would last 2 min
# longer than necessary.
# Solution: For simplicity, we omit stages and do everything in the script
# block of one job.
os: linux
language: node_js

# There is an issue with chromatic cli if install phase is handled by travis.
# So we skip install and install npm dependencies manually in each stage.
install: skip

notifications:

  slack:
    template:
      # This template config somehow breaks yaml syntax
      # in the editor although it is valid yaml syntax
      - "Project: lyne-components"
      - "Build: <%{build_url}|%{build_number}>"
      - "Commit: <%{compare_url}|%{commit}>"
      - "Author: %{author}"
      - "Result: %{result} in %{duration}"
    secure: vB5wQL+sq2HlZ3qY5bt1PL2nf309aUm2TPlEj1phjtZ+qoW5XwMUM6XebMoycmWaesHirK0v0AKWluQwJ6fTu9rDKDDASVc2v3u2vg8fxeYLnMoCSoEalpmS6kBcxmXwqlIJUfIG8ow1pkcaTeiKYK/2ZHCdn3ArQ6ouAKh1P//VtpR3Dc/aai+TInJBhprYrk31scVTw81rOQU3F3GPJuVS1lelvyOhjy+12gqYRWPzU6voBmaG7eYhyqEjGfJJS7p1DM3QpnDar18seOK8tKjSiThWPS9VHYcaBBh1mBslkshqU0jiPRMQNWPtw7lf/7ueRe1drQsMSABPeQlbTdGYSh+w48P24vl4xPoGdhI0LTLpzzjmTROBRJPtQ7krZTswjSNKnVgbU8gVZLDSI77BI1o9flQNF1PBYxzru10WlznlDdeZwRotdV3wVDdHtYLBUq6qs6NuLbYnVPDgIgclMdeYVHf9l0aTSFq2SSVV0Y8SpvAOweuQoZD6bf+5jnUvAKDdg4EVN7yR1mWANwOg3ahOZDVykpRFPYIAe4lN8QwT2CjqHrkF9zKpNmcrdR+P1WpFufFaZO1qFDat6phzw2DcSMZw1DdvRKFgu+1WCvOHAYJJfpS0SuOr5cm3U+noDFUoukSa37qqOEzXsNikb7oxNyCR0RNb+a9rrpY=

jobs:
  include:
    - stage: build, test and deploy packages and storybook for production
      if: ((branch = master AND type != pull_request) AND fork = false)
      script:

        # install dependencies
        - npm install

        # it may be that we get an api request from design-tokens build. in that
        # case, we need to install lyne-design-tokens and lyne-icons
        # an make an according commit
        - node ./ci/designTokensUpdate.js --eventType=$TRAVIS_EVENT_TYPE --buildId=$TRAVIS_BUILD_ID

        # lint
        # travis_terminate 1: make sure build immediately stops if the
        # Command exits with non-zero code
        - npm run lint || travis_terminate 1

        # Make Stencil production build
        - npm run build:stencil || travis_terminate 1

        # Run tests
        - npm run test:prod || travis_terminate 1

        # upload coverage report
        - bash <(curl -s https://codecov.io/bash)

      after_success:

        # run semantic release
        - npm run semantic-release

        # Make Storybook build
        - STORYBOOK_COMPONENTS_VERSION=$(cat .version) npm run build:storybook

        # Send storybook to chromatic. These snapshots should be accepted as new
        # baseline in storybook.
        - npm run chromatic:master

        # install netlify-cli. We send stdout/stderr to /dev/null since we're not
        # interested in the output from netlify-cli
        - npm install netlify-cli -g > "/dev/null" 2>&1

        # Build Storybook and run Netlify deploy
        - ./ci/netlify_deploy.sh

        # Build and deploy the deployments json
        - ./ci/deployments.sh

        # trigger a build on lyne-documentation
        - node ./ci/trigger_lyne_documentation.js -t $TRAVIS_TOKEN

    - stage: build, test and deploy storybook for branches other than master
      if: ((branch != master OR type = pull_request) AND fork = false)
      script:

        # install dependencies
        - npm install

        # Lint
        - npm run lint || travis_terminate 1

        # Make Stencil production build
        - npm run build:stencil || travis_terminate 1

        # Run tests
        - npm run test:prod || travis_terminate 1

        # upload coverage report
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then bash <(curl -s https://codecov.io/bash); fi'

      after_success:

        # install netlify-cli. We send stdout/stderr to /dev/null since we're not
        # Interested in the output from netlify-cli
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then npm install netlify-cli -g > "/dev/null" 2>&1; fi'

        # Make Storybook build
        - npm run build:storybook || travis_terminate 1

        # Send storybook to chromatic
        - 'if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then npm run chromatic; fi'

        # Build Storybook and run Netlify deploy
        - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then ./ci/netlify_deploy_branch.sh $TRAVIS_BRANCH; fi'

        # Build and deploy the deployments page
        - ./ci/deployments.sh

        # trigger a build on lyne-documentation
        # actually we trigger lyne-documentation so that release preview page
        # is rerendered
        - node ./ci/trigger_lyne_documentation.js -t $TRAVIS_TOKEN || travis_terminate 1
